
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model orders
 * 
 */
export type orders = $Result.DefaultSelection<Prisma.$ordersPayload>
/**
 * Model discounts
 * 
 */
export type discounts = $Result.DefaultSelection<Prisma.$discountsPayload>
/**
 * Model userdiscount
 * 
 */
export type userdiscount = $Result.DefaultSelection<Prisma.$userdiscountPayload>
/**
 * Model orderdetail
 * 
 */
export type orderdetail = $Result.DefaultSelection<Prisma.$orderdetailPayload>
/**
 * Model payments
 * 
 */
export type payments = $Result.DefaultSelection<Prisma.$paymentsPayload>
/**
 * Model users
 * 
 */
export type users = $Result.DefaultSelection<Prisma.$usersPayload>
/**
 * Model categories
 * 
 */
export type categories = $Result.DefaultSelection<Prisma.$categoriesPayload>
/**
 * Model Product
 * 
 */
export type Product = $Result.DefaultSelection<Prisma.$ProductPayload>
/**
 * Model health_info
 * 
 */
export type health_info = $Result.DefaultSelection<Prisma.$health_infoPayload>
/**
 * Model reviews
 * 
 */
export type reviews = $Result.DefaultSelection<Prisma.$reviewsPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const orders_order_status: {
  processing: 'processing',
  completed: 'completed',
  cancelled: 'cancelled',
  shipping: 'shipping',
  contactadmin: 'contactadmin',
  failed: 'failed'
};

export type orders_order_status = (typeof orders_order_status)[keyof typeof orders_order_status]


export const shipping_shipping_status: {
  ems: 'ems',
  standard: 'standard'
};

export type shipping_shipping_status = (typeof shipping_shipping_status)[keyof typeof shipping_shipping_status]


export const discount_status: {
  onProduct: 'onProduct',
  onPrepare: 'onPrepare',
  onProcess: 'onProcess'
};

export type discount_status = (typeof discount_status)[keyof typeof discount_status]


export const userdiscount_status: {
  active: 'active',
  used: 'used',
  expired: 'expired'
};

export type userdiscount_status = (typeof userdiscount_status)[keyof typeof userdiscount_status]


export const payments_payment_status: {
  pending: 'pending',
  cancelled: 'cancelled',
  completed: 'completed'
};

export type payments_payment_status = (typeof payments_payment_status)[keyof typeof payments_payment_status]

}

export type orders_order_status = $Enums.orders_order_status

export const orders_order_status: typeof $Enums.orders_order_status

export type shipping_shipping_status = $Enums.shipping_shipping_status

export const shipping_shipping_status: typeof $Enums.shipping_shipping_status

export type discount_status = $Enums.discount_status

export const discount_status: typeof $Enums.discount_status

export type userdiscount_status = $Enums.userdiscount_status

export const userdiscount_status: typeof $Enums.userdiscount_status

export type payments_payment_status = $Enums.payments_payment_status

export const payments_payment_status: typeof $Enums.payments_payment_status

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Orders
 * const orders = await prisma.orders.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Orders
   * const orders = await prisma.orders.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.orders`: Exposes CRUD operations for the **orders** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Orders
    * const orders = await prisma.orders.findMany()
    * ```
    */
  get orders(): Prisma.ordersDelegate<ExtArgs>;

  /**
   * `prisma.discounts`: Exposes CRUD operations for the **discounts** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Discounts
    * const discounts = await prisma.discounts.findMany()
    * ```
    */
  get discounts(): Prisma.discountsDelegate<ExtArgs>;

  /**
   * `prisma.userdiscount`: Exposes CRUD operations for the **userdiscount** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Userdiscounts
    * const userdiscounts = await prisma.userdiscount.findMany()
    * ```
    */
  get userdiscount(): Prisma.userdiscountDelegate<ExtArgs>;

  /**
   * `prisma.orderdetail`: Exposes CRUD operations for the **orderdetail** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Orderdetails
    * const orderdetails = await prisma.orderdetail.findMany()
    * ```
    */
  get orderdetail(): Prisma.orderdetailDelegate<ExtArgs>;

  /**
   * `prisma.payments`: Exposes CRUD operations for the **payments** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Payments
    * const payments = await prisma.payments.findMany()
    * ```
    */
  get payments(): Prisma.paymentsDelegate<ExtArgs>;

  /**
   * `prisma.users`: Exposes CRUD operations for the **users** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.users.findMany()
    * ```
    */
  get users(): Prisma.usersDelegate<ExtArgs>;

  /**
   * `prisma.categories`: Exposes CRUD operations for the **categories** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Categories
    * const categories = await prisma.categories.findMany()
    * ```
    */
  get categories(): Prisma.categoriesDelegate<ExtArgs>;

  /**
   * `prisma.product`: Exposes CRUD operations for the **Product** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Products
    * const products = await prisma.product.findMany()
    * ```
    */
  get product(): Prisma.ProductDelegate<ExtArgs>;

  /**
   * `prisma.health_info`: Exposes CRUD operations for the **health_info** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Health_infos
    * const health_infos = await prisma.health_info.findMany()
    * ```
    */
  get health_info(): Prisma.health_infoDelegate<ExtArgs>;

  /**
   * `prisma.reviews`: Exposes CRUD operations for the **reviews** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Reviews
    * const reviews = await prisma.reviews.findMany()
    * ```
    */
  get reviews(): Prisma.reviewsDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.19.1
   * Query Engine version: 34ace0eb2704183d2c05b60b52fba5c43c13f303
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    orders: 'orders',
    discounts: 'discounts',
    userdiscount: 'userdiscount',
    orderdetail: 'orderdetail',
    payments: 'payments',
    users: 'users',
    categories: 'categories',
    Product: 'Product',
    health_info: 'health_info',
    reviews: 'reviews'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "orders" | "discounts" | "userdiscount" | "orderdetail" | "payments" | "users" | "categories" | "product" | "health_info" | "reviews"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      orders: {
        payload: Prisma.$ordersPayload<ExtArgs>
        fields: Prisma.ordersFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ordersFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ordersPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ordersFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ordersPayload>
          }
          findFirst: {
            args: Prisma.ordersFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ordersPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ordersFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ordersPayload>
          }
          findMany: {
            args: Prisma.ordersFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ordersPayload>[]
          }
          create: {
            args: Prisma.ordersCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ordersPayload>
          }
          createMany: {
            args: Prisma.ordersCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ordersDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ordersPayload>
          }
          update: {
            args: Prisma.ordersUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ordersPayload>
          }
          deleteMany: {
            args: Prisma.ordersDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ordersUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ordersUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ordersPayload>
          }
          aggregate: {
            args: Prisma.OrdersAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOrders>
          }
          groupBy: {
            args: Prisma.ordersGroupByArgs<ExtArgs>
            result: $Utils.Optional<OrdersGroupByOutputType>[]
          }
          count: {
            args: Prisma.ordersCountArgs<ExtArgs>
            result: $Utils.Optional<OrdersCountAggregateOutputType> | number
          }
        }
      }
      discounts: {
        payload: Prisma.$discountsPayload<ExtArgs>
        fields: Prisma.discountsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.discountsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$discountsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.discountsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$discountsPayload>
          }
          findFirst: {
            args: Prisma.discountsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$discountsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.discountsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$discountsPayload>
          }
          findMany: {
            args: Prisma.discountsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$discountsPayload>[]
          }
          create: {
            args: Prisma.discountsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$discountsPayload>
          }
          createMany: {
            args: Prisma.discountsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.discountsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$discountsPayload>
          }
          update: {
            args: Prisma.discountsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$discountsPayload>
          }
          deleteMany: {
            args: Prisma.discountsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.discountsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.discountsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$discountsPayload>
          }
          aggregate: {
            args: Prisma.DiscountsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDiscounts>
          }
          groupBy: {
            args: Prisma.discountsGroupByArgs<ExtArgs>
            result: $Utils.Optional<DiscountsGroupByOutputType>[]
          }
          count: {
            args: Prisma.discountsCountArgs<ExtArgs>
            result: $Utils.Optional<DiscountsCountAggregateOutputType> | number
          }
        }
      }
      userdiscount: {
        payload: Prisma.$userdiscountPayload<ExtArgs>
        fields: Prisma.userdiscountFieldRefs
        operations: {
          findUnique: {
            args: Prisma.userdiscountFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userdiscountPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.userdiscountFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userdiscountPayload>
          }
          findFirst: {
            args: Prisma.userdiscountFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userdiscountPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.userdiscountFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userdiscountPayload>
          }
          findMany: {
            args: Prisma.userdiscountFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userdiscountPayload>[]
          }
          create: {
            args: Prisma.userdiscountCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userdiscountPayload>
          }
          createMany: {
            args: Prisma.userdiscountCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.userdiscountDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userdiscountPayload>
          }
          update: {
            args: Prisma.userdiscountUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userdiscountPayload>
          }
          deleteMany: {
            args: Prisma.userdiscountDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.userdiscountUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.userdiscountUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userdiscountPayload>
          }
          aggregate: {
            args: Prisma.UserdiscountAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserdiscount>
          }
          groupBy: {
            args: Prisma.userdiscountGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserdiscountGroupByOutputType>[]
          }
          count: {
            args: Prisma.userdiscountCountArgs<ExtArgs>
            result: $Utils.Optional<UserdiscountCountAggregateOutputType> | number
          }
        }
      }
      orderdetail: {
        payload: Prisma.$orderdetailPayload<ExtArgs>
        fields: Prisma.orderdetailFieldRefs
        operations: {
          findUnique: {
            args: Prisma.orderdetailFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$orderdetailPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.orderdetailFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$orderdetailPayload>
          }
          findFirst: {
            args: Prisma.orderdetailFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$orderdetailPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.orderdetailFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$orderdetailPayload>
          }
          findMany: {
            args: Prisma.orderdetailFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$orderdetailPayload>[]
          }
          create: {
            args: Prisma.orderdetailCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$orderdetailPayload>
          }
          createMany: {
            args: Prisma.orderdetailCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.orderdetailDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$orderdetailPayload>
          }
          update: {
            args: Prisma.orderdetailUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$orderdetailPayload>
          }
          deleteMany: {
            args: Prisma.orderdetailDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.orderdetailUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.orderdetailUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$orderdetailPayload>
          }
          aggregate: {
            args: Prisma.OrderdetailAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOrderdetail>
          }
          groupBy: {
            args: Prisma.orderdetailGroupByArgs<ExtArgs>
            result: $Utils.Optional<OrderdetailGroupByOutputType>[]
          }
          count: {
            args: Prisma.orderdetailCountArgs<ExtArgs>
            result: $Utils.Optional<OrderdetailCountAggregateOutputType> | number
          }
        }
      }
      payments: {
        payload: Prisma.$paymentsPayload<ExtArgs>
        fields: Prisma.paymentsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.paymentsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$paymentsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.paymentsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$paymentsPayload>
          }
          findFirst: {
            args: Prisma.paymentsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$paymentsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.paymentsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$paymentsPayload>
          }
          findMany: {
            args: Prisma.paymentsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$paymentsPayload>[]
          }
          create: {
            args: Prisma.paymentsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$paymentsPayload>
          }
          createMany: {
            args: Prisma.paymentsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.paymentsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$paymentsPayload>
          }
          update: {
            args: Prisma.paymentsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$paymentsPayload>
          }
          deleteMany: {
            args: Prisma.paymentsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.paymentsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.paymentsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$paymentsPayload>
          }
          aggregate: {
            args: Prisma.PaymentsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePayments>
          }
          groupBy: {
            args: Prisma.paymentsGroupByArgs<ExtArgs>
            result: $Utils.Optional<PaymentsGroupByOutputType>[]
          }
          count: {
            args: Prisma.paymentsCountArgs<ExtArgs>
            result: $Utils.Optional<PaymentsCountAggregateOutputType> | number
          }
        }
      }
      users: {
        payload: Prisma.$usersPayload<ExtArgs>
        fields: Prisma.usersFieldRefs
        operations: {
          findUnique: {
            args: Prisma.usersFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.usersFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          findFirst: {
            args: Prisma.usersFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.usersFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          findMany: {
            args: Prisma.usersFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>[]
          }
          create: {
            args: Prisma.usersCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          createMany: {
            args: Prisma.usersCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.usersDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          update: {
            args: Prisma.usersUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          deleteMany: {
            args: Prisma.usersDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.usersUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.usersUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          aggregate: {
            args: Prisma.UsersAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUsers>
          }
          groupBy: {
            args: Prisma.usersGroupByArgs<ExtArgs>
            result: $Utils.Optional<UsersGroupByOutputType>[]
          }
          count: {
            args: Prisma.usersCountArgs<ExtArgs>
            result: $Utils.Optional<UsersCountAggregateOutputType> | number
          }
        }
      }
      categories: {
        payload: Prisma.$categoriesPayload<ExtArgs>
        fields: Prisma.categoriesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.categoriesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$categoriesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.categoriesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$categoriesPayload>
          }
          findFirst: {
            args: Prisma.categoriesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$categoriesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.categoriesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$categoriesPayload>
          }
          findMany: {
            args: Prisma.categoriesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$categoriesPayload>[]
          }
          create: {
            args: Prisma.categoriesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$categoriesPayload>
          }
          createMany: {
            args: Prisma.categoriesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.categoriesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$categoriesPayload>
          }
          update: {
            args: Prisma.categoriesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$categoriesPayload>
          }
          deleteMany: {
            args: Prisma.categoriesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.categoriesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.categoriesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$categoriesPayload>
          }
          aggregate: {
            args: Prisma.CategoriesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCategories>
          }
          groupBy: {
            args: Prisma.categoriesGroupByArgs<ExtArgs>
            result: $Utils.Optional<CategoriesGroupByOutputType>[]
          }
          count: {
            args: Prisma.categoriesCountArgs<ExtArgs>
            result: $Utils.Optional<CategoriesCountAggregateOutputType> | number
          }
        }
      }
      Product: {
        payload: Prisma.$ProductPayload<ExtArgs>
        fields: Prisma.ProductFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProductFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProductFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          findFirst: {
            args: Prisma.ProductFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProductFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          findMany: {
            args: Prisma.ProductFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>[]
          }
          create: {
            args: Prisma.ProductCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          createMany: {
            args: Prisma.ProductCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ProductDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          update: {
            args: Prisma.ProductUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          deleteMany: {
            args: Prisma.ProductDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProductUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ProductUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          aggregate: {
            args: Prisma.ProductAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProduct>
          }
          groupBy: {
            args: Prisma.ProductGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProductGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProductCountArgs<ExtArgs>
            result: $Utils.Optional<ProductCountAggregateOutputType> | number
          }
        }
      }
      health_info: {
        payload: Prisma.$health_infoPayload<ExtArgs>
        fields: Prisma.health_infoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.health_infoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$health_infoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.health_infoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$health_infoPayload>
          }
          findFirst: {
            args: Prisma.health_infoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$health_infoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.health_infoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$health_infoPayload>
          }
          findMany: {
            args: Prisma.health_infoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$health_infoPayload>[]
          }
          create: {
            args: Prisma.health_infoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$health_infoPayload>
          }
          createMany: {
            args: Prisma.health_infoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.health_infoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$health_infoPayload>
          }
          update: {
            args: Prisma.health_infoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$health_infoPayload>
          }
          deleteMany: {
            args: Prisma.health_infoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.health_infoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.health_infoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$health_infoPayload>
          }
          aggregate: {
            args: Prisma.Health_infoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateHealth_info>
          }
          groupBy: {
            args: Prisma.health_infoGroupByArgs<ExtArgs>
            result: $Utils.Optional<Health_infoGroupByOutputType>[]
          }
          count: {
            args: Prisma.health_infoCountArgs<ExtArgs>
            result: $Utils.Optional<Health_infoCountAggregateOutputType> | number
          }
        }
      }
      reviews: {
        payload: Prisma.$reviewsPayload<ExtArgs>
        fields: Prisma.reviewsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.reviewsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$reviewsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.reviewsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$reviewsPayload>
          }
          findFirst: {
            args: Prisma.reviewsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$reviewsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.reviewsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$reviewsPayload>
          }
          findMany: {
            args: Prisma.reviewsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$reviewsPayload>[]
          }
          create: {
            args: Prisma.reviewsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$reviewsPayload>
          }
          createMany: {
            args: Prisma.reviewsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.reviewsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$reviewsPayload>
          }
          update: {
            args: Prisma.reviewsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$reviewsPayload>
          }
          deleteMany: {
            args: Prisma.reviewsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.reviewsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.reviewsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$reviewsPayload>
          }
          aggregate: {
            args: Prisma.ReviewsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateReviews>
          }
          groupBy: {
            args: Prisma.reviewsGroupByArgs<ExtArgs>
            result: $Utils.Optional<ReviewsGroupByOutputType>[]
          }
          count: {
            args: Prisma.reviewsCountArgs<ExtArgs>
            result: $Utils.Optional<ReviewsCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type OrdersCountOutputType
   */

  export type OrdersCountOutputType = {
    orderdetails: number
    payments: number
  }

  export type OrdersCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    orderdetails?: boolean | OrdersCountOutputTypeCountOrderdetailsArgs
    payments?: boolean | OrdersCountOutputTypeCountPaymentsArgs
  }

  // Custom InputTypes
  /**
   * OrdersCountOutputType without action
   */
  export type OrdersCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrdersCountOutputType
     */
    select?: OrdersCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * OrdersCountOutputType without action
   */
  export type OrdersCountOutputTypeCountOrderdetailsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: orderdetailWhereInput
  }

  /**
   * OrdersCountOutputType without action
   */
  export type OrdersCountOutputTypeCountPaymentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: paymentsWhereInput
  }


  /**
   * Count Type DiscountsCountOutputType
   */

  export type DiscountsCountOutputType = {
    orders: number
    userdiscount: number
  }

  export type DiscountsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    orders?: boolean | DiscountsCountOutputTypeCountOrdersArgs
    userdiscount?: boolean | DiscountsCountOutputTypeCountUserdiscountArgs
  }

  // Custom InputTypes
  /**
   * DiscountsCountOutputType without action
   */
  export type DiscountsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiscountsCountOutputType
     */
    select?: DiscountsCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * DiscountsCountOutputType without action
   */
  export type DiscountsCountOutputTypeCountOrdersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ordersWhereInput
  }

  /**
   * DiscountsCountOutputType without action
   */
  export type DiscountsCountOutputTypeCountUserdiscountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: userdiscountWhereInput
  }


  /**
   * Count Type UsersCountOutputType
   */

  export type UsersCountOutputType = {
    orders: number
    reviews: number
    userdiscount: number
  }

  export type UsersCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    orders?: boolean | UsersCountOutputTypeCountOrdersArgs
    reviews?: boolean | UsersCountOutputTypeCountReviewsArgs
    userdiscount?: boolean | UsersCountOutputTypeCountUserdiscountArgs
  }

  // Custom InputTypes
  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsersCountOutputType
     */
    select?: UsersCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountOrdersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ordersWhereInput
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountReviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: reviewsWhereInput
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountUserdiscountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: userdiscountWhereInput
  }


  /**
   * Count Type CategoriesCountOutputType
   */

  export type CategoriesCountOutputType = {
    Product: number
  }

  export type CategoriesCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Product?: boolean | CategoriesCountOutputTypeCountProductArgs
  }

  // Custom InputTypes
  /**
   * CategoriesCountOutputType without action
   */
  export type CategoriesCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoriesCountOutputType
     */
    select?: CategoriesCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CategoriesCountOutputType without action
   */
  export type CategoriesCountOutputTypeCountProductArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductWhereInput
  }


  /**
   * Count Type ProductCountOutputType
   */

  export type ProductCountOutputType = {
    orderdetails: number
    reviews: number
  }

  export type ProductCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    orderdetails?: boolean | ProductCountOutputTypeCountOrderdetailsArgs
    reviews?: boolean | ProductCountOutputTypeCountReviewsArgs
  }

  // Custom InputTypes
  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductCountOutputType
     */
    select?: ProductCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeCountOrderdetailsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: orderdetailWhereInput
  }

  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeCountReviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: reviewsWhereInput
  }


  /**
   * Models
   */

  /**
   * Model orders
   */

  export type AggregateOrders = {
    _count: OrdersCountAggregateOutputType | null
    _avg: OrdersAvgAggregateOutputType | null
    _sum: OrdersSumAggregateOutputType | null
    _min: OrdersMinAggregateOutputType | null
    _max: OrdersMaxAggregateOutputType | null
  }

  export type OrdersAvgAggregateOutputType = {
    order_id: number | null
    UserID: number | null
    total_amount: Decimal | null
    shipping_price: Decimal | null
    discount_id: number | null
    original_amount: Decimal | null
    discount_amount: Decimal | null
    final_amount: Decimal | null
  }

  export type OrdersSumAggregateOutputType = {
    order_id: number | null
    UserID: number | null
    total_amount: Decimal | null
    shipping_price: Decimal | null
    discount_id: number | null
    original_amount: Decimal | null
    discount_amount: Decimal | null
    final_amount: Decimal | null
  }

  export type OrdersMinAggregateOutputType = {
    order_id: number | null
    UserID: number | null
    order_date: Date | null
    order_status: $Enums.orders_order_status | null
    total_amount: Decimal | null
    shipping_method: $Enums.shipping_shipping_status | null
    shipping_price: Decimal | null
    full_name: string | null
    shipping_address: string | null
    phone_number: string | null
    discount_id: number | null
    original_amount: Decimal | null
    discount_amount: Decimal | null
    final_amount: Decimal | null
  }

  export type OrdersMaxAggregateOutputType = {
    order_id: number | null
    UserID: number | null
    order_date: Date | null
    order_status: $Enums.orders_order_status | null
    total_amount: Decimal | null
    shipping_method: $Enums.shipping_shipping_status | null
    shipping_price: Decimal | null
    full_name: string | null
    shipping_address: string | null
    phone_number: string | null
    discount_id: number | null
    original_amount: Decimal | null
    discount_amount: Decimal | null
    final_amount: Decimal | null
  }

  export type OrdersCountAggregateOutputType = {
    order_id: number
    UserID: number
    order_date: number
    order_status: number
    total_amount: number
    shipping_method: number
    shipping_price: number
    full_name: number
    shipping_address: number
    phone_number: number
    discount_id: number
    original_amount: number
    discount_amount: number
    final_amount: number
    _all: number
  }


  export type OrdersAvgAggregateInputType = {
    order_id?: true
    UserID?: true
    total_amount?: true
    shipping_price?: true
    discount_id?: true
    original_amount?: true
    discount_amount?: true
    final_amount?: true
  }

  export type OrdersSumAggregateInputType = {
    order_id?: true
    UserID?: true
    total_amount?: true
    shipping_price?: true
    discount_id?: true
    original_amount?: true
    discount_amount?: true
    final_amount?: true
  }

  export type OrdersMinAggregateInputType = {
    order_id?: true
    UserID?: true
    order_date?: true
    order_status?: true
    total_amount?: true
    shipping_method?: true
    shipping_price?: true
    full_name?: true
    shipping_address?: true
    phone_number?: true
    discount_id?: true
    original_amount?: true
    discount_amount?: true
    final_amount?: true
  }

  export type OrdersMaxAggregateInputType = {
    order_id?: true
    UserID?: true
    order_date?: true
    order_status?: true
    total_amount?: true
    shipping_method?: true
    shipping_price?: true
    full_name?: true
    shipping_address?: true
    phone_number?: true
    discount_id?: true
    original_amount?: true
    discount_amount?: true
    final_amount?: true
  }

  export type OrdersCountAggregateInputType = {
    order_id?: true
    UserID?: true
    order_date?: true
    order_status?: true
    total_amount?: true
    shipping_method?: true
    shipping_price?: true
    full_name?: true
    shipping_address?: true
    phone_number?: true
    discount_id?: true
    original_amount?: true
    discount_amount?: true
    final_amount?: true
    _all?: true
  }

  export type OrdersAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which orders to aggregate.
     */
    where?: ordersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of orders to fetch.
     */
    orderBy?: ordersOrderByWithRelationInput | ordersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ordersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` orders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned orders
    **/
    _count?: true | OrdersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OrdersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OrdersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OrdersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OrdersMaxAggregateInputType
  }

  export type GetOrdersAggregateType<T extends OrdersAggregateArgs> = {
        [P in keyof T & keyof AggregateOrders]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOrders[P]>
      : GetScalarType<T[P], AggregateOrders[P]>
  }




  export type ordersGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ordersWhereInput
    orderBy?: ordersOrderByWithAggregationInput | ordersOrderByWithAggregationInput[]
    by: OrdersScalarFieldEnum[] | OrdersScalarFieldEnum
    having?: ordersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OrdersCountAggregateInputType | true
    _avg?: OrdersAvgAggregateInputType
    _sum?: OrdersSumAggregateInputType
    _min?: OrdersMinAggregateInputType
    _max?: OrdersMaxAggregateInputType
  }

  export type OrdersGroupByOutputType = {
    order_id: number
    UserID: number
    order_date: Date
    order_status: $Enums.orders_order_status | null
    total_amount: Decimal
    shipping_method: $Enums.shipping_shipping_status | null
    shipping_price: Decimal
    full_name: string
    shipping_address: string
    phone_number: string
    discount_id: number | null
    original_amount: Decimal | null
    discount_amount: Decimal | null
    final_amount: Decimal | null
    _count: OrdersCountAggregateOutputType | null
    _avg: OrdersAvgAggregateOutputType | null
    _sum: OrdersSumAggregateOutputType | null
    _min: OrdersMinAggregateOutputType | null
    _max: OrdersMaxAggregateOutputType | null
  }

  type GetOrdersGroupByPayload<T extends ordersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OrdersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OrdersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OrdersGroupByOutputType[P]>
            : GetScalarType<T[P], OrdersGroupByOutputType[P]>
        }
      >
    >


  export type ordersSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    order_id?: boolean
    UserID?: boolean
    order_date?: boolean
    order_status?: boolean
    total_amount?: boolean
    shipping_method?: boolean
    shipping_price?: boolean
    full_name?: boolean
    shipping_address?: boolean
    phone_number?: boolean
    discount_id?: boolean
    original_amount?: boolean
    discount_amount?: boolean
    final_amount?: boolean
    discount?: boolean | orders$discountArgs<ExtArgs>
    user?: boolean | usersDefaultArgs<ExtArgs>
    orderdetails?: boolean | orders$orderdetailsArgs<ExtArgs>
    payments?: boolean | orders$paymentsArgs<ExtArgs>
    _count?: boolean | OrdersCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["orders"]>


  export type ordersSelectScalar = {
    order_id?: boolean
    UserID?: boolean
    order_date?: boolean
    order_status?: boolean
    total_amount?: boolean
    shipping_method?: boolean
    shipping_price?: boolean
    full_name?: boolean
    shipping_address?: boolean
    phone_number?: boolean
    discount_id?: boolean
    original_amount?: boolean
    discount_amount?: boolean
    final_amount?: boolean
  }

  export type ordersInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    discount?: boolean | orders$discountArgs<ExtArgs>
    user?: boolean | usersDefaultArgs<ExtArgs>
    orderdetails?: boolean | orders$orderdetailsArgs<ExtArgs>
    payments?: boolean | orders$paymentsArgs<ExtArgs>
    _count?: boolean | OrdersCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $ordersPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "orders"
    objects: {
      discount: Prisma.$discountsPayload<ExtArgs> | null
      user: Prisma.$usersPayload<ExtArgs>
      orderdetails: Prisma.$orderdetailPayload<ExtArgs>[]
      payments: Prisma.$paymentsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      order_id: number
      UserID: number
      order_date: Date
      order_status: $Enums.orders_order_status | null
      total_amount: Prisma.Decimal
      shipping_method: $Enums.shipping_shipping_status | null
      shipping_price: Prisma.Decimal
      full_name: string
      shipping_address: string
      phone_number: string
      discount_id: number | null
      original_amount: Prisma.Decimal | null
      discount_amount: Prisma.Decimal | null
      final_amount: Prisma.Decimal | null
    }, ExtArgs["result"]["orders"]>
    composites: {}
  }

  type ordersGetPayload<S extends boolean | null | undefined | ordersDefaultArgs> = $Result.GetResult<Prisma.$ordersPayload, S>

  type ordersCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ordersFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: OrdersCountAggregateInputType | true
    }

  export interface ordersDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['orders'], meta: { name: 'orders' } }
    /**
     * Find zero or one Orders that matches the filter.
     * @param {ordersFindUniqueArgs} args - Arguments to find a Orders
     * @example
     * // Get one Orders
     * const orders = await prisma.orders.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ordersFindUniqueArgs>(args: SelectSubset<T, ordersFindUniqueArgs<ExtArgs>>): Prisma__ordersClient<$Result.GetResult<Prisma.$ordersPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Orders that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ordersFindUniqueOrThrowArgs} args - Arguments to find a Orders
     * @example
     * // Get one Orders
     * const orders = await prisma.orders.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ordersFindUniqueOrThrowArgs>(args: SelectSubset<T, ordersFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ordersClient<$Result.GetResult<Prisma.$ordersPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Orders that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ordersFindFirstArgs} args - Arguments to find a Orders
     * @example
     * // Get one Orders
     * const orders = await prisma.orders.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ordersFindFirstArgs>(args?: SelectSubset<T, ordersFindFirstArgs<ExtArgs>>): Prisma__ordersClient<$Result.GetResult<Prisma.$ordersPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Orders that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ordersFindFirstOrThrowArgs} args - Arguments to find a Orders
     * @example
     * // Get one Orders
     * const orders = await prisma.orders.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ordersFindFirstOrThrowArgs>(args?: SelectSubset<T, ordersFindFirstOrThrowArgs<ExtArgs>>): Prisma__ordersClient<$Result.GetResult<Prisma.$ordersPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Orders that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ordersFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Orders
     * const orders = await prisma.orders.findMany()
     * 
     * // Get first 10 Orders
     * const orders = await prisma.orders.findMany({ take: 10 })
     * 
     * // Only select the `order_id`
     * const ordersWithOrder_idOnly = await prisma.orders.findMany({ select: { order_id: true } })
     * 
     */
    findMany<T extends ordersFindManyArgs>(args?: SelectSubset<T, ordersFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ordersPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Orders.
     * @param {ordersCreateArgs} args - Arguments to create a Orders.
     * @example
     * // Create one Orders
     * const Orders = await prisma.orders.create({
     *   data: {
     *     // ... data to create a Orders
     *   }
     * })
     * 
     */
    create<T extends ordersCreateArgs>(args: SelectSubset<T, ordersCreateArgs<ExtArgs>>): Prisma__ordersClient<$Result.GetResult<Prisma.$ordersPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Orders.
     * @param {ordersCreateManyArgs} args - Arguments to create many Orders.
     * @example
     * // Create many Orders
     * const orders = await prisma.orders.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ordersCreateManyArgs>(args?: SelectSubset<T, ordersCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Orders.
     * @param {ordersDeleteArgs} args - Arguments to delete one Orders.
     * @example
     * // Delete one Orders
     * const Orders = await prisma.orders.delete({
     *   where: {
     *     // ... filter to delete one Orders
     *   }
     * })
     * 
     */
    delete<T extends ordersDeleteArgs>(args: SelectSubset<T, ordersDeleteArgs<ExtArgs>>): Prisma__ordersClient<$Result.GetResult<Prisma.$ordersPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Orders.
     * @param {ordersUpdateArgs} args - Arguments to update one Orders.
     * @example
     * // Update one Orders
     * const orders = await prisma.orders.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ordersUpdateArgs>(args: SelectSubset<T, ordersUpdateArgs<ExtArgs>>): Prisma__ordersClient<$Result.GetResult<Prisma.$ordersPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Orders.
     * @param {ordersDeleteManyArgs} args - Arguments to filter Orders to delete.
     * @example
     * // Delete a few Orders
     * const { count } = await prisma.orders.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ordersDeleteManyArgs>(args?: SelectSubset<T, ordersDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Orders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ordersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Orders
     * const orders = await prisma.orders.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ordersUpdateManyArgs>(args: SelectSubset<T, ordersUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Orders.
     * @param {ordersUpsertArgs} args - Arguments to update or create a Orders.
     * @example
     * // Update or create a Orders
     * const orders = await prisma.orders.upsert({
     *   create: {
     *     // ... data to create a Orders
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Orders we want to update
     *   }
     * })
     */
    upsert<T extends ordersUpsertArgs>(args: SelectSubset<T, ordersUpsertArgs<ExtArgs>>): Prisma__ordersClient<$Result.GetResult<Prisma.$ordersPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Orders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ordersCountArgs} args - Arguments to filter Orders to count.
     * @example
     * // Count the number of Orders
     * const count = await prisma.orders.count({
     *   where: {
     *     // ... the filter for the Orders we want to count
     *   }
     * })
    **/
    count<T extends ordersCountArgs>(
      args?: Subset<T, ordersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OrdersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Orders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrdersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OrdersAggregateArgs>(args: Subset<T, OrdersAggregateArgs>): Prisma.PrismaPromise<GetOrdersAggregateType<T>>

    /**
     * Group by Orders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ordersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ordersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ordersGroupByArgs['orderBy'] }
        : { orderBy?: ordersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ordersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOrdersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the orders model
   */
  readonly fields: ordersFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for orders.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ordersClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    discount<T extends orders$discountArgs<ExtArgs> = {}>(args?: Subset<T, orders$discountArgs<ExtArgs>>): Prisma__discountsClient<$Result.GetResult<Prisma.$discountsPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    user<T extends usersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, usersDefaultArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    orderdetails<T extends orders$orderdetailsArgs<ExtArgs> = {}>(args?: Subset<T, orders$orderdetailsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$orderdetailPayload<ExtArgs>, T, "findMany"> | Null>
    payments<T extends orders$paymentsArgs<ExtArgs> = {}>(args?: Subset<T, orders$paymentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$paymentsPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the orders model
   */ 
  interface ordersFieldRefs {
    readonly order_id: FieldRef<"orders", 'Int'>
    readonly UserID: FieldRef<"orders", 'Int'>
    readonly order_date: FieldRef<"orders", 'DateTime'>
    readonly order_status: FieldRef<"orders", 'orders_order_status'>
    readonly total_amount: FieldRef<"orders", 'Decimal'>
    readonly shipping_method: FieldRef<"orders", 'shipping_shipping_status'>
    readonly shipping_price: FieldRef<"orders", 'Decimal'>
    readonly full_name: FieldRef<"orders", 'String'>
    readonly shipping_address: FieldRef<"orders", 'String'>
    readonly phone_number: FieldRef<"orders", 'String'>
    readonly discount_id: FieldRef<"orders", 'Int'>
    readonly original_amount: FieldRef<"orders", 'Decimal'>
    readonly discount_amount: FieldRef<"orders", 'Decimal'>
    readonly final_amount: FieldRef<"orders", 'Decimal'>
  }
    

  // Custom InputTypes
  /**
   * orders findUnique
   */
  export type ordersFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orders
     */
    select?: ordersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ordersInclude<ExtArgs> | null
    /**
     * Filter, which orders to fetch.
     */
    where: ordersWhereUniqueInput
  }

  /**
   * orders findUniqueOrThrow
   */
  export type ordersFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orders
     */
    select?: ordersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ordersInclude<ExtArgs> | null
    /**
     * Filter, which orders to fetch.
     */
    where: ordersWhereUniqueInput
  }

  /**
   * orders findFirst
   */
  export type ordersFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orders
     */
    select?: ordersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ordersInclude<ExtArgs> | null
    /**
     * Filter, which orders to fetch.
     */
    where?: ordersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of orders to fetch.
     */
    orderBy?: ordersOrderByWithRelationInput | ordersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for orders.
     */
    cursor?: ordersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` orders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of orders.
     */
    distinct?: OrdersScalarFieldEnum | OrdersScalarFieldEnum[]
  }

  /**
   * orders findFirstOrThrow
   */
  export type ordersFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orders
     */
    select?: ordersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ordersInclude<ExtArgs> | null
    /**
     * Filter, which orders to fetch.
     */
    where?: ordersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of orders to fetch.
     */
    orderBy?: ordersOrderByWithRelationInput | ordersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for orders.
     */
    cursor?: ordersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` orders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of orders.
     */
    distinct?: OrdersScalarFieldEnum | OrdersScalarFieldEnum[]
  }

  /**
   * orders findMany
   */
  export type ordersFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orders
     */
    select?: ordersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ordersInclude<ExtArgs> | null
    /**
     * Filter, which orders to fetch.
     */
    where?: ordersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of orders to fetch.
     */
    orderBy?: ordersOrderByWithRelationInput | ordersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing orders.
     */
    cursor?: ordersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` orders.
     */
    skip?: number
    distinct?: OrdersScalarFieldEnum | OrdersScalarFieldEnum[]
  }

  /**
   * orders create
   */
  export type ordersCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orders
     */
    select?: ordersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ordersInclude<ExtArgs> | null
    /**
     * The data needed to create a orders.
     */
    data: XOR<ordersCreateInput, ordersUncheckedCreateInput>
  }

  /**
   * orders createMany
   */
  export type ordersCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many orders.
     */
    data: ordersCreateManyInput | ordersCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * orders update
   */
  export type ordersUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orders
     */
    select?: ordersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ordersInclude<ExtArgs> | null
    /**
     * The data needed to update a orders.
     */
    data: XOR<ordersUpdateInput, ordersUncheckedUpdateInput>
    /**
     * Choose, which orders to update.
     */
    where: ordersWhereUniqueInput
  }

  /**
   * orders updateMany
   */
  export type ordersUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update orders.
     */
    data: XOR<ordersUpdateManyMutationInput, ordersUncheckedUpdateManyInput>
    /**
     * Filter which orders to update
     */
    where?: ordersWhereInput
  }

  /**
   * orders upsert
   */
  export type ordersUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orders
     */
    select?: ordersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ordersInclude<ExtArgs> | null
    /**
     * The filter to search for the orders to update in case it exists.
     */
    where: ordersWhereUniqueInput
    /**
     * In case the orders found by the `where` argument doesn't exist, create a new orders with this data.
     */
    create: XOR<ordersCreateInput, ordersUncheckedCreateInput>
    /**
     * In case the orders was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ordersUpdateInput, ordersUncheckedUpdateInput>
  }

  /**
   * orders delete
   */
  export type ordersDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orders
     */
    select?: ordersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ordersInclude<ExtArgs> | null
    /**
     * Filter which orders to delete.
     */
    where: ordersWhereUniqueInput
  }

  /**
   * orders deleteMany
   */
  export type ordersDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which orders to delete
     */
    where?: ordersWhereInput
  }

  /**
   * orders.discount
   */
  export type orders$discountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the discounts
     */
    select?: discountsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: discountsInclude<ExtArgs> | null
    where?: discountsWhereInput
  }

  /**
   * orders.orderdetails
   */
  export type orders$orderdetailsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orderdetail
     */
    select?: orderdetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: orderdetailInclude<ExtArgs> | null
    where?: orderdetailWhereInput
    orderBy?: orderdetailOrderByWithRelationInput | orderdetailOrderByWithRelationInput[]
    cursor?: orderdetailWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrderdetailScalarFieldEnum | OrderdetailScalarFieldEnum[]
  }

  /**
   * orders.payments
   */
  export type orders$paymentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payments
     */
    select?: paymentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: paymentsInclude<ExtArgs> | null
    where?: paymentsWhereInput
    orderBy?: paymentsOrderByWithRelationInput | paymentsOrderByWithRelationInput[]
    cursor?: paymentsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PaymentsScalarFieldEnum | PaymentsScalarFieldEnum[]
  }

  /**
   * orders without action
   */
  export type ordersDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orders
     */
    select?: ordersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ordersInclude<ExtArgs> | null
  }


  /**
   * Model discounts
   */

  export type AggregateDiscounts = {
    _count: DiscountsCountAggregateOutputType | null
    _avg: DiscountsAvgAggregateOutputType | null
    _sum: DiscountsSumAggregateOutputType | null
    _min: DiscountsMinAggregateOutputType | null
    _max: DiscountsMaxAggregateOutputType | null
  }

  export type DiscountsAvgAggregateOutputType = {
    discount_id: number | null
    discount_amount: Decimal | null
    discount_percent: number | null
  }

  export type DiscountsSumAggregateOutputType = {
    discount_id: number | null
    discount_amount: Decimal | null
    discount_percent: number | null
  }

  export type DiscountsMinAggregateOutputType = {
    discount_id: number | null
    discount_code: string | null
    discount_amount: Decimal | null
    status: $Enums.discount_status | null
    discount_percent: number | null
    expiration_date: Date | null
  }

  export type DiscountsMaxAggregateOutputType = {
    discount_id: number | null
    discount_code: string | null
    discount_amount: Decimal | null
    status: $Enums.discount_status | null
    discount_percent: number | null
    expiration_date: Date | null
  }

  export type DiscountsCountAggregateOutputType = {
    discount_id: number
    discount_code: number
    discount_amount: number
    status: number
    discount_percent: number
    expiration_date: number
    _all: number
  }


  export type DiscountsAvgAggregateInputType = {
    discount_id?: true
    discount_amount?: true
    discount_percent?: true
  }

  export type DiscountsSumAggregateInputType = {
    discount_id?: true
    discount_amount?: true
    discount_percent?: true
  }

  export type DiscountsMinAggregateInputType = {
    discount_id?: true
    discount_code?: true
    discount_amount?: true
    status?: true
    discount_percent?: true
    expiration_date?: true
  }

  export type DiscountsMaxAggregateInputType = {
    discount_id?: true
    discount_code?: true
    discount_amount?: true
    status?: true
    discount_percent?: true
    expiration_date?: true
  }

  export type DiscountsCountAggregateInputType = {
    discount_id?: true
    discount_code?: true
    discount_amount?: true
    status?: true
    discount_percent?: true
    expiration_date?: true
    _all?: true
  }

  export type DiscountsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which discounts to aggregate.
     */
    where?: discountsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of discounts to fetch.
     */
    orderBy?: discountsOrderByWithRelationInput | discountsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: discountsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` discounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` discounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned discounts
    **/
    _count?: true | DiscountsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DiscountsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DiscountsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DiscountsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DiscountsMaxAggregateInputType
  }

  export type GetDiscountsAggregateType<T extends DiscountsAggregateArgs> = {
        [P in keyof T & keyof AggregateDiscounts]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDiscounts[P]>
      : GetScalarType<T[P], AggregateDiscounts[P]>
  }




  export type discountsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: discountsWhereInput
    orderBy?: discountsOrderByWithAggregationInput | discountsOrderByWithAggregationInput[]
    by: DiscountsScalarFieldEnum[] | DiscountsScalarFieldEnum
    having?: discountsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DiscountsCountAggregateInputType | true
    _avg?: DiscountsAvgAggregateInputType
    _sum?: DiscountsSumAggregateInputType
    _min?: DiscountsMinAggregateInputType
    _max?: DiscountsMaxAggregateInputType
  }

  export type DiscountsGroupByOutputType = {
    discount_id: number
    discount_code: string
    discount_amount: Decimal | null
    status: $Enums.discount_status
    discount_percent: number | null
    expiration_date: Date | null
    _count: DiscountsCountAggregateOutputType | null
    _avg: DiscountsAvgAggregateOutputType | null
    _sum: DiscountsSumAggregateOutputType | null
    _min: DiscountsMinAggregateOutputType | null
    _max: DiscountsMaxAggregateOutputType | null
  }

  type GetDiscountsGroupByPayload<T extends discountsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DiscountsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DiscountsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DiscountsGroupByOutputType[P]>
            : GetScalarType<T[P], DiscountsGroupByOutputType[P]>
        }
      >
    >


  export type discountsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    discount_id?: boolean
    discount_code?: boolean
    discount_amount?: boolean
    status?: boolean
    discount_percent?: boolean
    expiration_date?: boolean
    orders?: boolean | discounts$ordersArgs<ExtArgs>
    userdiscount?: boolean | discounts$userdiscountArgs<ExtArgs>
    _count?: boolean | DiscountsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["discounts"]>


  export type discountsSelectScalar = {
    discount_id?: boolean
    discount_code?: boolean
    discount_amount?: boolean
    status?: boolean
    discount_percent?: boolean
    expiration_date?: boolean
  }

  export type discountsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    orders?: boolean | discounts$ordersArgs<ExtArgs>
    userdiscount?: boolean | discounts$userdiscountArgs<ExtArgs>
    _count?: boolean | DiscountsCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $discountsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "discounts"
    objects: {
      orders: Prisma.$ordersPayload<ExtArgs>[]
      userdiscount: Prisma.$userdiscountPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      discount_id: number
      discount_code: string
      discount_amount: Prisma.Decimal | null
      status: $Enums.discount_status
      discount_percent: number | null
      expiration_date: Date | null
    }, ExtArgs["result"]["discounts"]>
    composites: {}
  }

  type discountsGetPayload<S extends boolean | null | undefined | discountsDefaultArgs> = $Result.GetResult<Prisma.$discountsPayload, S>

  type discountsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<discountsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: DiscountsCountAggregateInputType | true
    }

  export interface discountsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['discounts'], meta: { name: 'discounts' } }
    /**
     * Find zero or one Discounts that matches the filter.
     * @param {discountsFindUniqueArgs} args - Arguments to find a Discounts
     * @example
     * // Get one Discounts
     * const discounts = await prisma.discounts.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends discountsFindUniqueArgs>(args: SelectSubset<T, discountsFindUniqueArgs<ExtArgs>>): Prisma__discountsClient<$Result.GetResult<Prisma.$discountsPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Discounts that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {discountsFindUniqueOrThrowArgs} args - Arguments to find a Discounts
     * @example
     * // Get one Discounts
     * const discounts = await prisma.discounts.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends discountsFindUniqueOrThrowArgs>(args: SelectSubset<T, discountsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__discountsClient<$Result.GetResult<Prisma.$discountsPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Discounts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {discountsFindFirstArgs} args - Arguments to find a Discounts
     * @example
     * // Get one Discounts
     * const discounts = await prisma.discounts.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends discountsFindFirstArgs>(args?: SelectSubset<T, discountsFindFirstArgs<ExtArgs>>): Prisma__discountsClient<$Result.GetResult<Prisma.$discountsPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Discounts that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {discountsFindFirstOrThrowArgs} args - Arguments to find a Discounts
     * @example
     * // Get one Discounts
     * const discounts = await prisma.discounts.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends discountsFindFirstOrThrowArgs>(args?: SelectSubset<T, discountsFindFirstOrThrowArgs<ExtArgs>>): Prisma__discountsClient<$Result.GetResult<Prisma.$discountsPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Discounts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {discountsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Discounts
     * const discounts = await prisma.discounts.findMany()
     * 
     * // Get first 10 Discounts
     * const discounts = await prisma.discounts.findMany({ take: 10 })
     * 
     * // Only select the `discount_id`
     * const discountsWithDiscount_idOnly = await prisma.discounts.findMany({ select: { discount_id: true } })
     * 
     */
    findMany<T extends discountsFindManyArgs>(args?: SelectSubset<T, discountsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$discountsPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Discounts.
     * @param {discountsCreateArgs} args - Arguments to create a Discounts.
     * @example
     * // Create one Discounts
     * const Discounts = await prisma.discounts.create({
     *   data: {
     *     // ... data to create a Discounts
     *   }
     * })
     * 
     */
    create<T extends discountsCreateArgs>(args: SelectSubset<T, discountsCreateArgs<ExtArgs>>): Prisma__discountsClient<$Result.GetResult<Prisma.$discountsPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Discounts.
     * @param {discountsCreateManyArgs} args - Arguments to create many Discounts.
     * @example
     * // Create many Discounts
     * const discounts = await prisma.discounts.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends discountsCreateManyArgs>(args?: SelectSubset<T, discountsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Discounts.
     * @param {discountsDeleteArgs} args - Arguments to delete one Discounts.
     * @example
     * // Delete one Discounts
     * const Discounts = await prisma.discounts.delete({
     *   where: {
     *     // ... filter to delete one Discounts
     *   }
     * })
     * 
     */
    delete<T extends discountsDeleteArgs>(args: SelectSubset<T, discountsDeleteArgs<ExtArgs>>): Prisma__discountsClient<$Result.GetResult<Prisma.$discountsPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Discounts.
     * @param {discountsUpdateArgs} args - Arguments to update one Discounts.
     * @example
     * // Update one Discounts
     * const discounts = await prisma.discounts.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends discountsUpdateArgs>(args: SelectSubset<T, discountsUpdateArgs<ExtArgs>>): Prisma__discountsClient<$Result.GetResult<Prisma.$discountsPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Discounts.
     * @param {discountsDeleteManyArgs} args - Arguments to filter Discounts to delete.
     * @example
     * // Delete a few Discounts
     * const { count } = await prisma.discounts.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends discountsDeleteManyArgs>(args?: SelectSubset<T, discountsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Discounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {discountsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Discounts
     * const discounts = await prisma.discounts.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends discountsUpdateManyArgs>(args: SelectSubset<T, discountsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Discounts.
     * @param {discountsUpsertArgs} args - Arguments to update or create a Discounts.
     * @example
     * // Update or create a Discounts
     * const discounts = await prisma.discounts.upsert({
     *   create: {
     *     // ... data to create a Discounts
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Discounts we want to update
     *   }
     * })
     */
    upsert<T extends discountsUpsertArgs>(args: SelectSubset<T, discountsUpsertArgs<ExtArgs>>): Prisma__discountsClient<$Result.GetResult<Prisma.$discountsPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Discounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {discountsCountArgs} args - Arguments to filter Discounts to count.
     * @example
     * // Count the number of Discounts
     * const count = await prisma.discounts.count({
     *   where: {
     *     // ... the filter for the Discounts we want to count
     *   }
     * })
    **/
    count<T extends discountsCountArgs>(
      args?: Subset<T, discountsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DiscountsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Discounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DiscountsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DiscountsAggregateArgs>(args: Subset<T, DiscountsAggregateArgs>): Prisma.PrismaPromise<GetDiscountsAggregateType<T>>

    /**
     * Group by Discounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {discountsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends discountsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: discountsGroupByArgs['orderBy'] }
        : { orderBy?: discountsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, discountsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDiscountsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the discounts model
   */
  readonly fields: discountsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for discounts.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__discountsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    orders<T extends discounts$ordersArgs<ExtArgs> = {}>(args?: Subset<T, discounts$ordersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ordersPayload<ExtArgs>, T, "findMany"> | Null>
    userdiscount<T extends discounts$userdiscountArgs<ExtArgs> = {}>(args?: Subset<T, discounts$userdiscountArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$userdiscountPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the discounts model
   */ 
  interface discountsFieldRefs {
    readonly discount_id: FieldRef<"discounts", 'Int'>
    readonly discount_code: FieldRef<"discounts", 'String'>
    readonly discount_amount: FieldRef<"discounts", 'Decimal'>
    readonly status: FieldRef<"discounts", 'discount_status'>
    readonly discount_percent: FieldRef<"discounts", 'Float'>
    readonly expiration_date: FieldRef<"discounts", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * discounts findUnique
   */
  export type discountsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the discounts
     */
    select?: discountsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: discountsInclude<ExtArgs> | null
    /**
     * Filter, which discounts to fetch.
     */
    where: discountsWhereUniqueInput
  }

  /**
   * discounts findUniqueOrThrow
   */
  export type discountsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the discounts
     */
    select?: discountsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: discountsInclude<ExtArgs> | null
    /**
     * Filter, which discounts to fetch.
     */
    where: discountsWhereUniqueInput
  }

  /**
   * discounts findFirst
   */
  export type discountsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the discounts
     */
    select?: discountsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: discountsInclude<ExtArgs> | null
    /**
     * Filter, which discounts to fetch.
     */
    where?: discountsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of discounts to fetch.
     */
    orderBy?: discountsOrderByWithRelationInput | discountsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for discounts.
     */
    cursor?: discountsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` discounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` discounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of discounts.
     */
    distinct?: DiscountsScalarFieldEnum | DiscountsScalarFieldEnum[]
  }

  /**
   * discounts findFirstOrThrow
   */
  export type discountsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the discounts
     */
    select?: discountsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: discountsInclude<ExtArgs> | null
    /**
     * Filter, which discounts to fetch.
     */
    where?: discountsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of discounts to fetch.
     */
    orderBy?: discountsOrderByWithRelationInput | discountsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for discounts.
     */
    cursor?: discountsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` discounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` discounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of discounts.
     */
    distinct?: DiscountsScalarFieldEnum | DiscountsScalarFieldEnum[]
  }

  /**
   * discounts findMany
   */
  export type discountsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the discounts
     */
    select?: discountsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: discountsInclude<ExtArgs> | null
    /**
     * Filter, which discounts to fetch.
     */
    where?: discountsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of discounts to fetch.
     */
    orderBy?: discountsOrderByWithRelationInput | discountsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing discounts.
     */
    cursor?: discountsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` discounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` discounts.
     */
    skip?: number
    distinct?: DiscountsScalarFieldEnum | DiscountsScalarFieldEnum[]
  }

  /**
   * discounts create
   */
  export type discountsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the discounts
     */
    select?: discountsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: discountsInclude<ExtArgs> | null
    /**
     * The data needed to create a discounts.
     */
    data: XOR<discountsCreateInput, discountsUncheckedCreateInput>
  }

  /**
   * discounts createMany
   */
  export type discountsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many discounts.
     */
    data: discountsCreateManyInput | discountsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * discounts update
   */
  export type discountsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the discounts
     */
    select?: discountsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: discountsInclude<ExtArgs> | null
    /**
     * The data needed to update a discounts.
     */
    data: XOR<discountsUpdateInput, discountsUncheckedUpdateInput>
    /**
     * Choose, which discounts to update.
     */
    where: discountsWhereUniqueInput
  }

  /**
   * discounts updateMany
   */
  export type discountsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update discounts.
     */
    data: XOR<discountsUpdateManyMutationInput, discountsUncheckedUpdateManyInput>
    /**
     * Filter which discounts to update
     */
    where?: discountsWhereInput
  }

  /**
   * discounts upsert
   */
  export type discountsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the discounts
     */
    select?: discountsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: discountsInclude<ExtArgs> | null
    /**
     * The filter to search for the discounts to update in case it exists.
     */
    where: discountsWhereUniqueInput
    /**
     * In case the discounts found by the `where` argument doesn't exist, create a new discounts with this data.
     */
    create: XOR<discountsCreateInput, discountsUncheckedCreateInput>
    /**
     * In case the discounts was found with the provided `where` argument, update it with this data.
     */
    update: XOR<discountsUpdateInput, discountsUncheckedUpdateInput>
  }

  /**
   * discounts delete
   */
  export type discountsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the discounts
     */
    select?: discountsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: discountsInclude<ExtArgs> | null
    /**
     * Filter which discounts to delete.
     */
    where: discountsWhereUniqueInput
  }

  /**
   * discounts deleteMany
   */
  export type discountsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which discounts to delete
     */
    where?: discountsWhereInput
  }

  /**
   * discounts.orders
   */
  export type discounts$ordersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orders
     */
    select?: ordersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ordersInclude<ExtArgs> | null
    where?: ordersWhereInput
    orderBy?: ordersOrderByWithRelationInput | ordersOrderByWithRelationInput[]
    cursor?: ordersWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrdersScalarFieldEnum | OrdersScalarFieldEnum[]
  }

  /**
   * discounts.userdiscount
   */
  export type discounts$userdiscountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the userdiscount
     */
    select?: userdiscountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userdiscountInclude<ExtArgs> | null
    where?: userdiscountWhereInput
    orderBy?: userdiscountOrderByWithRelationInput | userdiscountOrderByWithRelationInput[]
    cursor?: userdiscountWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserdiscountScalarFieldEnum | UserdiscountScalarFieldEnum[]
  }

  /**
   * discounts without action
   */
  export type discountsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the discounts
     */
    select?: discountsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: discountsInclude<ExtArgs> | null
  }


  /**
   * Model userdiscount
   */

  export type AggregateUserdiscount = {
    _count: UserdiscountCountAggregateOutputType | null
    _avg: UserdiscountAvgAggregateOutputType | null
    _sum: UserdiscountSumAggregateOutputType | null
    _min: UserdiscountMinAggregateOutputType | null
    _max: UserdiscountMaxAggregateOutputType | null
  }

  export type UserdiscountAvgAggregateOutputType = {
    user_discount_id: number | null
    UserID: number | null
    discount_id: number | null
  }

  export type UserdiscountSumAggregateOutputType = {
    user_discount_id: number | null
    UserID: number | null
    discount_id: number | null
  }

  export type UserdiscountMinAggregateOutputType = {
    user_discount_id: number | null
    UserID: number | null
    discount_id: number | null
    created_at: Date | null
    status: $Enums.userdiscount_status | null
  }

  export type UserdiscountMaxAggregateOutputType = {
    user_discount_id: number | null
    UserID: number | null
    discount_id: number | null
    created_at: Date | null
    status: $Enums.userdiscount_status | null
  }

  export type UserdiscountCountAggregateOutputType = {
    user_discount_id: number
    UserID: number
    discount_id: number
    created_at: number
    status: number
    _all: number
  }


  export type UserdiscountAvgAggregateInputType = {
    user_discount_id?: true
    UserID?: true
    discount_id?: true
  }

  export type UserdiscountSumAggregateInputType = {
    user_discount_id?: true
    UserID?: true
    discount_id?: true
  }

  export type UserdiscountMinAggregateInputType = {
    user_discount_id?: true
    UserID?: true
    discount_id?: true
    created_at?: true
    status?: true
  }

  export type UserdiscountMaxAggregateInputType = {
    user_discount_id?: true
    UserID?: true
    discount_id?: true
    created_at?: true
    status?: true
  }

  export type UserdiscountCountAggregateInputType = {
    user_discount_id?: true
    UserID?: true
    discount_id?: true
    created_at?: true
    status?: true
    _all?: true
  }

  export type UserdiscountAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which userdiscount to aggregate.
     */
    where?: userdiscountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of userdiscounts to fetch.
     */
    orderBy?: userdiscountOrderByWithRelationInput | userdiscountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: userdiscountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` userdiscounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` userdiscounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned userdiscounts
    **/
    _count?: true | UserdiscountCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserdiscountAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserdiscountSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserdiscountMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserdiscountMaxAggregateInputType
  }

  export type GetUserdiscountAggregateType<T extends UserdiscountAggregateArgs> = {
        [P in keyof T & keyof AggregateUserdiscount]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserdiscount[P]>
      : GetScalarType<T[P], AggregateUserdiscount[P]>
  }




  export type userdiscountGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: userdiscountWhereInput
    orderBy?: userdiscountOrderByWithAggregationInput | userdiscountOrderByWithAggregationInput[]
    by: UserdiscountScalarFieldEnum[] | UserdiscountScalarFieldEnum
    having?: userdiscountScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserdiscountCountAggregateInputType | true
    _avg?: UserdiscountAvgAggregateInputType
    _sum?: UserdiscountSumAggregateInputType
    _min?: UserdiscountMinAggregateInputType
    _max?: UserdiscountMaxAggregateInputType
  }

  export type UserdiscountGroupByOutputType = {
    user_discount_id: number
    UserID: number
    discount_id: number
    created_at: Date
    status: $Enums.userdiscount_status
    _count: UserdiscountCountAggregateOutputType | null
    _avg: UserdiscountAvgAggregateOutputType | null
    _sum: UserdiscountSumAggregateOutputType | null
    _min: UserdiscountMinAggregateOutputType | null
    _max: UserdiscountMaxAggregateOutputType | null
  }

  type GetUserdiscountGroupByPayload<T extends userdiscountGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserdiscountGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserdiscountGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserdiscountGroupByOutputType[P]>
            : GetScalarType<T[P], UserdiscountGroupByOutputType[P]>
        }
      >
    >


  export type userdiscountSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    user_discount_id?: boolean
    UserID?: boolean
    discount_id?: boolean
    created_at?: boolean
    status?: boolean
    user?: boolean | usersDefaultArgs<ExtArgs>
    discount?: boolean | discountsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userdiscount"]>


  export type userdiscountSelectScalar = {
    user_discount_id?: boolean
    UserID?: boolean
    discount_id?: boolean
    created_at?: boolean
    status?: boolean
  }

  export type userdiscountInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | usersDefaultArgs<ExtArgs>
    discount?: boolean | discountsDefaultArgs<ExtArgs>
  }

  export type $userdiscountPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "userdiscount"
    objects: {
      user: Prisma.$usersPayload<ExtArgs>
      discount: Prisma.$discountsPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      user_discount_id: number
      UserID: number
      discount_id: number
      created_at: Date
      status: $Enums.userdiscount_status
    }, ExtArgs["result"]["userdiscount"]>
    composites: {}
  }

  type userdiscountGetPayload<S extends boolean | null | undefined | userdiscountDefaultArgs> = $Result.GetResult<Prisma.$userdiscountPayload, S>

  type userdiscountCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<userdiscountFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserdiscountCountAggregateInputType | true
    }

  export interface userdiscountDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['userdiscount'], meta: { name: 'userdiscount' } }
    /**
     * Find zero or one Userdiscount that matches the filter.
     * @param {userdiscountFindUniqueArgs} args - Arguments to find a Userdiscount
     * @example
     * // Get one Userdiscount
     * const userdiscount = await prisma.userdiscount.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends userdiscountFindUniqueArgs>(args: SelectSubset<T, userdiscountFindUniqueArgs<ExtArgs>>): Prisma__userdiscountClient<$Result.GetResult<Prisma.$userdiscountPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Userdiscount that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {userdiscountFindUniqueOrThrowArgs} args - Arguments to find a Userdiscount
     * @example
     * // Get one Userdiscount
     * const userdiscount = await prisma.userdiscount.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends userdiscountFindUniqueOrThrowArgs>(args: SelectSubset<T, userdiscountFindUniqueOrThrowArgs<ExtArgs>>): Prisma__userdiscountClient<$Result.GetResult<Prisma.$userdiscountPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Userdiscount that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userdiscountFindFirstArgs} args - Arguments to find a Userdiscount
     * @example
     * // Get one Userdiscount
     * const userdiscount = await prisma.userdiscount.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends userdiscountFindFirstArgs>(args?: SelectSubset<T, userdiscountFindFirstArgs<ExtArgs>>): Prisma__userdiscountClient<$Result.GetResult<Prisma.$userdiscountPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Userdiscount that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userdiscountFindFirstOrThrowArgs} args - Arguments to find a Userdiscount
     * @example
     * // Get one Userdiscount
     * const userdiscount = await prisma.userdiscount.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends userdiscountFindFirstOrThrowArgs>(args?: SelectSubset<T, userdiscountFindFirstOrThrowArgs<ExtArgs>>): Prisma__userdiscountClient<$Result.GetResult<Prisma.$userdiscountPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Userdiscounts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userdiscountFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Userdiscounts
     * const userdiscounts = await prisma.userdiscount.findMany()
     * 
     * // Get first 10 Userdiscounts
     * const userdiscounts = await prisma.userdiscount.findMany({ take: 10 })
     * 
     * // Only select the `user_discount_id`
     * const userdiscountWithUser_discount_idOnly = await prisma.userdiscount.findMany({ select: { user_discount_id: true } })
     * 
     */
    findMany<T extends userdiscountFindManyArgs>(args?: SelectSubset<T, userdiscountFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$userdiscountPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Userdiscount.
     * @param {userdiscountCreateArgs} args - Arguments to create a Userdiscount.
     * @example
     * // Create one Userdiscount
     * const Userdiscount = await prisma.userdiscount.create({
     *   data: {
     *     // ... data to create a Userdiscount
     *   }
     * })
     * 
     */
    create<T extends userdiscountCreateArgs>(args: SelectSubset<T, userdiscountCreateArgs<ExtArgs>>): Prisma__userdiscountClient<$Result.GetResult<Prisma.$userdiscountPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Userdiscounts.
     * @param {userdiscountCreateManyArgs} args - Arguments to create many Userdiscounts.
     * @example
     * // Create many Userdiscounts
     * const userdiscount = await prisma.userdiscount.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends userdiscountCreateManyArgs>(args?: SelectSubset<T, userdiscountCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Userdiscount.
     * @param {userdiscountDeleteArgs} args - Arguments to delete one Userdiscount.
     * @example
     * // Delete one Userdiscount
     * const Userdiscount = await prisma.userdiscount.delete({
     *   where: {
     *     // ... filter to delete one Userdiscount
     *   }
     * })
     * 
     */
    delete<T extends userdiscountDeleteArgs>(args: SelectSubset<T, userdiscountDeleteArgs<ExtArgs>>): Prisma__userdiscountClient<$Result.GetResult<Prisma.$userdiscountPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Userdiscount.
     * @param {userdiscountUpdateArgs} args - Arguments to update one Userdiscount.
     * @example
     * // Update one Userdiscount
     * const userdiscount = await prisma.userdiscount.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends userdiscountUpdateArgs>(args: SelectSubset<T, userdiscountUpdateArgs<ExtArgs>>): Prisma__userdiscountClient<$Result.GetResult<Prisma.$userdiscountPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Userdiscounts.
     * @param {userdiscountDeleteManyArgs} args - Arguments to filter Userdiscounts to delete.
     * @example
     * // Delete a few Userdiscounts
     * const { count } = await prisma.userdiscount.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends userdiscountDeleteManyArgs>(args?: SelectSubset<T, userdiscountDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Userdiscounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userdiscountUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Userdiscounts
     * const userdiscount = await prisma.userdiscount.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends userdiscountUpdateManyArgs>(args: SelectSubset<T, userdiscountUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Userdiscount.
     * @param {userdiscountUpsertArgs} args - Arguments to update or create a Userdiscount.
     * @example
     * // Update or create a Userdiscount
     * const userdiscount = await prisma.userdiscount.upsert({
     *   create: {
     *     // ... data to create a Userdiscount
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Userdiscount we want to update
     *   }
     * })
     */
    upsert<T extends userdiscountUpsertArgs>(args: SelectSubset<T, userdiscountUpsertArgs<ExtArgs>>): Prisma__userdiscountClient<$Result.GetResult<Prisma.$userdiscountPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Userdiscounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userdiscountCountArgs} args - Arguments to filter Userdiscounts to count.
     * @example
     * // Count the number of Userdiscounts
     * const count = await prisma.userdiscount.count({
     *   where: {
     *     // ... the filter for the Userdiscounts we want to count
     *   }
     * })
    **/
    count<T extends userdiscountCountArgs>(
      args?: Subset<T, userdiscountCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserdiscountCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Userdiscount.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserdiscountAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserdiscountAggregateArgs>(args: Subset<T, UserdiscountAggregateArgs>): Prisma.PrismaPromise<GetUserdiscountAggregateType<T>>

    /**
     * Group by Userdiscount.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userdiscountGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends userdiscountGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: userdiscountGroupByArgs['orderBy'] }
        : { orderBy?: userdiscountGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, userdiscountGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserdiscountGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the userdiscount model
   */
  readonly fields: userdiscountFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for userdiscount.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__userdiscountClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends usersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, usersDefaultArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    discount<T extends discountsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, discountsDefaultArgs<ExtArgs>>): Prisma__discountsClient<$Result.GetResult<Prisma.$discountsPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the userdiscount model
   */ 
  interface userdiscountFieldRefs {
    readonly user_discount_id: FieldRef<"userdiscount", 'Int'>
    readonly UserID: FieldRef<"userdiscount", 'Int'>
    readonly discount_id: FieldRef<"userdiscount", 'Int'>
    readonly created_at: FieldRef<"userdiscount", 'DateTime'>
    readonly status: FieldRef<"userdiscount", 'userdiscount_status'>
  }
    

  // Custom InputTypes
  /**
   * userdiscount findUnique
   */
  export type userdiscountFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the userdiscount
     */
    select?: userdiscountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userdiscountInclude<ExtArgs> | null
    /**
     * Filter, which userdiscount to fetch.
     */
    where: userdiscountWhereUniqueInput
  }

  /**
   * userdiscount findUniqueOrThrow
   */
  export type userdiscountFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the userdiscount
     */
    select?: userdiscountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userdiscountInclude<ExtArgs> | null
    /**
     * Filter, which userdiscount to fetch.
     */
    where: userdiscountWhereUniqueInput
  }

  /**
   * userdiscount findFirst
   */
  export type userdiscountFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the userdiscount
     */
    select?: userdiscountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userdiscountInclude<ExtArgs> | null
    /**
     * Filter, which userdiscount to fetch.
     */
    where?: userdiscountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of userdiscounts to fetch.
     */
    orderBy?: userdiscountOrderByWithRelationInput | userdiscountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for userdiscounts.
     */
    cursor?: userdiscountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` userdiscounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` userdiscounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of userdiscounts.
     */
    distinct?: UserdiscountScalarFieldEnum | UserdiscountScalarFieldEnum[]
  }

  /**
   * userdiscount findFirstOrThrow
   */
  export type userdiscountFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the userdiscount
     */
    select?: userdiscountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userdiscountInclude<ExtArgs> | null
    /**
     * Filter, which userdiscount to fetch.
     */
    where?: userdiscountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of userdiscounts to fetch.
     */
    orderBy?: userdiscountOrderByWithRelationInput | userdiscountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for userdiscounts.
     */
    cursor?: userdiscountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` userdiscounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` userdiscounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of userdiscounts.
     */
    distinct?: UserdiscountScalarFieldEnum | UserdiscountScalarFieldEnum[]
  }

  /**
   * userdiscount findMany
   */
  export type userdiscountFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the userdiscount
     */
    select?: userdiscountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userdiscountInclude<ExtArgs> | null
    /**
     * Filter, which userdiscounts to fetch.
     */
    where?: userdiscountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of userdiscounts to fetch.
     */
    orderBy?: userdiscountOrderByWithRelationInput | userdiscountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing userdiscounts.
     */
    cursor?: userdiscountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` userdiscounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` userdiscounts.
     */
    skip?: number
    distinct?: UserdiscountScalarFieldEnum | UserdiscountScalarFieldEnum[]
  }

  /**
   * userdiscount create
   */
  export type userdiscountCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the userdiscount
     */
    select?: userdiscountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userdiscountInclude<ExtArgs> | null
    /**
     * The data needed to create a userdiscount.
     */
    data: XOR<userdiscountCreateInput, userdiscountUncheckedCreateInput>
  }

  /**
   * userdiscount createMany
   */
  export type userdiscountCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many userdiscounts.
     */
    data: userdiscountCreateManyInput | userdiscountCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * userdiscount update
   */
  export type userdiscountUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the userdiscount
     */
    select?: userdiscountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userdiscountInclude<ExtArgs> | null
    /**
     * The data needed to update a userdiscount.
     */
    data: XOR<userdiscountUpdateInput, userdiscountUncheckedUpdateInput>
    /**
     * Choose, which userdiscount to update.
     */
    where: userdiscountWhereUniqueInput
  }

  /**
   * userdiscount updateMany
   */
  export type userdiscountUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update userdiscounts.
     */
    data: XOR<userdiscountUpdateManyMutationInput, userdiscountUncheckedUpdateManyInput>
    /**
     * Filter which userdiscounts to update
     */
    where?: userdiscountWhereInput
  }

  /**
   * userdiscount upsert
   */
  export type userdiscountUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the userdiscount
     */
    select?: userdiscountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userdiscountInclude<ExtArgs> | null
    /**
     * The filter to search for the userdiscount to update in case it exists.
     */
    where: userdiscountWhereUniqueInput
    /**
     * In case the userdiscount found by the `where` argument doesn't exist, create a new userdiscount with this data.
     */
    create: XOR<userdiscountCreateInput, userdiscountUncheckedCreateInput>
    /**
     * In case the userdiscount was found with the provided `where` argument, update it with this data.
     */
    update: XOR<userdiscountUpdateInput, userdiscountUncheckedUpdateInput>
  }

  /**
   * userdiscount delete
   */
  export type userdiscountDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the userdiscount
     */
    select?: userdiscountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userdiscountInclude<ExtArgs> | null
    /**
     * Filter which userdiscount to delete.
     */
    where: userdiscountWhereUniqueInput
  }

  /**
   * userdiscount deleteMany
   */
  export type userdiscountDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which userdiscounts to delete
     */
    where?: userdiscountWhereInput
  }

  /**
   * userdiscount without action
   */
  export type userdiscountDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the userdiscount
     */
    select?: userdiscountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userdiscountInclude<ExtArgs> | null
  }


  /**
   * Model orderdetail
   */

  export type AggregateOrderdetail = {
    _count: OrderdetailCountAggregateOutputType | null
    _avg: OrderdetailAvgAggregateOutputType | null
    _sum: OrderdetailSumAggregateOutputType | null
    _min: OrderdetailMinAggregateOutputType | null
    _max: OrderdetailMaxAggregateOutputType | null
  }

  export type OrderdetailAvgAggregateOutputType = {
    order_id: number | null
    product_id: number | null
    quantity: number | null
    unit_price: Decimal | null
  }

  export type OrderdetailSumAggregateOutputType = {
    order_id: number | null
    product_id: number | null
    quantity: number | null
    unit_price: Decimal | null
  }

  export type OrderdetailMinAggregateOutputType = {
    order_id: number | null
    product_id: number | null
    quantity: number | null
    unit_price: Decimal | null
  }

  export type OrderdetailMaxAggregateOutputType = {
    order_id: number | null
    product_id: number | null
    quantity: number | null
    unit_price: Decimal | null
  }

  export type OrderdetailCountAggregateOutputType = {
    order_id: number
    product_id: number
    quantity: number
    unit_price: number
    _all: number
  }


  export type OrderdetailAvgAggregateInputType = {
    order_id?: true
    product_id?: true
    quantity?: true
    unit_price?: true
  }

  export type OrderdetailSumAggregateInputType = {
    order_id?: true
    product_id?: true
    quantity?: true
    unit_price?: true
  }

  export type OrderdetailMinAggregateInputType = {
    order_id?: true
    product_id?: true
    quantity?: true
    unit_price?: true
  }

  export type OrderdetailMaxAggregateInputType = {
    order_id?: true
    product_id?: true
    quantity?: true
    unit_price?: true
  }

  export type OrderdetailCountAggregateInputType = {
    order_id?: true
    product_id?: true
    quantity?: true
    unit_price?: true
    _all?: true
  }

  export type OrderdetailAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which orderdetail to aggregate.
     */
    where?: orderdetailWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of orderdetails to fetch.
     */
    orderBy?: orderdetailOrderByWithRelationInput | orderdetailOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: orderdetailWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` orderdetails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` orderdetails.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned orderdetails
    **/
    _count?: true | OrderdetailCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OrderdetailAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OrderdetailSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OrderdetailMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OrderdetailMaxAggregateInputType
  }

  export type GetOrderdetailAggregateType<T extends OrderdetailAggregateArgs> = {
        [P in keyof T & keyof AggregateOrderdetail]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOrderdetail[P]>
      : GetScalarType<T[P], AggregateOrderdetail[P]>
  }




  export type orderdetailGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: orderdetailWhereInput
    orderBy?: orderdetailOrderByWithAggregationInput | orderdetailOrderByWithAggregationInput[]
    by: OrderdetailScalarFieldEnum[] | OrderdetailScalarFieldEnum
    having?: orderdetailScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OrderdetailCountAggregateInputType | true
    _avg?: OrderdetailAvgAggregateInputType
    _sum?: OrderdetailSumAggregateInputType
    _min?: OrderdetailMinAggregateInputType
    _max?: OrderdetailMaxAggregateInputType
  }

  export type OrderdetailGroupByOutputType = {
    order_id: number
    product_id: number
    quantity: number
    unit_price: Decimal
    _count: OrderdetailCountAggregateOutputType | null
    _avg: OrderdetailAvgAggregateOutputType | null
    _sum: OrderdetailSumAggregateOutputType | null
    _min: OrderdetailMinAggregateOutputType | null
    _max: OrderdetailMaxAggregateOutputType | null
  }

  type GetOrderdetailGroupByPayload<T extends orderdetailGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OrderdetailGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OrderdetailGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OrderdetailGroupByOutputType[P]>
            : GetScalarType<T[P], OrderdetailGroupByOutputType[P]>
        }
      >
    >


  export type orderdetailSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    order_id?: boolean
    product_id?: boolean
    quantity?: boolean
    unit_price?: boolean
    orders?: boolean | ordersDefaultArgs<ExtArgs>
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["orderdetail"]>


  export type orderdetailSelectScalar = {
    order_id?: boolean
    product_id?: boolean
    quantity?: boolean
    unit_price?: boolean
  }

  export type orderdetailInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    orders?: boolean | ordersDefaultArgs<ExtArgs>
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }

  export type $orderdetailPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "orderdetail"
    objects: {
      orders: Prisma.$ordersPayload<ExtArgs>
      product: Prisma.$ProductPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      order_id: number
      product_id: number
      quantity: number
      unit_price: Prisma.Decimal
    }, ExtArgs["result"]["orderdetail"]>
    composites: {}
  }

  type orderdetailGetPayload<S extends boolean | null | undefined | orderdetailDefaultArgs> = $Result.GetResult<Prisma.$orderdetailPayload, S>

  type orderdetailCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<orderdetailFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: OrderdetailCountAggregateInputType | true
    }

  export interface orderdetailDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['orderdetail'], meta: { name: 'orderdetail' } }
    /**
     * Find zero or one Orderdetail that matches the filter.
     * @param {orderdetailFindUniqueArgs} args - Arguments to find a Orderdetail
     * @example
     * // Get one Orderdetail
     * const orderdetail = await prisma.orderdetail.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends orderdetailFindUniqueArgs>(args: SelectSubset<T, orderdetailFindUniqueArgs<ExtArgs>>): Prisma__orderdetailClient<$Result.GetResult<Prisma.$orderdetailPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Orderdetail that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {orderdetailFindUniqueOrThrowArgs} args - Arguments to find a Orderdetail
     * @example
     * // Get one Orderdetail
     * const orderdetail = await prisma.orderdetail.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends orderdetailFindUniqueOrThrowArgs>(args: SelectSubset<T, orderdetailFindUniqueOrThrowArgs<ExtArgs>>): Prisma__orderdetailClient<$Result.GetResult<Prisma.$orderdetailPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Orderdetail that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {orderdetailFindFirstArgs} args - Arguments to find a Orderdetail
     * @example
     * // Get one Orderdetail
     * const orderdetail = await prisma.orderdetail.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends orderdetailFindFirstArgs>(args?: SelectSubset<T, orderdetailFindFirstArgs<ExtArgs>>): Prisma__orderdetailClient<$Result.GetResult<Prisma.$orderdetailPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Orderdetail that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {orderdetailFindFirstOrThrowArgs} args - Arguments to find a Orderdetail
     * @example
     * // Get one Orderdetail
     * const orderdetail = await prisma.orderdetail.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends orderdetailFindFirstOrThrowArgs>(args?: SelectSubset<T, orderdetailFindFirstOrThrowArgs<ExtArgs>>): Prisma__orderdetailClient<$Result.GetResult<Prisma.$orderdetailPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Orderdetails that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {orderdetailFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Orderdetails
     * const orderdetails = await prisma.orderdetail.findMany()
     * 
     * // Get first 10 Orderdetails
     * const orderdetails = await prisma.orderdetail.findMany({ take: 10 })
     * 
     * // Only select the `order_id`
     * const orderdetailWithOrder_idOnly = await prisma.orderdetail.findMany({ select: { order_id: true } })
     * 
     */
    findMany<T extends orderdetailFindManyArgs>(args?: SelectSubset<T, orderdetailFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$orderdetailPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Orderdetail.
     * @param {orderdetailCreateArgs} args - Arguments to create a Orderdetail.
     * @example
     * // Create one Orderdetail
     * const Orderdetail = await prisma.orderdetail.create({
     *   data: {
     *     // ... data to create a Orderdetail
     *   }
     * })
     * 
     */
    create<T extends orderdetailCreateArgs>(args: SelectSubset<T, orderdetailCreateArgs<ExtArgs>>): Prisma__orderdetailClient<$Result.GetResult<Prisma.$orderdetailPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Orderdetails.
     * @param {orderdetailCreateManyArgs} args - Arguments to create many Orderdetails.
     * @example
     * // Create many Orderdetails
     * const orderdetail = await prisma.orderdetail.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends orderdetailCreateManyArgs>(args?: SelectSubset<T, orderdetailCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Orderdetail.
     * @param {orderdetailDeleteArgs} args - Arguments to delete one Orderdetail.
     * @example
     * // Delete one Orderdetail
     * const Orderdetail = await prisma.orderdetail.delete({
     *   where: {
     *     // ... filter to delete one Orderdetail
     *   }
     * })
     * 
     */
    delete<T extends orderdetailDeleteArgs>(args: SelectSubset<T, orderdetailDeleteArgs<ExtArgs>>): Prisma__orderdetailClient<$Result.GetResult<Prisma.$orderdetailPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Orderdetail.
     * @param {orderdetailUpdateArgs} args - Arguments to update one Orderdetail.
     * @example
     * // Update one Orderdetail
     * const orderdetail = await prisma.orderdetail.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends orderdetailUpdateArgs>(args: SelectSubset<T, orderdetailUpdateArgs<ExtArgs>>): Prisma__orderdetailClient<$Result.GetResult<Prisma.$orderdetailPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Orderdetails.
     * @param {orderdetailDeleteManyArgs} args - Arguments to filter Orderdetails to delete.
     * @example
     * // Delete a few Orderdetails
     * const { count } = await prisma.orderdetail.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends orderdetailDeleteManyArgs>(args?: SelectSubset<T, orderdetailDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Orderdetails.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {orderdetailUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Orderdetails
     * const orderdetail = await prisma.orderdetail.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends orderdetailUpdateManyArgs>(args: SelectSubset<T, orderdetailUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Orderdetail.
     * @param {orderdetailUpsertArgs} args - Arguments to update or create a Orderdetail.
     * @example
     * // Update or create a Orderdetail
     * const orderdetail = await prisma.orderdetail.upsert({
     *   create: {
     *     // ... data to create a Orderdetail
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Orderdetail we want to update
     *   }
     * })
     */
    upsert<T extends orderdetailUpsertArgs>(args: SelectSubset<T, orderdetailUpsertArgs<ExtArgs>>): Prisma__orderdetailClient<$Result.GetResult<Prisma.$orderdetailPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Orderdetails.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {orderdetailCountArgs} args - Arguments to filter Orderdetails to count.
     * @example
     * // Count the number of Orderdetails
     * const count = await prisma.orderdetail.count({
     *   where: {
     *     // ... the filter for the Orderdetails we want to count
     *   }
     * })
    **/
    count<T extends orderdetailCountArgs>(
      args?: Subset<T, orderdetailCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OrderdetailCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Orderdetail.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderdetailAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OrderdetailAggregateArgs>(args: Subset<T, OrderdetailAggregateArgs>): Prisma.PrismaPromise<GetOrderdetailAggregateType<T>>

    /**
     * Group by Orderdetail.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {orderdetailGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends orderdetailGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: orderdetailGroupByArgs['orderBy'] }
        : { orderBy?: orderdetailGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, orderdetailGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOrderdetailGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the orderdetail model
   */
  readonly fields: orderdetailFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for orderdetail.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__orderdetailClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    orders<T extends ordersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ordersDefaultArgs<ExtArgs>>): Prisma__ordersClient<$Result.GetResult<Prisma.$ordersPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    product<T extends ProductDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProductDefaultArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the orderdetail model
   */ 
  interface orderdetailFieldRefs {
    readonly order_id: FieldRef<"orderdetail", 'Int'>
    readonly product_id: FieldRef<"orderdetail", 'Int'>
    readonly quantity: FieldRef<"orderdetail", 'Int'>
    readonly unit_price: FieldRef<"orderdetail", 'Decimal'>
  }
    

  // Custom InputTypes
  /**
   * orderdetail findUnique
   */
  export type orderdetailFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orderdetail
     */
    select?: orderdetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: orderdetailInclude<ExtArgs> | null
    /**
     * Filter, which orderdetail to fetch.
     */
    where: orderdetailWhereUniqueInput
  }

  /**
   * orderdetail findUniqueOrThrow
   */
  export type orderdetailFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orderdetail
     */
    select?: orderdetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: orderdetailInclude<ExtArgs> | null
    /**
     * Filter, which orderdetail to fetch.
     */
    where: orderdetailWhereUniqueInput
  }

  /**
   * orderdetail findFirst
   */
  export type orderdetailFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orderdetail
     */
    select?: orderdetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: orderdetailInclude<ExtArgs> | null
    /**
     * Filter, which orderdetail to fetch.
     */
    where?: orderdetailWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of orderdetails to fetch.
     */
    orderBy?: orderdetailOrderByWithRelationInput | orderdetailOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for orderdetails.
     */
    cursor?: orderdetailWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` orderdetails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` orderdetails.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of orderdetails.
     */
    distinct?: OrderdetailScalarFieldEnum | OrderdetailScalarFieldEnum[]
  }

  /**
   * orderdetail findFirstOrThrow
   */
  export type orderdetailFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orderdetail
     */
    select?: orderdetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: orderdetailInclude<ExtArgs> | null
    /**
     * Filter, which orderdetail to fetch.
     */
    where?: orderdetailWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of orderdetails to fetch.
     */
    orderBy?: orderdetailOrderByWithRelationInput | orderdetailOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for orderdetails.
     */
    cursor?: orderdetailWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` orderdetails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` orderdetails.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of orderdetails.
     */
    distinct?: OrderdetailScalarFieldEnum | OrderdetailScalarFieldEnum[]
  }

  /**
   * orderdetail findMany
   */
  export type orderdetailFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orderdetail
     */
    select?: orderdetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: orderdetailInclude<ExtArgs> | null
    /**
     * Filter, which orderdetails to fetch.
     */
    where?: orderdetailWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of orderdetails to fetch.
     */
    orderBy?: orderdetailOrderByWithRelationInput | orderdetailOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing orderdetails.
     */
    cursor?: orderdetailWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` orderdetails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` orderdetails.
     */
    skip?: number
    distinct?: OrderdetailScalarFieldEnum | OrderdetailScalarFieldEnum[]
  }

  /**
   * orderdetail create
   */
  export type orderdetailCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orderdetail
     */
    select?: orderdetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: orderdetailInclude<ExtArgs> | null
    /**
     * The data needed to create a orderdetail.
     */
    data: XOR<orderdetailCreateInput, orderdetailUncheckedCreateInput>
  }

  /**
   * orderdetail createMany
   */
  export type orderdetailCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many orderdetails.
     */
    data: orderdetailCreateManyInput | orderdetailCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * orderdetail update
   */
  export type orderdetailUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orderdetail
     */
    select?: orderdetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: orderdetailInclude<ExtArgs> | null
    /**
     * The data needed to update a orderdetail.
     */
    data: XOR<orderdetailUpdateInput, orderdetailUncheckedUpdateInput>
    /**
     * Choose, which orderdetail to update.
     */
    where: orderdetailWhereUniqueInput
  }

  /**
   * orderdetail updateMany
   */
  export type orderdetailUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update orderdetails.
     */
    data: XOR<orderdetailUpdateManyMutationInput, orderdetailUncheckedUpdateManyInput>
    /**
     * Filter which orderdetails to update
     */
    where?: orderdetailWhereInput
  }

  /**
   * orderdetail upsert
   */
  export type orderdetailUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orderdetail
     */
    select?: orderdetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: orderdetailInclude<ExtArgs> | null
    /**
     * The filter to search for the orderdetail to update in case it exists.
     */
    where: orderdetailWhereUniqueInput
    /**
     * In case the orderdetail found by the `where` argument doesn't exist, create a new orderdetail with this data.
     */
    create: XOR<orderdetailCreateInput, orderdetailUncheckedCreateInput>
    /**
     * In case the orderdetail was found with the provided `where` argument, update it with this data.
     */
    update: XOR<orderdetailUpdateInput, orderdetailUncheckedUpdateInput>
  }

  /**
   * orderdetail delete
   */
  export type orderdetailDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orderdetail
     */
    select?: orderdetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: orderdetailInclude<ExtArgs> | null
    /**
     * Filter which orderdetail to delete.
     */
    where: orderdetailWhereUniqueInput
  }

  /**
   * orderdetail deleteMany
   */
  export type orderdetailDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which orderdetails to delete
     */
    where?: orderdetailWhereInput
  }

  /**
   * orderdetail without action
   */
  export type orderdetailDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orderdetail
     */
    select?: orderdetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: orderdetailInclude<ExtArgs> | null
  }


  /**
   * Model payments
   */

  export type AggregatePayments = {
    _count: PaymentsCountAggregateOutputType | null
    _avg: PaymentsAvgAggregateOutputType | null
    _sum: PaymentsSumAggregateOutputType | null
    _min: PaymentsMinAggregateOutputType | null
    _max: PaymentsMaxAggregateOutputType | null
  }

  export type PaymentsAvgAggregateOutputType = {
    payment_id: number | null
    order_id: number | null
    amount: Decimal | null
  }

  export type PaymentsSumAggregateOutputType = {
    payment_id: number | null
    order_id: number | null
    amount: Decimal | null
  }

  export type PaymentsMinAggregateOutputType = {
    payment_id: number | null
    order_id: number | null
    payment_method: string | null
    payment_date: Date | null
    amount: Decimal | null
    remark: string | null
    payment_status: $Enums.payments_payment_status | null
    payment_Image: string | null
  }

  export type PaymentsMaxAggregateOutputType = {
    payment_id: number | null
    order_id: number | null
    payment_method: string | null
    payment_date: Date | null
    amount: Decimal | null
    remark: string | null
    payment_status: $Enums.payments_payment_status | null
    payment_Image: string | null
  }

  export type PaymentsCountAggregateOutputType = {
    payment_id: number
    order_id: number
    payment_method: number
    payment_date: number
    amount: number
    remark: number
    payment_status: number
    payment_Image: number
    _all: number
  }


  export type PaymentsAvgAggregateInputType = {
    payment_id?: true
    order_id?: true
    amount?: true
  }

  export type PaymentsSumAggregateInputType = {
    payment_id?: true
    order_id?: true
    amount?: true
  }

  export type PaymentsMinAggregateInputType = {
    payment_id?: true
    order_id?: true
    payment_method?: true
    payment_date?: true
    amount?: true
    remark?: true
    payment_status?: true
    payment_Image?: true
  }

  export type PaymentsMaxAggregateInputType = {
    payment_id?: true
    order_id?: true
    payment_method?: true
    payment_date?: true
    amount?: true
    remark?: true
    payment_status?: true
    payment_Image?: true
  }

  export type PaymentsCountAggregateInputType = {
    payment_id?: true
    order_id?: true
    payment_method?: true
    payment_date?: true
    amount?: true
    remark?: true
    payment_status?: true
    payment_Image?: true
    _all?: true
  }

  export type PaymentsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which payments to aggregate.
     */
    where?: paymentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of payments to fetch.
     */
    orderBy?: paymentsOrderByWithRelationInput | paymentsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: paymentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` payments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` payments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned payments
    **/
    _count?: true | PaymentsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PaymentsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PaymentsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PaymentsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PaymentsMaxAggregateInputType
  }

  export type GetPaymentsAggregateType<T extends PaymentsAggregateArgs> = {
        [P in keyof T & keyof AggregatePayments]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePayments[P]>
      : GetScalarType<T[P], AggregatePayments[P]>
  }




  export type paymentsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: paymentsWhereInput
    orderBy?: paymentsOrderByWithAggregationInput | paymentsOrderByWithAggregationInput[]
    by: PaymentsScalarFieldEnum[] | PaymentsScalarFieldEnum
    having?: paymentsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PaymentsCountAggregateInputType | true
    _avg?: PaymentsAvgAggregateInputType
    _sum?: PaymentsSumAggregateInputType
    _min?: PaymentsMinAggregateInputType
    _max?: PaymentsMaxAggregateInputType
  }

  export type PaymentsGroupByOutputType = {
    payment_id: number
    order_id: number
    payment_method: string | null
    payment_date: Date | null
    amount: Decimal
    remark: string | null
    payment_status: $Enums.payments_payment_status | null
    payment_Image: string | null
    _count: PaymentsCountAggregateOutputType | null
    _avg: PaymentsAvgAggregateOutputType | null
    _sum: PaymentsSumAggregateOutputType | null
    _min: PaymentsMinAggregateOutputType | null
    _max: PaymentsMaxAggregateOutputType | null
  }

  type GetPaymentsGroupByPayload<T extends paymentsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PaymentsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PaymentsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PaymentsGroupByOutputType[P]>
            : GetScalarType<T[P], PaymentsGroupByOutputType[P]>
        }
      >
    >


  export type paymentsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    payment_id?: boolean
    order_id?: boolean
    payment_method?: boolean
    payment_date?: boolean
    amount?: boolean
    remark?: boolean
    payment_status?: boolean
    payment_Image?: boolean
    orders?: boolean | ordersDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["payments"]>


  export type paymentsSelectScalar = {
    payment_id?: boolean
    order_id?: boolean
    payment_method?: boolean
    payment_date?: boolean
    amount?: boolean
    remark?: boolean
    payment_status?: boolean
    payment_Image?: boolean
  }

  export type paymentsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    orders?: boolean | ordersDefaultArgs<ExtArgs>
  }

  export type $paymentsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "payments"
    objects: {
      orders: Prisma.$ordersPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      payment_id: number
      order_id: number
      payment_method: string | null
      payment_date: Date | null
      amount: Prisma.Decimal
      remark: string | null
      payment_status: $Enums.payments_payment_status | null
      payment_Image: string | null
    }, ExtArgs["result"]["payments"]>
    composites: {}
  }

  type paymentsGetPayload<S extends boolean | null | undefined | paymentsDefaultArgs> = $Result.GetResult<Prisma.$paymentsPayload, S>

  type paymentsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<paymentsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PaymentsCountAggregateInputType | true
    }

  export interface paymentsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['payments'], meta: { name: 'payments' } }
    /**
     * Find zero or one Payments that matches the filter.
     * @param {paymentsFindUniqueArgs} args - Arguments to find a Payments
     * @example
     * // Get one Payments
     * const payments = await prisma.payments.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends paymentsFindUniqueArgs>(args: SelectSubset<T, paymentsFindUniqueArgs<ExtArgs>>): Prisma__paymentsClient<$Result.GetResult<Prisma.$paymentsPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Payments that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {paymentsFindUniqueOrThrowArgs} args - Arguments to find a Payments
     * @example
     * // Get one Payments
     * const payments = await prisma.payments.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends paymentsFindUniqueOrThrowArgs>(args: SelectSubset<T, paymentsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__paymentsClient<$Result.GetResult<Prisma.$paymentsPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Payments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {paymentsFindFirstArgs} args - Arguments to find a Payments
     * @example
     * // Get one Payments
     * const payments = await prisma.payments.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends paymentsFindFirstArgs>(args?: SelectSubset<T, paymentsFindFirstArgs<ExtArgs>>): Prisma__paymentsClient<$Result.GetResult<Prisma.$paymentsPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Payments that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {paymentsFindFirstOrThrowArgs} args - Arguments to find a Payments
     * @example
     * // Get one Payments
     * const payments = await prisma.payments.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends paymentsFindFirstOrThrowArgs>(args?: SelectSubset<T, paymentsFindFirstOrThrowArgs<ExtArgs>>): Prisma__paymentsClient<$Result.GetResult<Prisma.$paymentsPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Payments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {paymentsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Payments
     * const payments = await prisma.payments.findMany()
     * 
     * // Get first 10 Payments
     * const payments = await prisma.payments.findMany({ take: 10 })
     * 
     * // Only select the `payment_id`
     * const paymentsWithPayment_idOnly = await prisma.payments.findMany({ select: { payment_id: true } })
     * 
     */
    findMany<T extends paymentsFindManyArgs>(args?: SelectSubset<T, paymentsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$paymentsPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Payments.
     * @param {paymentsCreateArgs} args - Arguments to create a Payments.
     * @example
     * // Create one Payments
     * const Payments = await prisma.payments.create({
     *   data: {
     *     // ... data to create a Payments
     *   }
     * })
     * 
     */
    create<T extends paymentsCreateArgs>(args: SelectSubset<T, paymentsCreateArgs<ExtArgs>>): Prisma__paymentsClient<$Result.GetResult<Prisma.$paymentsPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Payments.
     * @param {paymentsCreateManyArgs} args - Arguments to create many Payments.
     * @example
     * // Create many Payments
     * const payments = await prisma.payments.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends paymentsCreateManyArgs>(args?: SelectSubset<T, paymentsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Payments.
     * @param {paymentsDeleteArgs} args - Arguments to delete one Payments.
     * @example
     * // Delete one Payments
     * const Payments = await prisma.payments.delete({
     *   where: {
     *     // ... filter to delete one Payments
     *   }
     * })
     * 
     */
    delete<T extends paymentsDeleteArgs>(args: SelectSubset<T, paymentsDeleteArgs<ExtArgs>>): Prisma__paymentsClient<$Result.GetResult<Prisma.$paymentsPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Payments.
     * @param {paymentsUpdateArgs} args - Arguments to update one Payments.
     * @example
     * // Update one Payments
     * const payments = await prisma.payments.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends paymentsUpdateArgs>(args: SelectSubset<T, paymentsUpdateArgs<ExtArgs>>): Prisma__paymentsClient<$Result.GetResult<Prisma.$paymentsPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Payments.
     * @param {paymentsDeleteManyArgs} args - Arguments to filter Payments to delete.
     * @example
     * // Delete a few Payments
     * const { count } = await prisma.payments.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends paymentsDeleteManyArgs>(args?: SelectSubset<T, paymentsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Payments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {paymentsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Payments
     * const payments = await prisma.payments.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends paymentsUpdateManyArgs>(args: SelectSubset<T, paymentsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Payments.
     * @param {paymentsUpsertArgs} args - Arguments to update or create a Payments.
     * @example
     * // Update or create a Payments
     * const payments = await prisma.payments.upsert({
     *   create: {
     *     // ... data to create a Payments
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Payments we want to update
     *   }
     * })
     */
    upsert<T extends paymentsUpsertArgs>(args: SelectSubset<T, paymentsUpsertArgs<ExtArgs>>): Prisma__paymentsClient<$Result.GetResult<Prisma.$paymentsPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Payments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {paymentsCountArgs} args - Arguments to filter Payments to count.
     * @example
     * // Count the number of Payments
     * const count = await prisma.payments.count({
     *   where: {
     *     // ... the filter for the Payments we want to count
     *   }
     * })
    **/
    count<T extends paymentsCountArgs>(
      args?: Subset<T, paymentsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PaymentsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Payments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PaymentsAggregateArgs>(args: Subset<T, PaymentsAggregateArgs>): Prisma.PrismaPromise<GetPaymentsAggregateType<T>>

    /**
     * Group by Payments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {paymentsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends paymentsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: paymentsGroupByArgs['orderBy'] }
        : { orderBy?: paymentsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, paymentsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPaymentsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the payments model
   */
  readonly fields: paymentsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for payments.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__paymentsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    orders<T extends ordersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ordersDefaultArgs<ExtArgs>>): Prisma__ordersClient<$Result.GetResult<Prisma.$ordersPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the payments model
   */ 
  interface paymentsFieldRefs {
    readonly payment_id: FieldRef<"payments", 'Int'>
    readonly order_id: FieldRef<"payments", 'Int'>
    readonly payment_method: FieldRef<"payments", 'String'>
    readonly payment_date: FieldRef<"payments", 'DateTime'>
    readonly amount: FieldRef<"payments", 'Decimal'>
    readonly remark: FieldRef<"payments", 'String'>
    readonly payment_status: FieldRef<"payments", 'payments_payment_status'>
    readonly payment_Image: FieldRef<"payments", 'String'>
  }
    

  // Custom InputTypes
  /**
   * payments findUnique
   */
  export type paymentsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payments
     */
    select?: paymentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: paymentsInclude<ExtArgs> | null
    /**
     * Filter, which payments to fetch.
     */
    where: paymentsWhereUniqueInput
  }

  /**
   * payments findUniqueOrThrow
   */
  export type paymentsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payments
     */
    select?: paymentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: paymentsInclude<ExtArgs> | null
    /**
     * Filter, which payments to fetch.
     */
    where: paymentsWhereUniqueInput
  }

  /**
   * payments findFirst
   */
  export type paymentsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payments
     */
    select?: paymentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: paymentsInclude<ExtArgs> | null
    /**
     * Filter, which payments to fetch.
     */
    where?: paymentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of payments to fetch.
     */
    orderBy?: paymentsOrderByWithRelationInput | paymentsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for payments.
     */
    cursor?: paymentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` payments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` payments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of payments.
     */
    distinct?: PaymentsScalarFieldEnum | PaymentsScalarFieldEnum[]
  }

  /**
   * payments findFirstOrThrow
   */
  export type paymentsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payments
     */
    select?: paymentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: paymentsInclude<ExtArgs> | null
    /**
     * Filter, which payments to fetch.
     */
    where?: paymentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of payments to fetch.
     */
    orderBy?: paymentsOrderByWithRelationInput | paymentsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for payments.
     */
    cursor?: paymentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` payments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` payments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of payments.
     */
    distinct?: PaymentsScalarFieldEnum | PaymentsScalarFieldEnum[]
  }

  /**
   * payments findMany
   */
  export type paymentsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payments
     */
    select?: paymentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: paymentsInclude<ExtArgs> | null
    /**
     * Filter, which payments to fetch.
     */
    where?: paymentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of payments to fetch.
     */
    orderBy?: paymentsOrderByWithRelationInput | paymentsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing payments.
     */
    cursor?: paymentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` payments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` payments.
     */
    skip?: number
    distinct?: PaymentsScalarFieldEnum | PaymentsScalarFieldEnum[]
  }

  /**
   * payments create
   */
  export type paymentsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payments
     */
    select?: paymentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: paymentsInclude<ExtArgs> | null
    /**
     * The data needed to create a payments.
     */
    data: XOR<paymentsCreateInput, paymentsUncheckedCreateInput>
  }

  /**
   * payments createMany
   */
  export type paymentsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many payments.
     */
    data: paymentsCreateManyInput | paymentsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * payments update
   */
  export type paymentsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payments
     */
    select?: paymentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: paymentsInclude<ExtArgs> | null
    /**
     * The data needed to update a payments.
     */
    data: XOR<paymentsUpdateInput, paymentsUncheckedUpdateInput>
    /**
     * Choose, which payments to update.
     */
    where: paymentsWhereUniqueInput
  }

  /**
   * payments updateMany
   */
  export type paymentsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update payments.
     */
    data: XOR<paymentsUpdateManyMutationInput, paymentsUncheckedUpdateManyInput>
    /**
     * Filter which payments to update
     */
    where?: paymentsWhereInput
  }

  /**
   * payments upsert
   */
  export type paymentsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payments
     */
    select?: paymentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: paymentsInclude<ExtArgs> | null
    /**
     * The filter to search for the payments to update in case it exists.
     */
    where: paymentsWhereUniqueInput
    /**
     * In case the payments found by the `where` argument doesn't exist, create a new payments with this data.
     */
    create: XOR<paymentsCreateInput, paymentsUncheckedCreateInput>
    /**
     * In case the payments was found with the provided `where` argument, update it with this data.
     */
    update: XOR<paymentsUpdateInput, paymentsUncheckedUpdateInput>
  }

  /**
   * payments delete
   */
  export type paymentsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payments
     */
    select?: paymentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: paymentsInclude<ExtArgs> | null
    /**
     * Filter which payments to delete.
     */
    where: paymentsWhereUniqueInput
  }

  /**
   * payments deleteMany
   */
  export type paymentsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which payments to delete
     */
    where?: paymentsWhereInput
  }

  /**
   * payments without action
   */
  export type paymentsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payments
     */
    select?: paymentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: paymentsInclude<ExtArgs> | null
  }


  /**
   * Model users
   */

  export type AggregateUsers = {
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  export type UsersAvgAggregateOutputType = {
    UserID: number | null
  }

  export type UsersSumAggregateOutputType = {
    UserID: number | null
  }

  export type UsersMinAggregateOutputType = {
    UserName: string | null
    UserID: number | null
    Password: string | null
    Status: string | null
    Role: string | null
    resetToken: string | null
    resetTokenExpiry: Date | null
  }

  export type UsersMaxAggregateOutputType = {
    UserName: string | null
    UserID: number | null
    Password: string | null
    Status: string | null
    Role: string | null
    resetToken: string | null
    resetTokenExpiry: Date | null
  }

  export type UsersCountAggregateOutputType = {
    UserName: number
    UserID: number
    Password: number
    Status: number
    Role: number
    resetToken: number
    resetTokenExpiry: number
    _all: number
  }


  export type UsersAvgAggregateInputType = {
    UserID?: true
  }

  export type UsersSumAggregateInputType = {
    UserID?: true
  }

  export type UsersMinAggregateInputType = {
    UserName?: true
    UserID?: true
    Password?: true
    Status?: true
    Role?: true
    resetToken?: true
    resetTokenExpiry?: true
  }

  export type UsersMaxAggregateInputType = {
    UserName?: true
    UserID?: true
    Password?: true
    Status?: true
    Role?: true
    resetToken?: true
    resetTokenExpiry?: true
  }

  export type UsersCountAggregateInputType = {
    UserName?: true
    UserID?: true
    Password?: true
    Status?: true
    Role?: true
    resetToken?: true
    resetTokenExpiry?: true
    _all?: true
  }

  export type UsersAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which users to aggregate.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned users
    **/
    _count?: true | UsersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsersMaxAggregateInputType
  }

  export type GetUsersAggregateType<T extends UsersAggregateArgs> = {
        [P in keyof T & keyof AggregateUsers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsers[P]>
      : GetScalarType<T[P], AggregateUsers[P]>
  }




  export type usersGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: usersWhereInput
    orderBy?: usersOrderByWithAggregationInput | usersOrderByWithAggregationInput[]
    by: UsersScalarFieldEnum[] | UsersScalarFieldEnum
    having?: usersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsersCountAggregateInputType | true
    _avg?: UsersAvgAggregateInputType
    _sum?: UsersSumAggregateInputType
    _min?: UsersMinAggregateInputType
    _max?: UsersMaxAggregateInputType
  }

  export type UsersGroupByOutputType = {
    UserName: string
    UserID: number
    Password: string
    Status: string | null
    Role: string | null
    resetToken: string | null
    resetTokenExpiry: Date | null
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  type GetUsersGroupByPayload<T extends usersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UsersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsersGroupByOutputType[P]>
            : GetScalarType<T[P], UsersGroupByOutputType[P]>
        }
      >
    >


  export type usersSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    UserName?: boolean
    UserID?: boolean
    Password?: boolean
    Status?: boolean
    Role?: boolean
    resetToken?: boolean
    resetTokenExpiry?: boolean
    orders?: boolean | users$ordersArgs<ExtArgs>
    reviews?: boolean | users$reviewsArgs<ExtArgs>
    userdiscount?: boolean | users$userdiscountArgs<ExtArgs>
    healthInfo?: boolean | users$healthInfoArgs<ExtArgs>
    _count?: boolean | UsersCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["users"]>


  export type usersSelectScalar = {
    UserName?: boolean
    UserID?: boolean
    Password?: boolean
    Status?: boolean
    Role?: boolean
    resetToken?: boolean
    resetTokenExpiry?: boolean
  }

  export type usersInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    orders?: boolean | users$ordersArgs<ExtArgs>
    reviews?: boolean | users$reviewsArgs<ExtArgs>
    userdiscount?: boolean | users$userdiscountArgs<ExtArgs>
    healthInfo?: boolean | users$healthInfoArgs<ExtArgs>
    _count?: boolean | UsersCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $usersPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "users"
    objects: {
      orders: Prisma.$ordersPayload<ExtArgs>[]
      reviews: Prisma.$reviewsPayload<ExtArgs>[]
      userdiscount: Prisma.$userdiscountPayload<ExtArgs>[]
      healthInfo: Prisma.$health_infoPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      UserName: string
      UserID: number
      Password: string
      Status: string | null
      Role: string | null
      resetToken: string | null
      resetTokenExpiry: Date | null
    }, ExtArgs["result"]["users"]>
    composites: {}
  }

  type usersGetPayload<S extends boolean | null | undefined | usersDefaultArgs> = $Result.GetResult<Prisma.$usersPayload, S>

  type usersCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<usersFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UsersCountAggregateInputType | true
    }

  export interface usersDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['users'], meta: { name: 'users' } }
    /**
     * Find zero or one Users that matches the filter.
     * @param {usersFindUniqueArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends usersFindUniqueArgs>(args: SelectSubset<T, usersFindUniqueArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Users that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {usersFindUniqueOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends usersFindUniqueOrThrowArgs>(args: SelectSubset<T, usersFindUniqueOrThrowArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindFirstArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends usersFindFirstArgs>(args?: SelectSubset<T, usersFindFirstArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Users that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindFirstOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends usersFindFirstOrThrowArgs>(args?: SelectSubset<T, usersFindFirstOrThrowArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.users.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.users.findMany({ take: 10 })
     * 
     * // Only select the `UserName`
     * const usersWithUserNameOnly = await prisma.users.findMany({ select: { UserName: true } })
     * 
     */
    findMany<T extends usersFindManyArgs>(args?: SelectSubset<T, usersFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Users.
     * @param {usersCreateArgs} args - Arguments to create a Users.
     * @example
     * // Create one Users
     * const Users = await prisma.users.create({
     *   data: {
     *     // ... data to create a Users
     *   }
     * })
     * 
     */
    create<T extends usersCreateArgs>(args: SelectSubset<T, usersCreateArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {usersCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const users = await prisma.users.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends usersCreateManyArgs>(args?: SelectSubset<T, usersCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Users.
     * @param {usersDeleteArgs} args - Arguments to delete one Users.
     * @example
     * // Delete one Users
     * const Users = await prisma.users.delete({
     *   where: {
     *     // ... filter to delete one Users
     *   }
     * })
     * 
     */
    delete<T extends usersDeleteArgs>(args: SelectSubset<T, usersDeleteArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Users.
     * @param {usersUpdateArgs} args - Arguments to update one Users.
     * @example
     * // Update one Users
     * const users = await prisma.users.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends usersUpdateArgs>(args: SelectSubset<T, usersUpdateArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {usersDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.users.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends usersDeleteManyArgs>(args?: SelectSubset<T, usersDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const users = await prisma.users.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends usersUpdateManyArgs>(args: SelectSubset<T, usersUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Users.
     * @param {usersUpsertArgs} args - Arguments to update or create a Users.
     * @example
     * // Update or create a Users
     * const users = await prisma.users.upsert({
     *   create: {
     *     // ... data to create a Users
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Users we want to update
     *   }
     * })
     */
    upsert<T extends usersUpsertArgs>(args: SelectSubset<T, usersUpsertArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.users.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends usersCountArgs>(
      args?: Subset<T, usersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsersAggregateArgs>(args: Subset<T, UsersAggregateArgs>): Prisma.PrismaPromise<GetUsersAggregateType<T>>

    /**
     * Group by Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends usersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: usersGroupByArgs['orderBy'] }
        : { orderBy?: usersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, usersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the users model
   */
  readonly fields: usersFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for users.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__usersClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    orders<T extends users$ordersArgs<ExtArgs> = {}>(args?: Subset<T, users$ordersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ordersPayload<ExtArgs>, T, "findMany"> | Null>
    reviews<T extends users$reviewsArgs<ExtArgs> = {}>(args?: Subset<T, users$reviewsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$reviewsPayload<ExtArgs>, T, "findMany"> | Null>
    userdiscount<T extends users$userdiscountArgs<ExtArgs> = {}>(args?: Subset<T, users$userdiscountArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$userdiscountPayload<ExtArgs>, T, "findMany"> | Null>
    healthInfo<T extends users$healthInfoArgs<ExtArgs> = {}>(args?: Subset<T, users$healthInfoArgs<ExtArgs>>): Prisma__health_infoClient<$Result.GetResult<Prisma.$health_infoPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the users model
   */ 
  interface usersFieldRefs {
    readonly UserName: FieldRef<"users", 'String'>
    readonly UserID: FieldRef<"users", 'Int'>
    readonly Password: FieldRef<"users", 'String'>
    readonly Status: FieldRef<"users", 'String'>
    readonly Role: FieldRef<"users", 'String'>
    readonly resetToken: FieldRef<"users", 'String'>
    readonly resetTokenExpiry: FieldRef<"users", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * users findUnique
   */
  export type usersFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where: usersWhereUniqueInput
  }

  /**
   * users findUniqueOrThrow
   */
  export type usersFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where: usersWhereUniqueInput
  }

  /**
   * users findFirst
   */
  export type usersFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * users findFirstOrThrow
   */
  export type usersFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * users findMany
   */
  export type usersFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing users.
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * users create
   */
  export type usersCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * The data needed to create a users.
     */
    data: XOR<usersCreateInput, usersUncheckedCreateInput>
  }

  /**
   * users createMany
   */
  export type usersCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many users.
     */
    data: usersCreateManyInput | usersCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * users update
   */
  export type usersUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * The data needed to update a users.
     */
    data: XOR<usersUpdateInput, usersUncheckedUpdateInput>
    /**
     * Choose, which users to update.
     */
    where: usersWhereUniqueInput
  }

  /**
   * users updateMany
   */
  export type usersUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update users.
     */
    data: XOR<usersUpdateManyMutationInput, usersUncheckedUpdateManyInput>
    /**
     * Filter which users to update
     */
    where?: usersWhereInput
  }

  /**
   * users upsert
   */
  export type usersUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * The filter to search for the users to update in case it exists.
     */
    where: usersWhereUniqueInput
    /**
     * In case the users found by the `where` argument doesn't exist, create a new users with this data.
     */
    create: XOR<usersCreateInput, usersUncheckedCreateInput>
    /**
     * In case the users was found with the provided `where` argument, update it with this data.
     */
    update: XOR<usersUpdateInput, usersUncheckedUpdateInput>
  }

  /**
   * users delete
   */
  export type usersDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter which users to delete.
     */
    where: usersWhereUniqueInput
  }

  /**
   * users deleteMany
   */
  export type usersDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which users to delete
     */
    where?: usersWhereInput
  }

  /**
   * users.orders
   */
  export type users$ordersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orders
     */
    select?: ordersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ordersInclude<ExtArgs> | null
    where?: ordersWhereInput
    orderBy?: ordersOrderByWithRelationInput | ordersOrderByWithRelationInput[]
    cursor?: ordersWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrdersScalarFieldEnum | OrdersScalarFieldEnum[]
  }

  /**
   * users.reviews
   */
  export type users$reviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the reviews
     */
    select?: reviewsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reviewsInclude<ExtArgs> | null
    where?: reviewsWhereInput
    orderBy?: reviewsOrderByWithRelationInput | reviewsOrderByWithRelationInput[]
    cursor?: reviewsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReviewsScalarFieldEnum | ReviewsScalarFieldEnum[]
  }

  /**
   * users.userdiscount
   */
  export type users$userdiscountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the userdiscount
     */
    select?: userdiscountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userdiscountInclude<ExtArgs> | null
    where?: userdiscountWhereInput
    orderBy?: userdiscountOrderByWithRelationInput | userdiscountOrderByWithRelationInput[]
    cursor?: userdiscountWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserdiscountScalarFieldEnum | UserdiscountScalarFieldEnum[]
  }

  /**
   * users.healthInfo
   */
  export type users$healthInfoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the health_info
     */
    select?: health_infoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: health_infoInclude<ExtArgs> | null
    where?: health_infoWhereInput
  }

  /**
   * users without action
   */
  export type usersDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
  }


  /**
   * Model categories
   */

  export type AggregateCategories = {
    _count: CategoriesCountAggregateOutputType | null
    _avg: CategoriesAvgAggregateOutputType | null
    _sum: CategoriesSumAggregateOutputType | null
    _min: CategoriesMinAggregateOutputType | null
    _max: CategoriesMaxAggregateOutputType | null
  }

  export type CategoriesAvgAggregateOutputType = {
    CategoriesID: number | null
  }

  export type CategoriesSumAggregateOutputType = {
    CategoriesID: number | null
  }

  export type CategoriesMinAggregateOutputType = {
    CategoriesID: number | null
    CategoriesName: string | null
  }

  export type CategoriesMaxAggregateOutputType = {
    CategoriesID: number | null
    CategoriesName: string | null
  }

  export type CategoriesCountAggregateOutputType = {
    CategoriesID: number
    CategoriesName: number
    _all: number
  }


  export type CategoriesAvgAggregateInputType = {
    CategoriesID?: true
  }

  export type CategoriesSumAggregateInputType = {
    CategoriesID?: true
  }

  export type CategoriesMinAggregateInputType = {
    CategoriesID?: true
    CategoriesName?: true
  }

  export type CategoriesMaxAggregateInputType = {
    CategoriesID?: true
    CategoriesName?: true
  }

  export type CategoriesCountAggregateInputType = {
    CategoriesID?: true
    CategoriesName?: true
    _all?: true
  }

  export type CategoriesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which categories to aggregate.
     */
    where?: categoriesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of categories to fetch.
     */
    orderBy?: categoriesOrderByWithRelationInput | categoriesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: categoriesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned categories
    **/
    _count?: true | CategoriesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CategoriesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CategoriesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CategoriesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CategoriesMaxAggregateInputType
  }

  export type GetCategoriesAggregateType<T extends CategoriesAggregateArgs> = {
        [P in keyof T & keyof AggregateCategories]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCategories[P]>
      : GetScalarType<T[P], AggregateCategories[P]>
  }




  export type categoriesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: categoriesWhereInput
    orderBy?: categoriesOrderByWithAggregationInput | categoriesOrderByWithAggregationInput[]
    by: CategoriesScalarFieldEnum[] | CategoriesScalarFieldEnum
    having?: categoriesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CategoriesCountAggregateInputType | true
    _avg?: CategoriesAvgAggregateInputType
    _sum?: CategoriesSumAggregateInputType
    _min?: CategoriesMinAggregateInputType
    _max?: CategoriesMaxAggregateInputType
  }

  export type CategoriesGroupByOutputType = {
    CategoriesID: number
    CategoriesName: string | null
    _count: CategoriesCountAggregateOutputType | null
    _avg: CategoriesAvgAggregateOutputType | null
    _sum: CategoriesSumAggregateOutputType | null
    _min: CategoriesMinAggregateOutputType | null
    _max: CategoriesMaxAggregateOutputType | null
  }

  type GetCategoriesGroupByPayload<T extends categoriesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CategoriesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CategoriesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CategoriesGroupByOutputType[P]>
            : GetScalarType<T[P], CategoriesGroupByOutputType[P]>
        }
      >
    >


  export type categoriesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    CategoriesID?: boolean
    CategoriesName?: boolean
    Product?: boolean | categories$ProductArgs<ExtArgs>
    _count?: boolean | CategoriesCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["categories"]>


  export type categoriesSelectScalar = {
    CategoriesID?: boolean
    CategoriesName?: boolean
  }

  export type categoriesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Product?: boolean | categories$ProductArgs<ExtArgs>
    _count?: boolean | CategoriesCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $categoriesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "categories"
    objects: {
      Product: Prisma.$ProductPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      CategoriesID: number
      CategoriesName: string | null
    }, ExtArgs["result"]["categories"]>
    composites: {}
  }

  type categoriesGetPayload<S extends boolean | null | undefined | categoriesDefaultArgs> = $Result.GetResult<Prisma.$categoriesPayload, S>

  type categoriesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<categoriesFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CategoriesCountAggregateInputType | true
    }

  export interface categoriesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['categories'], meta: { name: 'categories' } }
    /**
     * Find zero or one Categories that matches the filter.
     * @param {categoriesFindUniqueArgs} args - Arguments to find a Categories
     * @example
     * // Get one Categories
     * const categories = await prisma.categories.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends categoriesFindUniqueArgs>(args: SelectSubset<T, categoriesFindUniqueArgs<ExtArgs>>): Prisma__categoriesClient<$Result.GetResult<Prisma.$categoriesPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Categories that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {categoriesFindUniqueOrThrowArgs} args - Arguments to find a Categories
     * @example
     * // Get one Categories
     * const categories = await prisma.categories.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends categoriesFindUniqueOrThrowArgs>(args: SelectSubset<T, categoriesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__categoriesClient<$Result.GetResult<Prisma.$categoriesPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Categories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoriesFindFirstArgs} args - Arguments to find a Categories
     * @example
     * // Get one Categories
     * const categories = await prisma.categories.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends categoriesFindFirstArgs>(args?: SelectSubset<T, categoriesFindFirstArgs<ExtArgs>>): Prisma__categoriesClient<$Result.GetResult<Prisma.$categoriesPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Categories that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoriesFindFirstOrThrowArgs} args - Arguments to find a Categories
     * @example
     * // Get one Categories
     * const categories = await prisma.categories.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends categoriesFindFirstOrThrowArgs>(args?: SelectSubset<T, categoriesFindFirstOrThrowArgs<ExtArgs>>): Prisma__categoriesClient<$Result.GetResult<Prisma.$categoriesPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Categories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoriesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Categories
     * const categories = await prisma.categories.findMany()
     * 
     * // Get first 10 Categories
     * const categories = await prisma.categories.findMany({ take: 10 })
     * 
     * // Only select the `CategoriesID`
     * const categoriesWithCategoriesIDOnly = await prisma.categories.findMany({ select: { CategoriesID: true } })
     * 
     */
    findMany<T extends categoriesFindManyArgs>(args?: SelectSubset<T, categoriesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$categoriesPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Categories.
     * @param {categoriesCreateArgs} args - Arguments to create a Categories.
     * @example
     * // Create one Categories
     * const Categories = await prisma.categories.create({
     *   data: {
     *     // ... data to create a Categories
     *   }
     * })
     * 
     */
    create<T extends categoriesCreateArgs>(args: SelectSubset<T, categoriesCreateArgs<ExtArgs>>): Prisma__categoriesClient<$Result.GetResult<Prisma.$categoriesPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Categories.
     * @param {categoriesCreateManyArgs} args - Arguments to create many Categories.
     * @example
     * // Create many Categories
     * const categories = await prisma.categories.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends categoriesCreateManyArgs>(args?: SelectSubset<T, categoriesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Categories.
     * @param {categoriesDeleteArgs} args - Arguments to delete one Categories.
     * @example
     * // Delete one Categories
     * const Categories = await prisma.categories.delete({
     *   where: {
     *     // ... filter to delete one Categories
     *   }
     * })
     * 
     */
    delete<T extends categoriesDeleteArgs>(args: SelectSubset<T, categoriesDeleteArgs<ExtArgs>>): Prisma__categoriesClient<$Result.GetResult<Prisma.$categoriesPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Categories.
     * @param {categoriesUpdateArgs} args - Arguments to update one Categories.
     * @example
     * // Update one Categories
     * const categories = await prisma.categories.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends categoriesUpdateArgs>(args: SelectSubset<T, categoriesUpdateArgs<ExtArgs>>): Prisma__categoriesClient<$Result.GetResult<Prisma.$categoriesPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Categories.
     * @param {categoriesDeleteManyArgs} args - Arguments to filter Categories to delete.
     * @example
     * // Delete a few Categories
     * const { count } = await prisma.categories.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends categoriesDeleteManyArgs>(args?: SelectSubset<T, categoriesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoriesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Categories
     * const categories = await prisma.categories.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends categoriesUpdateManyArgs>(args: SelectSubset<T, categoriesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Categories.
     * @param {categoriesUpsertArgs} args - Arguments to update or create a Categories.
     * @example
     * // Update or create a Categories
     * const categories = await prisma.categories.upsert({
     *   create: {
     *     // ... data to create a Categories
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Categories we want to update
     *   }
     * })
     */
    upsert<T extends categoriesUpsertArgs>(args: SelectSubset<T, categoriesUpsertArgs<ExtArgs>>): Prisma__categoriesClient<$Result.GetResult<Prisma.$categoriesPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoriesCountArgs} args - Arguments to filter Categories to count.
     * @example
     * // Count the number of Categories
     * const count = await prisma.categories.count({
     *   where: {
     *     // ... the filter for the Categories we want to count
     *   }
     * })
    **/
    count<T extends categoriesCountArgs>(
      args?: Subset<T, categoriesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CategoriesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CategoriesAggregateArgs>(args: Subset<T, CategoriesAggregateArgs>): Prisma.PrismaPromise<GetCategoriesAggregateType<T>>

    /**
     * Group by Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoriesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends categoriesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: categoriesGroupByArgs['orderBy'] }
        : { orderBy?: categoriesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, categoriesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCategoriesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the categories model
   */
  readonly fields: categoriesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for categories.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__categoriesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Product<T extends categories$ProductArgs<ExtArgs> = {}>(args?: Subset<T, categories$ProductArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the categories model
   */ 
  interface categoriesFieldRefs {
    readonly CategoriesID: FieldRef<"categories", 'Int'>
    readonly CategoriesName: FieldRef<"categories", 'String'>
  }
    

  // Custom InputTypes
  /**
   * categories findUnique
   */
  export type categoriesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categories
     */
    select?: categoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: categoriesInclude<ExtArgs> | null
    /**
     * Filter, which categories to fetch.
     */
    where: categoriesWhereUniqueInput
  }

  /**
   * categories findUniqueOrThrow
   */
  export type categoriesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categories
     */
    select?: categoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: categoriesInclude<ExtArgs> | null
    /**
     * Filter, which categories to fetch.
     */
    where: categoriesWhereUniqueInput
  }

  /**
   * categories findFirst
   */
  export type categoriesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categories
     */
    select?: categoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: categoriesInclude<ExtArgs> | null
    /**
     * Filter, which categories to fetch.
     */
    where?: categoriesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of categories to fetch.
     */
    orderBy?: categoriesOrderByWithRelationInput | categoriesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for categories.
     */
    cursor?: categoriesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of categories.
     */
    distinct?: CategoriesScalarFieldEnum | CategoriesScalarFieldEnum[]
  }

  /**
   * categories findFirstOrThrow
   */
  export type categoriesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categories
     */
    select?: categoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: categoriesInclude<ExtArgs> | null
    /**
     * Filter, which categories to fetch.
     */
    where?: categoriesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of categories to fetch.
     */
    orderBy?: categoriesOrderByWithRelationInput | categoriesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for categories.
     */
    cursor?: categoriesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of categories.
     */
    distinct?: CategoriesScalarFieldEnum | CategoriesScalarFieldEnum[]
  }

  /**
   * categories findMany
   */
  export type categoriesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categories
     */
    select?: categoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: categoriesInclude<ExtArgs> | null
    /**
     * Filter, which categories to fetch.
     */
    where?: categoriesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of categories to fetch.
     */
    orderBy?: categoriesOrderByWithRelationInput | categoriesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing categories.
     */
    cursor?: categoriesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` categories.
     */
    skip?: number
    distinct?: CategoriesScalarFieldEnum | CategoriesScalarFieldEnum[]
  }

  /**
   * categories create
   */
  export type categoriesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categories
     */
    select?: categoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: categoriesInclude<ExtArgs> | null
    /**
     * The data needed to create a categories.
     */
    data?: XOR<categoriesCreateInput, categoriesUncheckedCreateInput>
  }

  /**
   * categories createMany
   */
  export type categoriesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many categories.
     */
    data: categoriesCreateManyInput | categoriesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * categories update
   */
  export type categoriesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categories
     */
    select?: categoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: categoriesInclude<ExtArgs> | null
    /**
     * The data needed to update a categories.
     */
    data: XOR<categoriesUpdateInput, categoriesUncheckedUpdateInput>
    /**
     * Choose, which categories to update.
     */
    where: categoriesWhereUniqueInput
  }

  /**
   * categories updateMany
   */
  export type categoriesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update categories.
     */
    data: XOR<categoriesUpdateManyMutationInput, categoriesUncheckedUpdateManyInput>
    /**
     * Filter which categories to update
     */
    where?: categoriesWhereInput
  }

  /**
   * categories upsert
   */
  export type categoriesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categories
     */
    select?: categoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: categoriesInclude<ExtArgs> | null
    /**
     * The filter to search for the categories to update in case it exists.
     */
    where: categoriesWhereUniqueInput
    /**
     * In case the categories found by the `where` argument doesn't exist, create a new categories with this data.
     */
    create: XOR<categoriesCreateInput, categoriesUncheckedCreateInput>
    /**
     * In case the categories was found with the provided `where` argument, update it with this data.
     */
    update: XOR<categoriesUpdateInput, categoriesUncheckedUpdateInput>
  }

  /**
   * categories delete
   */
  export type categoriesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categories
     */
    select?: categoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: categoriesInclude<ExtArgs> | null
    /**
     * Filter which categories to delete.
     */
    where: categoriesWhereUniqueInput
  }

  /**
   * categories deleteMany
   */
  export type categoriesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which categories to delete
     */
    where?: categoriesWhereInput
  }

  /**
   * categories.Product
   */
  export type categories$ProductArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    where?: ProductWhereInput
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    cursor?: ProductWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }

  /**
   * categories without action
   */
  export type categoriesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categories
     */
    select?: categoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: categoriesInclude<ExtArgs> | null
  }


  /**
   * Model Product
   */

  export type AggregateProduct = {
    _count: ProductCountAggregateOutputType | null
    _avg: ProductAvgAggregateOutputType | null
    _sum: ProductSumAggregateOutputType | null
    _min: ProductMinAggregateOutputType | null
    _max: ProductMaxAggregateOutputType | null
  }

  export type ProductAvgAggregateOutputType = {
    product_id: number | null
    price: number | null
    CategoryID: number | null
    size: number | null
  }

  export type ProductSumAggregateOutputType = {
    product_id: number | null
    price: number | null
    CategoryID: number | null
    size: number | null
  }

  export type ProductMinAggregateOutputType = {
    product_id: number | null
    name: string | null
    description: string | null
    price: number | null
    CategoryID: number | null
    size: number | null
    Nutritional_value: string | null
    taste: string | null
    image_url: string | null
  }

  export type ProductMaxAggregateOutputType = {
    product_id: number | null
    name: string | null
    description: string | null
    price: number | null
    CategoryID: number | null
    size: number | null
    Nutritional_value: string | null
    taste: string | null
    image_url: string | null
  }

  export type ProductCountAggregateOutputType = {
    product_id: number
    name: number
    description: number
    price: number
    CategoryID: number
    size: number
    Nutritional_value: number
    taste: number
    image_url: number
    _all: number
  }


  export type ProductAvgAggregateInputType = {
    product_id?: true
    price?: true
    CategoryID?: true
    size?: true
  }

  export type ProductSumAggregateInputType = {
    product_id?: true
    price?: true
    CategoryID?: true
    size?: true
  }

  export type ProductMinAggregateInputType = {
    product_id?: true
    name?: true
    description?: true
    price?: true
    CategoryID?: true
    size?: true
    Nutritional_value?: true
    taste?: true
    image_url?: true
  }

  export type ProductMaxAggregateInputType = {
    product_id?: true
    name?: true
    description?: true
    price?: true
    CategoryID?: true
    size?: true
    Nutritional_value?: true
    taste?: true
    image_url?: true
  }

  export type ProductCountAggregateInputType = {
    product_id?: true
    name?: true
    description?: true
    price?: true
    CategoryID?: true
    size?: true
    Nutritional_value?: true
    taste?: true
    image_url?: true
    _all?: true
  }

  export type ProductAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Product to aggregate.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Products
    **/
    _count?: true | ProductCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProductAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProductSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProductMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProductMaxAggregateInputType
  }

  export type GetProductAggregateType<T extends ProductAggregateArgs> = {
        [P in keyof T & keyof AggregateProduct]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProduct[P]>
      : GetScalarType<T[P], AggregateProduct[P]>
  }




  export type ProductGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductWhereInput
    orderBy?: ProductOrderByWithAggregationInput | ProductOrderByWithAggregationInput[]
    by: ProductScalarFieldEnum[] | ProductScalarFieldEnum
    having?: ProductScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProductCountAggregateInputType | true
    _avg?: ProductAvgAggregateInputType
    _sum?: ProductSumAggregateInputType
    _min?: ProductMinAggregateInputType
    _max?: ProductMaxAggregateInputType
  }

  export type ProductGroupByOutputType = {
    product_id: number
    name: string
    description: string
    price: number
    CategoryID: number | null
    size: number
    Nutritional_value: string
    taste: string
    image_url: string
    _count: ProductCountAggregateOutputType | null
    _avg: ProductAvgAggregateOutputType | null
    _sum: ProductSumAggregateOutputType | null
    _min: ProductMinAggregateOutputType | null
    _max: ProductMaxAggregateOutputType | null
  }

  type GetProductGroupByPayload<T extends ProductGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProductGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProductGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProductGroupByOutputType[P]>
            : GetScalarType<T[P], ProductGroupByOutputType[P]>
        }
      >
    >


  export type ProductSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    product_id?: boolean
    name?: boolean
    description?: boolean
    price?: boolean
    CategoryID?: boolean
    size?: boolean
    Nutritional_value?: boolean
    taste?: boolean
    image_url?: boolean
    orderdetails?: boolean | Product$orderdetailsArgs<ExtArgs>
    reviews?: boolean | Product$reviewsArgs<ExtArgs>
    categories?: boolean | Product$categoriesArgs<ExtArgs>
    _count?: boolean | ProductCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["product"]>


  export type ProductSelectScalar = {
    product_id?: boolean
    name?: boolean
    description?: boolean
    price?: boolean
    CategoryID?: boolean
    size?: boolean
    Nutritional_value?: boolean
    taste?: boolean
    image_url?: boolean
  }

  export type ProductInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    orderdetails?: boolean | Product$orderdetailsArgs<ExtArgs>
    reviews?: boolean | Product$reviewsArgs<ExtArgs>
    categories?: boolean | Product$categoriesArgs<ExtArgs>
    _count?: boolean | ProductCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $ProductPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Product"
    objects: {
      orderdetails: Prisma.$orderdetailPayload<ExtArgs>[]
      reviews: Prisma.$reviewsPayload<ExtArgs>[]
      categories: Prisma.$categoriesPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      product_id: number
      name: string
      description: string
      price: number
      CategoryID: number | null
      size: number
      Nutritional_value: string
      taste: string
      image_url: string
    }, ExtArgs["result"]["product"]>
    composites: {}
  }

  type ProductGetPayload<S extends boolean | null | undefined | ProductDefaultArgs> = $Result.GetResult<Prisma.$ProductPayload, S>

  type ProductCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ProductFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ProductCountAggregateInputType | true
    }

  export interface ProductDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Product'], meta: { name: 'Product' } }
    /**
     * Find zero or one Product that matches the filter.
     * @param {ProductFindUniqueArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProductFindUniqueArgs>(args: SelectSubset<T, ProductFindUniqueArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Product that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ProductFindUniqueOrThrowArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProductFindUniqueOrThrowArgs>(args: SelectSubset<T, ProductFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Product that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductFindFirstArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProductFindFirstArgs>(args?: SelectSubset<T, ProductFindFirstArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Product that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductFindFirstOrThrowArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProductFindFirstOrThrowArgs>(args?: SelectSubset<T, ProductFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Products that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Products
     * const products = await prisma.product.findMany()
     * 
     * // Get first 10 Products
     * const products = await prisma.product.findMany({ take: 10 })
     * 
     * // Only select the `product_id`
     * const productWithProduct_idOnly = await prisma.product.findMany({ select: { product_id: true } })
     * 
     */
    findMany<T extends ProductFindManyArgs>(args?: SelectSubset<T, ProductFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Product.
     * @param {ProductCreateArgs} args - Arguments to create a Product.
     * @example
     * // Create one Product
     * const Product = await prisma.product.create({
     *   data: {
     *     // ... data to create a Product
     *   }
     * })
     * 
     */
    create<T extends ProductCreateArgs>(args: SelectSubset<T, ProductCreateArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Products.
     * @param {ProductCreateManyArgs} args - Arguments to create many Products.
     * @example
     * // Create many Products
     * const product = await prisma.product.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProductCreateManyArgs>(args?: SelectSubset<T, ProductCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Product.
     * @param {ProductDeleteArgs} args - Arguments to delete one Product.
     * @example
     * // Delete one Product
     * const Product = await prisma.product.delete({
     *   where: {
     *     // ... filter to delete one Product
     *   }
     * })
     * 
     */
    delete<T extends ProductDeleteArgs>(args: SelectSubset<T, ProductDeleteArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Product.
     * @param {ProductUpdateArgs} args - Arguments to update one Product.
     * @example
     * // Update one Product
     * const product = await prisma.product.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProductUpdateArgs>(args: SelectSubset<T, ProductUpdateArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Products.
     * @param {ProductDeleteManyArgs} args - Arguments to filter Products to delete.
     * @example
     * // Delete a few Products
     * const { count } = await prisma.product.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProductDeleteManyArgs>(args?: SelectSubset<T, ProductDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Products
     * const product = await prisma.product.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProductUpdateManyArgs>(args: SelectSubset<T, ProductUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Product.
     * @param {ProductUpsertArgs} args - Arguments to update or create a Product.
     * @example
     * // Update or create a Product
     * const product = await prisma.product.upsert({
     *   create: {
     *     // ... data to create a Product
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Product we want to update
     *   }
     * })
     */
    upsert<T extends ProductUpsertArgs>(args: SelectSubset<T, ProductUpsertArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductCountArgs} args - Arguments to filter Products to count.
     * @example
     * // Count the number of Products
     * const count = await prisma.product.count({
     *   where: {
     *     // ... the filter for the Products we want to count
     *   }
     * })
    **/
    count<T extends ProductCountArgs>(
      args?: Subset<T, ProductCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProductCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Product.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProductAggregateArgs>(args: Subset<T, ProductAggregateArgs>): Prisma.PrismaPromise<GetProductAggregateType<T>>

    /**
     * Group by Product.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProductGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProductGroupByArgs['orderBy'] }
        : { orderBy?: ProductGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProductGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Product model
   */
  readonly fields: ProductFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Product.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProductClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    orderdetails<T extends Product$orderdetailsArgs<ExtArgs> = {}>(args?: Subset<T, Product$orderdetailsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$orderdetailPayload<ExtArgs>, T, "findMany"> | Null>
    reviews<T extends Product$reviewsArgs<ExtArgs> = {}>(args?: Subset<T, Product$reviewsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$reviewsPayload<ExtArgs>, T, "findMany"> | Null>
    categories<T extends Product$categoriesArgs<ExtArgs> = {}>(args?: Subset<T, Product$categoriesArgs<ExtArgs>>): Prisma__categoriesClient<$Result.GetResult<Prisma.$categoriesPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Product model
   */ 
  interface ProductFieldRefs {
    readonly product_id: FieldRef<"Product", 'Int'>
    readonly name: FieldRef<"Product", 'String'>
    readonly description: FieldRef<"Product", 'String'>
    readonly price: FieldRef<"Product", 'Float'>
    readonly CategoryID: FieldRef<"Product", 'Int'>
    readonly size: FieldRef<"Product", 'Float'>
    readonly Nutritional_value: FieldRef<"Product", 'String'>
    readonly taste: FieldRef<"Product", 'String'>
    readonly image_url: FieldRef<"Product", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Product findUnique
   */
  export type ProductFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Product to fetch.
     */
    where: ProductWhereUniqueInput
  }

  /**
   * Product findUniqueOrThrow
   */
  export type ProductFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Product to fetch.
     */
    where: ProductWhereUniqueInput
  }

  /**
   * Product findFirst
   */
  export type ProductFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Product to fetch.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Products.
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Products.
     */
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }

  /**
   * Product findFirstOrThrow
   */
  export type ProductFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Product to fetch.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Products.
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Products.
     */
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }

  /**
   * Product findMany
   */
  export type ProductFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Products to fetch.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Products.
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }

  /**
   * Product create
   */
  export type ProductCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * The data needed to create a Product.
     */
    data: XOR<ProductCreateInput, ProductUncheckedCreateInput>
  }

  /**
   * Product createMany
   */
  export type ProductCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Products.
     */
    data: ProductCreateManyInput | ProductCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Product update
   */
  export type ProductUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * The data needed to update a Product.
     */
    data: XOR<ProductUpdateInput, ProductUncheckedUpdateInput>
    /**
     * Choose, which Product to update.
     */
    where: ProductWhereUniqueInput
  }

  /**
   * Product updateMany
   */
  export type ProductUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Products.
     */
    data: XOR<ProductUpdateManyMutationInput, ProductUncheckedUpdateManyInput>
    /**
     * Filter which Products to update
     */
    where?: ProductWhereInput
  }

  /**
   * Product upsert
   */
  export type ProductUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * The filter to search for the Product to update in case it exists.
     */
    where: ProductWhereUniqueInput
    /**
     * In case the Product found by the `where` argument doesn't exist, create a new Product with this data.
     */
    create: XOR<ProductCreateInput, ProductUncheckedCreateInput>
    /**
     * In case the Product was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProductUpdateInput, ProductUncheckedUpdateInput>
  }

  /**
   * Product delete
   */
  export type ProductDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter which Product to delete.
     */
    where: ProductWhereUniqueInput
  }

  /**
   * Product deleteMany
   */
  export type ProductDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Products to delete
     */
    where?: ProductWhereInput
  }

  /**
   * Product.orderdetails
   */
  export type Product$orderdetailsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orderdetail
     */
    select?: orderdetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: orderdetailInclude<ExtArgs> | null
    where?: orderdetailWhereInput
    orderBy?: orderdetailOrderByWithRelationInput | orderdetailOrderByWithRelationInput[]
    cursor?: orderdetailWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrderdetailScalarFieldEnum | OrderdetailScalarFieldEnum[]
  }

  /**
   * Product.reviews
   */
  export type Product$reviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the reviews
     */
    select?: reviewsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reviewsInclude<ExtArgs> | null
    where?: reviewsWhereInput
    orderBy?: reviewsOrderByWithRelationInput | reviewsOrderByWithRelationInput[]
    cursor?: reviewsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReviewsScalarFieldEnum | ReviewsScalarFieldEnum[]
  }

  /**
   * Product.categories
   */
  export type Product$categoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categories
     */
    select?: categoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: categoriesInclude<ExtArgs> | null
    where?: categoriesWhereInput
  }

  /**
   * Product without action
   */
  export type ProductDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
  }


  /**
   * Model health_info
   */

  export type AggregateHealth_info = {
    _count: Health_infoCountAggregateOutputType | null
    _avg: Health_infoAvgAggregateOutputType | null
    _sum: Health_infoSumAggregateOutputType | null
    _min: Health_infoMinAggregateOutputType | null
    _max: Health_infoMaxAggregateOutputType | null
  }

  export type Health_infoAvgAggregateOutputType = {
    health_id: number | null
    UserID: number | null
    age: number | null
    weight: number | null
    height: number | null
  }

  export type Health_infoSumAggregateOutputType = {
    health_id: number | null
    UserID: number | null
    age: number | null
    weight: number | null
    height: number | null
  }

  export type Health_infoMinAggregateOutputType = {
    health_id: number | null
    UserID: number | null
    first_name: string | null
    last_name: string | null
    gender: string | null
    email: string | null
    address: string | null
    phone_number: string | null
    age: number | null
    weight: number | null
    height: number | null
    profile_image: string | null
  }

  export type Health_infoMaxAggregateOutputType = {
    health_id: number | null
    UserID: number | null
    first_name: string | null
    last_name: string | null
    gender: string | null
    email: string | null
    address: string | null
    phone_number: string | null
    age: number | null
    weight: number | null
    height: number | null
    profile_image: string | null
  }

  export type Health_infoCountAggregateOutputType = {
    health_id: number
    UserID: number
    first_name: number
    last_name: number
    gender: number
    email: number
    address: number
    phone_number: number
    age: number
    weight: number
    height: number
    profile_image: number
    _all: number
  }


  export type Health_infoAvgAggregateInputType = {
    health_id?: true
    UserID?: true
    age?: true
    weight?: true
    height?: true
  }

  export type Health_infoSumAggregateInputType = {
    health_id?: true
    UserID?: true
    age?: true
    weight?: true
    height?: true
  }

  export type Health_infoMinAggregateInputType = {
    health_id?: true
    UserID?: true
    first_name?: true
    last_name?: true
    gender?: true
    email?: true
    address?: true
    phone_number?: true
    age?: true
    weight?: true
    height?: true
    profile_image?: true
  }

  export type Health_infoMaxAggregateInputType = {
    health_id?: true
    UserID?: true
    first_name?: true
    last_name?: true
    gender?: true
    email?: true
    address?: true
    phone_number?: true
    age?: true
    weight?: true
    height?: true
    profile_image?: true
  }

  export type Health_infoCountAggregateInputType = {
    health_id?: true
    UserID?: true
    first_name?: true
    last_name?: true
    gender?: true
    email?: true
    address?: true
    phone_number?: true
    age?: true
    weight?: true
    height?: true
    profile_image?: true
    _all?: true
  }

  export type Health_infoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which health_info to aggregate.
     */
    where?: health_infoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of health_infos to fetch.
     */
    orderBy?: health_infoOrderByWithRelationInput | health_infoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: health_infoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` health_infos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` health_infos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned health_infos
    **/
    _count?: true | Health_infoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Health_infoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Health_infoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Health_infoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Health_infoMaxAggregateInputType
  }

  export type GetHealth_infoAggregateType<T extends Health_infoAggregateArgs> = {
        [P in keyof T & keyof AggregateHealth_info]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateHealth_info[P]>
      : GetScalarType<T[P], AggregateHealth_info[P]>
  }




  export type health_infoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: health_infoWhereInput
    orderBy?: health_infoOrderByWithAggregationInput | health_infoOrderByWithAggregationInput[]
    by: Health_infoScalarFieldEnum[] | Health_infoScalarFieldEnum
    having?: health_infoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Health_infoCountAggregateInputType | true
    _avg?: Health_infoAvgAggregateInputType
    _sum?: Health_infoSumAggregateInputType
    _min?: Health_infoMinAggregateInputType
    _max?: Health_infoMaxAggregateInputType
  }

  export type Health_infoGroupByOutputType = {
    health_id: number
    UserID: number
    first_name: string
    last_name: string
    gender: string
    email: string | null
    address: string | null
    phone_number: string | null
    age: number
    weight: number
    height: number
    profile_image: string | null
    _count: Health_infoCountAggregateOutputType | null
    _avg: Health_infoAvgAggregateOutputType | null
    _sum: Health_infoSumAggregateOutputType | null
    _min: Health_infoMinAggregateOutputType | null
    _max: Health_infoMaxAggregateOutputType | null
  }

  type GetHealth_infoGroupByPayload<T extends health_infoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Health_infoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Health_infoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Health_infoGroupByOutputType[P]>
            : GetScalarType<T[P], Health_infoGroupByOutputType[P]>
        }
      >
    >


  export type health_infoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    health_id?: boolean
    UserID?: boolean
    first_name?: boolean
    last_name?: boolean
    gender?: boolean
    email?: boolean
    address?: boolean
    phone_number?: boolean
    age?: boolean
    weight?: boolean
    height?: boolean
    profile_image?: boolean
    user?: boolean | usersDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["health_info"]>


  export type health_infoSelectScalar = {
    health_id?: boolean
    UserID?: boolean
    first_name?: boolean
    last_name?: boolean
    gender?: boolean
    email?: boolean
    address?: boolean
    phone_number?: boolean
    age?: boolean
    weight?: boolean
    height?: boolean
    profile_image?: boolean
  }

  export type health_infoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | usersDefaultArgs<ExtArgs>
  }

  export type $health_infoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "health_info"
    objects: {
      user: Prisma.$usersPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      health_id: number
      UserID: number
      first_name: string
      last_name: string
      gender: string
      email: string | null
      address: string | null
      phone_number: string | null
      age: number
      weight: number
      height: number
      profile_image: string | null
    }, ExtArgs["result"]["health_info"]>
    composites: {}
  }

  type health_infoGetPayload<S extends boolean | null | undefined | health_infoDefaultArgs> = $Result.GetResult<Prisma.$health_infoPayload, S>

  type health_infoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<health_infoFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: Health_infoCountAggregateInputType | true
    }

  export interface health_infoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['health_info'], meta: { name: 'health_info' } }
    /**
     * Find zero or one Health_info that matches the filter.
     * @param {health_infoFindUniqueArgs} args - Arguments to find a Health_info
     * @example
     * // Get one Health_info
     * const health_info = await prisma.health_info.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends health_infoFindUniqueArgs>(args: SelectSubset<T, health_infoFindUniqueArgs<ExtArgs>>): Prisma__health_infoClient<$Result.GetResult<Prisma.$health_infoPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Health_info that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {health_infoFindUniqueOrThrowArgs} args - Arguments to find a Health_info
     * @example
     * // Get one Health_info
     * const health_info = await prisma.health_info.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends health_infoFindUniqueOrThrowArgs>(args: SelectSubset<T, health_infoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__health_infoClient<$Result.GetResult<Prisma.$health_infoPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Health_info that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {health_infoFindFirstArgs} args - Arguments to find a Health_info
     * @example
     * // Get one Health_info
     * const health_info = await prisma.health_info.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends health_infoFindFirstArgs>(args?: SelectSubset<T, health_infoFindFirstArgs<ExtArgs>>): Prisma__health_infoClient<$Result.GetResult<Prisma.$health_infoPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Health_info that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {health_infoFindFirstOrThrowArgs} args - Arguments to find a Health_info
     * @example
     * // Get one Health_info
     * const health_info = await prisma.health_info.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends health_infoFindFirstOrThrowArgs>(args?: SelectSubset<T, health_infoFindFirstOrThrowArgs<ExtArgs>>): Prisma__health_infoClient<$Result.GetResult<Prisma.$health_infoPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Health_infos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {health_infoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Health_infos
     * const health_infos = await prisma.health_info.findMany()
     * 
     * // Get first 10 Health_infos
     * const health_infos = await prisma.health_info.findMany({ take: 10 })
     * 
     * // Only select the `health_id`
     * const health_infoWithHealth_idOnly = await prisma.health_info.findMany({ select: { health_id: true } })
     * 
     */
    findMany<T extends health_infoFindManyArgs>(args?: SelectSubset<T, health_infoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$health_infoPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Health_info.
     * @param {health_infoCreateArgs} args - Arguments to create a Health_info.
     * @example
     * // Create one Health_info
     * const Health_info = await prisma.health_info.create({
     *   data: {
     *     // ... data to create a Health_info
     *   }
     * })
     * 
     */
    create<T extends health_infoCreateArgs>(args: SelectSubset<T, health_infoCreateArgs<ExtArgs>>): Prisma__health_infoClient<$Result.GetResult<Prisma.$health_infoPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Health_infos.
     * @param {health_infoCreateManyArgs} args - Arguments to create many Health_infos.
     * @example
     * // Create many Health_infos
     * const health_info = await prisma.health_info.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends health_infoCreateManyArgs>(args?: SelectSubset<T, health_infoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Health_info.
     * @param {health_infoDeleteArgs} args - Arguments to delete one Health_info.
     * @example
     * // Delete one Health_info
     * const Health_info = await prisma.health_info.delete({
     *   where: {
     *     // ... filter to delete one Health_info
     *   }
     * })
     * 
     */
    delete<T extends health_infoDeleteArgs>(args: SelectSubset<T, health_infoDeleteArgs<ExtArgs>>): Prisma__health_infoClient<$Result.GetResult<Prisma.$health_infoPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Health_info.
     * @param {health_infoUpdateArgs} args - Arguments to update one Health_info.
     * @example
     * // Update one Health_info
     * const health_info = await prisma.health_info.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends health_infoUpdateArgs>(args: SelectSubset<T, health_infoUpdateArgs<ExtArgs>>): Prisma__health_infoClient<$Result.GetResult<Prisma.$health_infoPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Health_infos.
     * @param {health_infoDeleteManyArgs} args - Arguments to filter Health_infos to delete.
     * @example
     * // Delete a few Health_infos
     * const { count } = await prisma.health_info.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends health_infoDeleteManyArgs>(args?: SelectSubset<T, health_infoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Health_infos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {health_infoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Health_infos
     * const health_info = await prisma.health_info.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends health_infoUpdateManyArgs>(args: SelectSubset<T, health_infoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Health_info.
     * @param {health_infoUpsertArgs} args - Arguments to update or create a Health_info.
     * @example
     * // Update or create a Health_info
     * const health_info = await prisma.health_info.upsert({
     *   create: {
     *     // ... data to create a Health_info
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Health_info we want to update
     *   }
     * })
     */
    upsert<T extends health_infoUpsertArgs>(args: SelectSubset<T, health_infoUpsertArgs<ExtArgs>>): Prisma__health_infoClient<$Result.GetResult<Prisma.$health_infoPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Health_infos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {health_infoCountArgs} args - Arguments to filter Health_infos to count.
     * @example
     * // Count the number of Health_infos
     * const count = await prisma.health_info.count({
     *   where: {
     *     // ... the filter for the Health_infos we want to count
     *   }
     * })
    **/
    count<T extends health_infoCountArgs>(
      args?: Subset<T, health_infoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Health_infoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Health_info.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Health_infoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Health_infoAggregateArgs>(args: Subset<T, Health_infoAggregateArgs>): Prisma.PrismaPromise<GetHealth_infoAggregateType<T>>

    /**
     * Group by Health_info.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {health_infoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends health_infoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: health_infoGroupByArgs['orderBy'] }
        : { orderBy?: health_infoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, health_infoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetHealth_infoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the health_info model
   */
  readonly fields: health_infoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for health_info.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__health_infoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends usersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, usersDefaultArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the health_info model
   */ 
  interface health_infoFieldRefs {
    readonly health_id: FieldRef<"health_info", 'Int'>
    readonly UserID: FieldRef<"health_info", 'Int'>
    readonly first_name: FieldRef<"health_info", 'String'>
    readonly last_name: FieldRef<"health_info", 'String'>
    readonly gender: FieldRef<"health_info", 'String'>
    readonly email: FieldRef<"health_info", 'String'>
    readonly address: FieldRef<"health_info", 'String'>
    readonly phone_number: FieldRef<"health_info", 'String'>
    readonly age: FieldRef<"health_info", 'Int'>
    readonly weight: FieldRef<"health_info", 'Float'>
    readonly height: FieldRef<"health_info", 'Float'>
    readonly profile_image: FieldRef<"health_info", 'String'>
  }
    

  // Custom InputTypes
  /**
   * health_info findUnique
   */
  export type health_infoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the health_info
     */
    select?: health_infoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: health_infoInclude<ExtArgs> | null
    /**
     * Filter, which health_info to fetch.
     */
    where: health_infoWhereUniqueInput
  }

  /**
   * health_info findUniqueOrThrow
   */
  export type health_infoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the health_info
     */
    select?: health_infoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: health_infoInclude<ExtArgs> | null
    /**
     * Filter, which health_info to fetch.
     */
    where: health_infoWhereUniqueInput
  }

  /**
   * health_info findFirst
   */
  export type health_infoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the health_info
     */
    select?: health_infoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: health_infoInclude<ExtArgs> | null
    /**
     * Filter, which health_info to fetch.
     */
    where?: health_infoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of health_infos to fetch.
     */
    orderBy?: health_infoOrderByWithRelationInput | health_infoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for health_infos.
     */
    cursor?: health_infoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` health_infos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` health_infos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of health_infos.
     */
    distinct?: Health_infoScalarFieldEnum | Health_infoScalarFieldEnum[]
  }

  /**
   * health_info findFirstOrThrow
   */
  export type health_infoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the health_info
     */
    select?: health_infoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: health_infoInclude<ExtArgs> | null
    /**
     * Filter, which health_info to fetch.
     */
    where?: health_infoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of health_infos to fetch.
     */
    orderBy?: health_infoOrderByWithRelationInput | health_infoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for health_infos.
     */
    cursor?: health_infoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` health_infos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` health_infos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of health_infos.
     */
    distinct?: Health_infoScalarFieldEnum | Health_infoScalarFieldEnum[]
  }

  /**
   * health_info findMany
   */
  export type health_infoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the health_info
     */
    select?: health_infoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: health_infoInclude<ExtArgs> | null
    /**
     * Filter, which health_infos to fetch.
     */
    where?: health_infoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of health_infos to fetch.
     */
    orderBy?: health_infoOrderByWithRelationInput | health_infoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing health_infos.
     */
    cursor?: health_infoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` health_infos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` health_infos.
     */
    skip?: number
    distinct?: Health_infoScalarFieldEnum | Health_infoScalarFieldEnum[]
  }

  /**
   * health_info create
   */
  export type health_infoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the health_info
     */
    select?: health_infoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: health_infoInclude<ExtArgs> | null
    /**
     * The data needed to create a health_info.
     */
    data: XOR<health_infoCreateInput, health_infoUncheckedCreateInput>
  }

  /**
   * health_info createMany
   */
  export type health_infoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many health_infos.
     */
    data: health_infoCreateManyInput | health_infoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * health_info update
   */
  export type health_infoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the health_info
     */
    select?: health_infoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: health_infoInclude<ExtArgs> | null
    /**
     * The data needed to update a health_info.
     */
    data: XOR<health_infoUpdateInput, health_infoUncheckedUpdateInput>
    /**
     * Choose, which health_info to update.
     */
    where: health_infoWhereUniqueInput
  }

  /**
   * health_info updateMany
   */
  export type health_infoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update health_infos.
     */
    data: XOR<health_infoUpdateManyMutationInput, health_infoUncheckedUpdateManyInput>
    /**
     * Filter which health_infos to update
     */
    where?: health_infoWhereInput
  }

  /**
   * health_info upsert
   */
  export type health_infoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the health_info
     */
    select?: health_infoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: health_infoInclude<ExtArgs> | null
    /**
     * The filter to search for the health_info to update in case it exists.
     */
    where: health_infoWhereUniqueInput
    /**
     * In case the health_info found by the `where` argument doesn't exist, create a new health_info with this data.
     */
    create: XOR<health_infoCreateInput, health_infoUncheckedCreateInput>
    /**
     * In case the health_info was found with the provided `where` argument, update it with this data.
     */
    update: XOR<health_infoUpdateInput, health_infoUncheckedUpdateInput>
  }

  /**
   * health_info delete
   */
  export type health_infoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the health_info
     */
    select?: health_infoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: health_infoInclude<ExtArgs> | null
    /**
     * Filter which health_info to delete.
     */
    where: health_infoWhereUniqueInput
  }

  /**
   * health_info deleteMany
   */
  export type health_infoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which health_infos to delete
     */
    where?: health_infoWhereInput
  }

  /**
   * health_info without action
   */
  export type health_infoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the health_info
     */
    select?: health_infoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: health_infoInclude<ExtArgs> | null
  }


  /**
   * Model reviews
   */

  export type AggregateReviews = {
    _count: ReviewsCountAggregateOutputType | null
    _avg: ReviewsAvgAggregateOutputType | null
    _sum: ReviewsSumAggregateOutputType | null
    _min: ReviewsMinAggregateOutputType | null
    _max: ReviewsMaxAggregateOutputType | null
  }

  export type ReviewsAvgAggregateOutputType = {
    ReviewID: number | null
    product_id: number | null
    UserID: number | null
    Rating: number | null
  }

  export type ReviewsSumAggregateOutputType = {
    ReviewID: number | null
    product_id: number | null
    UserID: number | null
    Rating: number | null
  }

  export type ReviewsMinAggregateOutputType = {
    ReviewID: number | null
    product_id: number | null
    UserID: number | null
    Comment: string | null
    Rating: number | null
    CreatedAt: Date | null
  }

  export type ReviewsMaxAggregateOutputType = {
    ReviewID: number | null
    product_id: number | null
    UserID: number | null
    Comment: string | null
    Rating: number | null
    CreatedAt: Date | null
  }

  export type ReviewsCountAggregateOutputType = {
    ReviewID: number
    product_id: number
    UserID: number
    Comment: number
    Rating: number
    CreatedAt: number
    _all: number
  }


  export type ReviewsAvgAggregateInputType = {
    ReviewID?: true
    product_id?: true
    UserID?: true
    Rating?: true
  }

  export type ReviewsSumAggregateInputType = {
    ReviewID?: true
    product_id?: true
    UserID?: true
    Rating?: true
  }

  export type ReviewsMinAggregateInputType = {
    ReviewID?: true
    product_id?: true
    UserID?: true
    Comment?: true
    Rating?: true
    CreatedAt?: true
  }

  export type ReviewsMaxAggregateInputType = {
    ReviewID?: true
    product_id?: true
    UserID?: true
    Comment?: true
    Rating?: true
    CreatedAt?: true
  }

  export type ReviewsCountAggregateInputType = {
    ReviewID?: true
    product_id?: true
    UserID?: true
    Comment?: true
    Rating?: true
    CreatedAt?: true
    _all?: true
  }

  export type ReviewsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which reviews to aggregate.
     */
    where?: reviewsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of reviews to fetch.
     */
    orderBy?: reviewsOrderByWithRelationInput | reviewsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: reviewsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` reviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` reviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned reviews
    **/
    _count?: true | ReviewsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ReviewsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ReviewsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReviewsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReviewsMaxAggregateInputType
  }

  export type GetReviewsAggregateType<T extends ReviewsAggregateArgs> = {
        [P in keyof T & keyof AggregateReviews]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReviews[P]>
      : GetScalarType<T[P], AggregateReviews[P]>
  }




  export type reviewsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: reviewsWhereInput
    orderBy?: reviewsOrderByWithAggregationInput | reviewsOrderByWithAggregationInput[]
    by: ReviewsScalarFieldEnum[] | ReviewsScalarFieldEnum
    having?: reviewsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReviewsCountAggregateInputType | true
    _avg?: ReviewsAvgAggregateInputType
    _sum?: ReviewsSumAggregateInputType
    _min?: ReviewsMinAggregateInputType
    _max?: ReviewsMaxAggregateInputType
  }

  export type ReviewsGroupByOutputType = {
    ReviewID: number
    product_id: number
    UserID: number
    Comment: string | null
    Rating: number | null
    CreatedAt: Date | null
    _count: ReviewsCountAggregateOutputType | null
    _avg: ReviewsAvgAggregateOutputType | null
    _sum: ReviewsSumAggregateOutputType | null
    _min: ReviewsMinAggregateOutputType | null
    _max: ReviewsMaxAggregateOutputType | null
  }

  type GetReviewsGroupByPayload<T extends reviewsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ReviewsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReviewsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReviewsGroupByOutputType[P]>
            : GetScalarType<T[P], ReviewsGroupByOutputType[P]>
        }
      >
    >


  export type reviewsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    ReviewID?: boolean
    product_id?: boolean
    UserID?: boolean
    Comment?: boolean
    Rating?: boolean
    CreatedAt?: boolean
    user?: boolean | usersDefaultArgs<ExtArgs>
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["reviews"]>


  export type reviewsSelectScalar = {
    ReviewID?: boolean
    product_id?: boolean
    UserID?: boolean
    Comment?: boolean
    Rating?: boolean
    CreatedAt?: boolean
  }

  export type reviewsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | usersDefaultArgs<ExtArgs>
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }

  export type $reviewsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "reviews"
    objects: {
      user: Prisma.$usersPayload<ExtArgs>
      product: Prisma.$ProductPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      ReviewID: number
      product_id: number
      UserID: number
      Comment: string | null
      Rating: number | null
      CreatedAt: Date | null
    }, ExtArgs["result"]["reviews"]>
    composites: {}
  }

  type reviewsGetPayload<S extends boolean | null | undefined | reviewsDefaultArgs> = $Result.GetResult<Prisma.$reviewsPayload, S>

  type reviewsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<reviewsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ReviewsCountAggregateInputType | true
    }

  export interface reviewsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['reviews'], meta: { name: 'reviews' } }
    /**
     * Find zero or one Reviews that matches the filter.
     * @param {reviewsFindUniqueArgs} args - Arguments to find a Reviews
     * @example
     * // Get one Reviews
     * const reviews = await prisma.reviews.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends reviewsFindUniqueArgs>(args: SelectSubset<T, reviewsFindUniqueArgs<ExtArgs>>): Prisma__reviewsClient<$Result.GetResult<Prisma.$reviewsPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Reviews that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {reviewsFindUniqueOrThrowArgs} args - Arguments to find a Reviews
     * @example
     * // Get one Reviews
     * const reviews = await prisma.reviews.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends reviewsFindUniqueOrThrowArgs>(args: SelectSubset<T, reviewsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__reviewsClient<$Result.GetResult<Prisma.$reviewsPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Reviews that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {reviewsFindFirstArgs} args - Arguments to find a Reviews
     * @example
     * // Get one Reviews
     * const reviews = await prisma.reviews.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends reviewsFindFirstArgs>(args?: SelectSubset<T, reviewsFindFirstArgs<ExtArgs>>): Prisma__reviewsClient<$Result.GetResult<Prisma.$reviewsPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Reviews that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {reviewsFindFirstOrThrowArgs} args - Arguments to find a Reviews
     * @example
     * // Get one Reviews
     * const reviews = await prisma.reviews.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends reviewsFindFirstOrThrowArgs>(args?: SelectSubset<T, reviewsFindFirstOrThrowArgs<ExtArgs>>): Prisma__reviewsClient<$Result.GetResult<Prisma.$reviewsPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Reviews that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {reviewsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Reviews
     * const reviews = await prisma.reviews.findMany()
     * 
     * // Get first 10 Reviews
     * const reviews = await prisma.reviews.findMany({ take: 10 })
     * 
     * // Only select the `ReviewID`
     * const reviewsWithReviewIDOnly = await prisma.reviews.findMany({ select: { ReviewID: true } })
     * 
     */
    findMany<T extends reviewsFindManyArgs>(args?: SelectSubset<T, reviewsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$reviewsPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Reviews.
     * @param {reviewsCreateArgs} args - Arguments to create a Reviews.
     * @example
     * // Create one Reviews
     * const Reviews = await prisma.reviews.create({
     *   data: {
     *     // ... data to create a Reviews
     *   }
     * })
     * 
     */
    create<T extends reviewsCreateArgs>(args: SelectSubset<T, reviewsCreateArgs<ExtArgs>>): Prisma__reviewsClient<$Result.GetResult<Prisma.$reviewsPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Reviews.
     * @param {reviewsCreateManyArgs} args - Arguments to create many Reviews.
     * @example
     * // Create many Reviews
     * const reviews = await prisma.reviews.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends reviewsCreateManyArgs>(args?: SelectSubset<T, reviewsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Reviews.
     * @param {reviewsDeleteArgs} args - Arguments to delete one Reviews.
     * @example
     * // Delete one Reviews
     * const Reviews = await prisma.reviews.delete({
     *   where: {
     *     // ... filter to delete one Reviews
     *   }
     * })
     * 
     */
    delete<T extends reviewsDeleteArgs>(args: SelectSubset<T, reviewsDeleteArgs<ExtArgs>>): Prisma__reviewsClient<$Result.GetResult<Prisma.$reviewsPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Reviews.
     * @param {reviewsUpdateArgs} args - Arguments to update one Reviews.
     * @example
     * // Update one Reviews
     * const reviews = await prisma.reviews.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends reviewsUpdateArgs>(args: SelectSubset<T, reviewsUpdateArgs<ExtArgs>>): Prisma__reviewsClient<$Result.GetResult<Prisma.$reviewsPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Reviews.
     * @param {reviewsDeleteManyArgs} args - Arguments to filter Reviews to delete.
     * @example
     * // Delete a few Reviews
     * const { count } = await prisma.reviews.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends reviewsDeleteManyArgs>(args?: SelectSubset<T, reviewsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Reviews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {reviewsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Reviews
     * const reviews = await prisma.reviews.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends reviewsUpdateManyArgs>(args: SelectSubset<T, reviewsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Reviews.
     * @param {reviewsUpsertArgs} args - Arguments to update or create a Reviews.
     * @example
     * // Update or create a Reviews
     * const reviews = await prisma.reviews.upsert({
     *   create: {
     *     // ... data to create a Reviews
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Reviews we want to update
     *   }
     * })
     */
    upsert<T extends reviewsUpsertArgs>(args: SelectSubset<T, reviewsUpsertArgs<ExtArgs>>): Prisma__reviewsClient<$Result.GetResult<Prisma.$reviewsPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Reviews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {reviewsCountArgs} args - Arguments to filter Reviews to count.
     * @example
     * // Count the number of Reviews
     * const count = await prisma.reviews.count({
     *   where: {
     *     // ... the filter for the Reviews we want to count
     *   }
     * })
    **/
    count<T extends reviewsCountArgs>(
      args?: Subset<T, reviewsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReviewsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Reviews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReviewsAggregateArgs>(args: Subset<T, ReviewsAggregateArgs>): Prisma.PrismaPromise<GetReviewsAggregateType<T>>

    /**
     * Group by Reviews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {reviewsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends reviewsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: reviewsGroupByArgs['orderBy'] }
        : { orderBy?: reviewsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, reviewsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReviewsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the reviews model
   */
  readonly fields: reviewsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for reviews.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__reviewsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends usersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, usersDefaultArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    product<T extends ProductDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProductDefaultArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the reviews model
   */ 
  interface reviewsFieldRefs {
    readonly ReviewID: FieldRef<"reviews", 'Int'>
    readonly product_id: FieldRef<"reviews", 'Int'>
    readonly UserID: FieldRef<"reviews", 'Int'>
    readonly Comment: FieldRef<"reviews", 'String'>
    readonly Rating: FieldRef<"reviews", 'Int'>
    readonly CreatedAt: FieldRef<"reviews", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * reviews findUnique
   */
  export type reviewsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the reviews
     */
    select?: reviewsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reviewsInclude<ExtArgs> | null
    /**
     * Filter, which reviews to fetch.
     */
    where: reviewsWhereUniqueInput
  }

  /**
   * reviews findUniqueOrThrow
   */
  export type reviewsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the reviews
     */
    select?: reviewsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reviewsInclude<ExtArgs> | null
    /**
     * Filter, which reviews to fetch.
     */
    where: reviewsWhereUniqueInput
  }

  /**
   * reviews findFirst
   */
  export type reviewsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the reviews
     */
    select?: reviewsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reviewsInclude<ExtArgs> | null
    /**
     * Filter, which reviews to fetch.
     */
    where?: reviewsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of reviews to fetch.
     */
    orderBy?: reviewsOrderByWithRelationInput | reviewsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for reviews.
     */
    cursor?: reviewsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` reviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` reviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of reviews.
     */
    distinct?: ReviewsScalarFieldEnum | ReviewsScalarFieldEnum[]
  }

  /**
   * reviews findFirstOrThrow
   */
  export type reviewsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the reviews
     */
    select?: reviewsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reviewsInclude<ExtArgs> | null
    /**
     * Filter, which reviews to fetch.
     */
    where?: reviewsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of reviews to fetch.
     */
    orderBy?: reviewsOrderByWithRelationInput | reviewsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for reviews.
     */
    cursor?: reviewsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` reviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` reviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of reviews.
     */
    distinct?: ReviewsScalarFieldEnum | ReviewsScalarFieldEnum[]
  }

  /**
   * reviews findMany
   */
  export type reviewsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the reviews
     */
    select?: reviewsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reviewsInclude<ExtArgs> | null
    /**
     * Filter, which reviews to fetch.
     */
    where?: reviewsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of reviews to fetch.
     */
    orderBy?: reviewsOrderByWithRelationInput | reviewsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing reviews.
     */
    cursor?: reviewsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` reviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` reviews.
     */
    skip?: number
    distinct?: ReviewsScalarFieldEnum | ReviewsScalarFieldEnum[]
  }

  /**
   * reviews create
   */
  export type reviewsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the reviews
     */
    select?: reviewsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reviewsInclude<ExtArgs> | null
    /**
     * The data needed to create a reviews.
     */
    data: XOR<reviewsCreateInput, reviewsUncheckedCreateInput>
  }

  /**
   * reviews createMany
   */
  export type reviewsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many reviews.
     */
    data: reviewsCreateManyInput | reviewsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * reviews update
   */
  export type reviewsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the reviews
     */
    select?: reviewsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reviewsInclude<ExtArgs> | null
    /**
     * The data needed to update a reviews.
     */
    data: XOR<reviewsUpdateInput, reviewsUncheckedUpdateInput>
    /**
     * Choose, which reviews to update.
     */
    where: reviewsWhereUniqueInput
  }

  /**
   * reviews updateMany
   */
  export type reviewsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update reviews.
     */
    data: XOR<reviewsUpdateManyMutationInput, reviewsUncheckedUpdateManyInput>
    /**
     * Filter which reviews to update
     */
    where?: reviewsWhereInput
  }

  /**
   * reviews upsert
   */
  export type reviewsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the reviews
     */
    select?: reviewsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reviewsInclude<ExtArgs> | null
    /**
     * The filter to search for the reviews to update in case it exists.
     */
    where: reviewsWhereUniqueInput
    /**
     * In case the reviews found by the `where` argument doesn't exist, create a new reviews with this data.
     */
    create: XOR<reviewsCreateInput, reviewsUncheckedCreateInput>
    /**
     * In case the reviews was found with the provided `where` argument, update it with this data.
     */
    update: XOR<reviewsUpdateInput, reviewsUncheckedUpdateInput>
  }

  /**
   * reviews delete
   */
  export type reviewsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the reviews
     */
    select?: reviewsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reviewsInclude<ExtArgs> | null
    /**
     * Filter which reviews to delete.
     */
    where: reviewsWhereUniqueInput
  }

  /**
   * reviews deleteMany
   */
  export type reviewsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which reviews to delete
     */
    where?: reviewsWhereInput
  }

  /**
   * reviews without action
   */
  export type reviewsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the reviews
     */
    select?: reviewsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reviewsInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const OrdersScalarFieldEnum: {
    order_id: 'order_id',
    UserID: 'UserID',
    order_date: 'order_date',
    order_status: 'order_status',
    total_amount: 'total_amount',
    shipping_method: 'shipping_method',
    shipping_price: 'shipping_price',
    full_name: 'full_name',
    shipping_address: 'shipping_address',
    phone_number: 'phone_number',
    discount_id: 'discount_id',
    original_amount: 'original_amount',
    discount_amount: 'discount_amount',
    final_amount: 'final_amount'
  };

  export type OrdersScalarFieldEnum = (typeof OrdersScalarFieldEnum)[keyof typeof OrdersScalarFieldEnum]


  export const DiscountsScalarFieldEnum: {
    discount_id: 'discount_id',
    discount_code: 'discount_code',
    discount_amount: 'discount_amount',
    status: 'status',
    discount_percent: 'discount_percent',
    expiration_date: 'expiration_date'
  };

  export type DiscountsScalarFieldEnum = (typeof DiscountsScalarFieldEnum)[keyof typeof DiscountsScalarFieldEnum]


  export const UserdiscountScalarFieldEnum: {
    user_discount_id: 'user_discount_id',
    UserID: 'UserID',
    discount_id: 'discount_id',
    created_at: 'created_at',
    status: 'status'
  };

  export type UserdiscountScalarFieldEnum = (typeof UserdiscountScalarFieldEnum)[keyof typeof UserdiscountScalarFieldEnum]


  export const OrderdetailScalarFieldEnum: {
    order_id: 'order_id',
    product_id: 'product_id',
    quantity: 'quantity',
    unit_price: 'unit_price'
  };

  export type OrderdetailScalarFieldEnum = (typeof OrderdetailScalarFieldEnum)[keyof typeof OrderdetailScalarFieldEnum]


  export const PaymentsScalarFieldEnum: {
    payment_id: 'payment_id',
    order_id: 'order_id',
    payment_method: 'payment_method',
    payment_date: 'payment_date',
    amount: 'amount',
    remark: 'remark',
    payment_status: 'payment_status',
    payment_Image: 'payment_Image'
  };

  export type PaymentsScalarFieldEnum = (typeof PaymentsScalarFieldEnum)[keyof typeof PaymentsScalarFieldEnum]


  export const UsersScalarFieldEnum: {
    UserName: 'UserName',
    UserID: 'UserID',
    Password: 'Password',
    Status: 'Status',
    Role: 'Role',
    resetToken: 'resetToken',
    resetTokenExpiry: 'resetTokenExpiry'
  };

  export type UsersScalarFieldEnum = (typeof UsersScalarFieldEnum)[keyof typeof UsersScalarFieldEnum]


  export const CategoriesScalarFieldEnum: {
    CategoriesID: 'CategoriesID',
    CategoriesName: 'CategoriesName'
  };

  export type CategoriesScalarFieldEnum = (typeof CategoriesScalarFieldEnum)[keyof typeof CategoriesScalarFieldEnum]


  export const ProductScalarFieldEnum: {
    product_id: 'product_id',
    name: 'name',
    description: 'description',
    price: 'price',
    CategoryID: 'CategoryID',
    size: 'size',
    Nutritional_value: 'Nutritional_value',
    taste: 'taste',
    image_url: 'image_url'
  };

  export type ProductScalarFieldEnum = (typeof ProductScalarFieldEnum)[keyof typeof ProductScalarFieldEnum]


  export const Health_infoScalarFieldEnum: {
    health_id: 'health_id',
    UserID: 'UserID',
    first_name: 'first_name',
    last_name: 'last_name',
    gender: 'gender',
    email: 'email',
    address: 'address',
    phone_number: 'phone_number',
    age: 'age',
    weight: 'weight',
    height: 'height',
    profile_image: 'profile_image'
  };

  export type Health_infoScalarFieldEnum = (typeof Health_infoScalarFieldEnum)[keyof typeof Health_infoScalarFieldEnum]


  export const ReviewsScalarFieldEnum: {
    ReviewID: 'ReviewID',
    product_id: 'product_id',
    UserID: 'UserID',
    Comment: 'Comment',
    Rating: 'Rating',
    CreatedAt: 'CreatedAt'
  };

  export type ReviewsScalarFieldEnum = (typeof ReviewsScalarFieldEnum)[keyof typeof ReviewsScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'orders_order_status'
   */
  export type Enumorders_order_statusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'orders_order_status'>
    


  /**
   * Reference to a field of type 'Decimal'
   */
  export type DecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal'>
    


  /**
   * Reference to a field of type 'shipping_shipping_status'
   */
  export type Enumshipping_shipping_statusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'shipping_shipping_status'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'discount_status'
   */
  export type Enumdiscount_statusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'discount_status'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'userdiscount_status'
   */
  export type Enumuserdiscount_statusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'userdiscount_status'>
    


  /**
   * Reference to a field of type 'payments_payment_status'
   */
  export type Enumpayments_payment_statusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'payments_payment_status'>
    
  /**
   * Deep Input Types
   */


  export type ordersWhereInput = {
    AND?: ordersWhereInput | ordersWhereInput[]
    OR?: ordersWhereInput[]
    NOT?: ordersWhereInput | ordersWhereInput[]
    order_id?: IntFilter<"orders"> | number
    UserID?: IntFilter<"orders"> | number
    order_date?: DateTimeFilter<"orders"> | Date | string
    order_status?: Enumorders_order_statusNullableFilter<"orders"> | $Enums.orders_order_status | null
    total_amount?: DecimalFilter<"orders"> | Decimal | DecimalJsLike | number | string
    shipping_method?: Enumshipping_shipping_statusNullableFilter<"orders"> | $Enums.shipping_shipping_status | null
    shipping_price?: DecimalFilter<"orders"> | Decimal | DecimalJsLike | number | string
    full_name?: StringFilter<"orders"> | string
    shipping_address?: StringFilter<"orders"> | string
    phone_number?: StringFilter<"orders"> | string
    discount_id?: IntNullableFilter<"orders"> | number | null
    original_amount?: DecimalNullableFilter<"orders"> | Decimal | DecimalJsLike | number | string | null
    discount_amount?: DecimalNullableFilter<"orders"> | Decimal | DecimalJsLike | number | string | null
    final_amount?: DecimalNullableFilter<"orders"> | Decimal | DecimalJsLike | number | string | null
    discount?: XOR<DiscountsNullableRelationFilter, discountsWhereInput> | null
    user?: XOR<UsersRelationFilter, usersWhereInput>
    orderdetails?: OrderdetailListRelationFilter
    payments?: PaymentsListRelationFilter
  }

  export type ordersOrderByWithRelationInput = {
    order_id?: SortOrder
    UserID?: SortOrder
    order_date?: SortOrder
    order_status?: SortOrderInput | SortOrder
    total_amount?: SortOrder
    shipping_method?: SortOrderInput | SortOrder
    shipping_price?: SortOrder
    full_name?: SortOrder
    shipping_address?: SortOrder
    phone_number?: SortOrder
    discount_id?: SortOrderInput | SortOrder
    original_amount?: SortOrderInput | SortOrder
    discount_amount?: SortOrderInput | SortOrder
    final_amount?: SortOrderInput | SortOrder
    discount?: discountsOrderByWithRelationInput
    user?: usersOrderByWithRelationInput
    orderdetails?: orderdetailOrderByRelationAggregateInput
    payments?: paymentsOrderByRelationAggregateInput
  }

  export type ordersWhereUniqueInput = Prisma.AtLeast<{
    order_id?: number
    AND?: ordersWhereInput | ordersWhereInput[]
    OR?: ordersWhereInput[]
    NOT?: ordersWhereInput | ordersWhereInput[]
    UserID?: IntFilter<"orders"> | number
    order_date?: DateTimeFilter<"orders"> | Date | string
    order_status?: Enumorders_order_statusNullableFilter<"orders"> | $Enums.orders_order_status | null
    total_amount?: DecimalFilter<"orders"> | Decimal | DecimalJsLike | number | string
    shipping_method?: Enumshipping_shipping_statusNullableFilter<"orders"> | $Enums.shipping_shipping_status | null
    shipping_price?: DecimalFilter<"orders"> | Decimal | DecimalJsLike | number | string
    full_name?: StringFilter<"orders"> | string
    shipping_address?: StringFilter<"orders"> | string
    phone_number?: StringFilter<"orders"> | string
    discount_id?: IntNullableFilter<"orders"> | number | null
    original_amount?: DecimalNullableFilter<"orders"> | Decimal | DecimalJsLike | number | string | null
    discount_amount?: DecimalNullableFilter<"orders"> | Decimal | DecimalJsLike | number | string | null
    final_amount?: DecimalNullableFilter<"orders"> | Decimal | DecimalJsLike | number | string | null
    discount?: XOR<DiscountsNullableRelationFilter, discountsWhereInput> | null
    user?: XOR<UsersRelationFilter, usersWhereInput>
    orderdetails?: OrderdetailListRelationFilter
    payments?: PaymentsListRelationFilter
  }, "order_id">

  export type ordersOrderByWithAggregationInput = {
    order_id?: SortOrder
    UserID?: SortOrder
    order_date?: SortOrder
    order_status?: SortOrderInput | SortOrder
    total_amount?: SortOrder
    shipping_method?: SortOrderInput | SortOrder
    shipping_price?: SortOrder
    full_name?: SortOrder
    shipping_address?: SortOrder
    phone_number?: SortOrder
    discount_id?: SortOrderInput | SortOrder
    original_amount?: SortOrderInput | SortOrder
    discount_amount?: SortOrderInput | SortOrder
    final_amount?: SortOrderInput | SortOrder
    _count?: ordersCountOrderByAggregateInput
    _avg?: ordersAvgOrderByAggregateInput
    _max?: ordersMaxOrderByAggregateInput
    _min?: ordersMinOrderByAggregateInput
    _sum?: ordersSumOrderByAggregateInput
  }

  export type ordersScalarWhereWithAggregatesInput = {
    AND?: ordersScalarWhereWithAggregatesInput | ordersScalarWhereWithAggregatesInput[]
    OR?: ordersScalarWhereWithAggregatesInput[]
    NOT?: ordersScalarWhereWithAggregatesInput | ordersScalarWhereWithAggregatesInput[]
    order_id?: IntWithAggregatesFilter<"orders"> | number
    UserID?: IntWithAggregatesFilter<"orders"> | number
    order_date?: DateTimeWithAggregatesFilter<"orders"> | Date | string
    order_status?: Enumorders_order_statusNullableWithAggregatesFilter<"orders"> | $Enums.orders_order_status | null
    total_amount?: DecimalWithAggregatesFilter<"orders"> | Decimal | DecimalJsLike | number | string
    shipping_method?: Enumshipping_shipping_statusNullableWithAggregatesFilter<"orders"> | $Enums.shipping_shipping_status | null
    shipping_price?: DecimalWithAggregatesFilter<"orders"> | Decimal | DecimalJsLike | number | string
    full_name?: StringWithAggregatesFilter<"orders"> | string
    shipping_address?: StringWithAggregatesFilter<"orders"> | string
    phone_number?: StringWithAggregatesFilter<"orders"> | string
    discount_id?: IntNullableWithAggregatesFilter<"orders"> | number | null
    original_amount?: DecimalNullableWithAggregatesFilter<"orders"> | Decimal | DecimalJsLike | number | string | null
    discount_amount?: DecimalNullableWithAggregatesFilter<"orders"> | Decimal | DecimalJsLike | number | string | null
    final_amount?: DecimalNullableWithAggregatesFilter<"orders"> | Decimal | DecimalJsLike | number | string | null
  }

  export type discountsWhereInput = {
    AND?: discountsWhereInput | discountsWhereInput[]
    OR?: discountsWhereInput[]
    NOT?: discountsWhereInput | discountsWhereInput[]
    discount_id?: IntFilter<"discounts"> | number
    discount_code?: StringFilter<"discounts"> | string
    discount_amount?: DecimalNullableFilter<"discounts"> | Decimal | DecimalJsLike | number | string | null
    status?: Enumdiscount_statusFilter<"discounts"> | $Enums.discount_status
    discount_percent?: FloatNullableFilter<"discounts"> | number | null
    expiration_date?: DateTimeNullableFilter<"discounts"> | Date | string | null
    orders?: OrdersListRelationFilter
    userdiscount?: UserdiscountListRelationFilter
  }

  export type discountsOrderByWithRelationInput = {
    discount_id?: SortOrder
    discount_code?: SortOrder
    discount_amount?: SortOrderInput | SortOrder
    status?: SortOrder
    discount_percent?: SortOrderInput | SortOrder
    expiration_date?: SortOrderInput | SortOrder
    orders?: ordersOrderByRelationAggregateInput
    userdiscount?: userdiscountOrderByRelationAggregateInput
  }

  export type discountsWhereUniqueInput = Prisma.AtLeast<{
    discount_id?: number
    discount_code?: string
    AND?: discountsWhereInput | discountsWhereInput[]
    OR?: discountsWhereInput[]
    NOT?: discountsWhereInput | discountsWhereInput[]
    discount_amount?: DecimalNullableFilter<"discounts"> | Decimal | DecimalJsLike | number | string | null
    status?: Enumdiscount_statusFilter<"discounts"> | $Enums.discount_status
    discount_percent?: FloatNullableFilter<"discounts"> | number | null
    expiration_date?: DateTimeNullableFilter<"discounts"> | Date | string | null
    orders?: OrdersListRelationFilter
    userdiscount?: UserdiscountListRelationFilter
  }, "discount_id" | "discount_code">

  export type discountsOrderByWithAggregationInput = {
    discount_id?: SortOrder
    discount_code?: SortOrder
    discount_amount?: SortOrderInput | SortOrder
    status?: SortOrder
    discount_percent?: SortOrderInput | SortOrder
    expiration_date?: SortOrderInput | SortOrder
    _count?: discountsCountOrderByAggregateInput
    _avg?: discountsAvgOrderByAggregateInput
    _max?: discountsMaxOrderByAggregateInput
    _min?: discountsMinOrderByAggregateInput
    _sum?: discountsSumOrderByAggregateInput
  }

  export type discountsScalarWhereWithAggregatesInput = {
    AND?: discountsScalarWhereWithAggregatesInput | discountsScalarWhereWithAggregatesInput[]
    OR?: discountsScalarWhereWithAggregatesInput[]
    NOT?: discountsScalarWhereWithAggregatesInput | discountsScalarWhereWithAggregatesInput[]
    discount_id?: IntWithAggregatesFilter<"discounts"> | number
    discount_code?: StringWithAggregatesFilter<"discounts"> | string
    discount_amount?: DecimalNullableWithAggregatesFilter<"discounts"> | Decimal | DecimalJsLike | number | string | null
    status?: Enumdiscount_statusWithAggregatesFilter<"discounts"> | $Enums.discount_status
    discount_percent?: FloatNullableWithAggregatesFilter<"discounts"> | number | null
    expiration_date?: DateTimeNullableWithAggregatesFilter<"discounts"> | Date | string | null
  }

  export type userdiscountWhereInput = {
    AND?: userdiscountWhereInput | userdiscountWhereInput[]
    OR?: userdiscountWhereInput[]
    NOT?: userdiscountWhereInput | userdiscountWhereInput[]
    user_discount_id?: IntFilter<"userdiscount"> | number
    UserID?: IntFilter<"userdiscount"> | number
    discount_id?: IntFilter<"userdiscount"> | number
    created_at?: DateTimeFilter<"userdiscount"> | Date | string
    status?: Enumuserdiscount_statusFilter<"userdiscount"> | $Enums.userdiscount_status
    user?: XOR<UsersRelationFilter, usersWhereInput>
    discount?: XOR<DiscountsRelationFilter, discountsWhereInput>
  }

  export type userdiscountOrderByWithRelationInput = {
    user_discount_id?: SortOrder
    UserID?: SortOrder
    discount_id?: SortOrder
    created_at?: SortOrder
    status?: SortOrder
    user?: usersOrderByWithRelationInput
    discount?: discountsOrderByWithRelationInput
  }

  export type userdiscountWhereUniqueInput = Prisma.AtLeast<{
    user_discount_id?: number
    AND?: userdiscountWhereInput | userdiscountWhereInput[]
    OR?: userdiscountWhereInput[]
    NOT?: userdiscountWhereInput | userdiscountWhereInput[]
    UserID?: IntFilter<"userdiscount"> | number
    discount_id?: IntFilter<"userdiscount"> | number
    created_at?: DateTimeFilter<"userdiscount"> | Date | string
    status?: Enumuserdiscount_statusFilter<"userdiscount"> | $Enums.userdiscount_status
    user?: XOR<UsersRelationFilter, usersWhereInput>
    discount?: XOR<DiscountsRelationFilter, discountsWhereInput>
  }, "user_discount_id">

  export type userdiscountOrderByWithAggregationInput = {
    user_discount_id?: SortOrder
    UserID?: SortOrder
    discount_id?: SortOrder
    created_at?: SortOrder
    status?: SortOrder
    _count?: userdiscountCountOrderByAggregateInput
    _avg?: userdiscountAvgOrderByAggregateInput
    _max?: userdiscountMaxOrderByAggregateInput
    _min?: userdiscountMinOrderByAggregateInput
    _sum?: userdiscountSumOrderByAggregateInput
  }

  export type userdiscountScalarWhereWithAggregatesInput = {
    AND?: userdiscountScalarWhereWithAggregatesInput | userdiscountScalarWhereWithAggregatesInput[]
    OR?: userdiscountScalarWhereWithAggregatesInput[]
    NOT?: userdiscountScalarWhereWithAggregatesInput | userdiscountScalarWhereWithAggregatesInput[]
    user_discount_id?: IntWithAggregatesFilter<"userdiscount"> | number
    UserID?: IntWithAggregatesFilter<"userdiscount"> | number
    discount_id?: IntWithAggregatesFilter<"userdiscount"> | number
    created_at?: DateTimeWithAggregatesFilter<"userdiscount"> | Date | string
    status?: Enumuserdiscount_statusWithAggregatesFilter<"userdiscount"> | $Enums.userdiscount_status
  }

  export type orderdetailWhereInput = {
    AND?: orderdetailWhereInput | orderdetailWhereInput[]
    OR?: orderdetailWhereInput[]
    NOT?: orderdetailWhereInput | orderdetailWhereInput[]
    order_id?: IntFilter<"orderdetail"> | number
    product_id?: IntFilter<"orderdetail"> | number
    quantity?: IntFilter<"orderdetail"> | number
    unit_price?: DecimalFilter<"orderdetail"> | Decimal | DecimalJsLike | number | string
    orders?: XOR<OrdersRelationFilter, ordersWhereInput>
    product?: XOR<ProductRelationFilter, ProductWhereInput>
  }

  export type orderdetailOrderByWithRelationInput = {
    order_id?: SortOrder
    product_id?: SortOrder
    quantity?: SortOrder
    unit_price?: SortOrder
    orders?: ordersOrderByWithRelationInput
    product?: ProductOrderByWithRelationInput
  }

  export type orderdetailWhereUniqueInput = Prisma.AtLeast<{
    order_id_product_id?: orderdetailOrder_idProduct_idCompoundUniqueInput
    AND?: orderdetailWhereInput | orderdetailWhereInput[]
    OR?: orderdetailWhereInput[]
    NOT?: orderdetailWhereInput | orderdetailWhereInput[]
    order_id?: IntFilter<"orderdetail"> | number
    product_id?: IntFilter<"orderdetail"> | number
    quantity?: IntFilter<"orderdetail"> | number
    unit_price?: DecimalFilter<"orderdetail"> | Decimal | DecimalJsLike | number | string
    orders?: XOR<OrdersRelationFilter, ordersWhereInput>
    product?: XOR<ProductRelationFilter, ProductWhereInput>
  }, "order_id_product_id">

  export type orderdetailOrderByWithAggregationInput = {
    order_id?: SortOrder
    product_id?: SortOrder
    quantity?: SortOrder
    unit_price?: SortOrder
    _count?: orderdetailCountOrderByAggregateInput
    _avg?: orderdetailAvgOrderByAggregateInput
    _max?: orderdetailMaxOrderByAggregateInput
    _min?: orderdetailMinOrderByAggregateInput
    _sum?: orderdetailSumOrderByAggregateInput
  }

  export type orderdetailScalarWhereWithAggregatesInput = {
    AND?: orderdetailScalarWhereWithAggregatesInput | orderdetailScalarWhereWithAggregatesInput[]
    OR?: orderdetailScalarWhereWithAggregatesInput[]
    NOT?: orderdetailScalarWhereWithAggregatesInput | orderdetailScalarWhereWithAggregatesInput[]
    order_id?: IntWithAggregatesFilter<"orderdetail"> | number
    product_id?: IntWithAggregatesFilter<"orderdetail"> | number
    quantity?: IntWithAggregatesFilter<"orderdetail"> | number
    unit_price?: DecimalWithAggregatesFilter<"orderdetail"> | Decimal | DecimalJsLike | number | string
  }

  export type paymentsWhereInput = {
    AND?: paymentsWhereInput | paymentsWhereInput[]
    OR?: paymentsWhereInput[]
    NOT?: paymentsWhereInput | paymentsWhereInput[]
    payment_id?: IntFilter<"payments"> | number
    order_id?: IntFilter<"payments"> | number
    payment_method?: StringNullableFilter<"payments"> | string | null
    payment_date?: DateTimeNullableFilter<"payments"> | Date | string | null
    amount?: DecimalFilter<"payments"> | Decimal | DecimalJsLike | number | string
    remark?: StringNullableFilter<"payments"> | string | null
    payment_status?: Enumpayments_payment_statusNullableFilter<"payments"> | $Enums.payments_payment_status | null
    payment_Image?: StringNullableFilter<"payments"> | string | null
    orders?: XOR<OrdersRelationFilter, ordersWhereInput>
  }

  export type paymentsOrderByWithRelationInput = {
    payment_id?: SortOrder
    order_id?: SortOrder
    payment_method?: SortOrderInput | SortOrder
    payment_date?: SortOrderInput | SortOrder
    amount?: SortOrder
    remark?: SortOrderInput | SortOrder
    payment_status?: SortOrderInput | SortOrder
    payment_Image?: SortOrderInput | SortOrder
    orders?: ordersOrderByWithRelationInput
  }

  export type paymentsWhereUniqueInput = Prisma.AtLeast<{
    payment_id?: number
    AND?: paymentsWhereInput | paymentsWhereInput[]
    OR?: paymentsWhereInput[]
    NOT?: paymentsWhereInput | paymentsWhereInput[]
    order_id?: IntFilter<"payments"> | number
    payment_method?: StringNullableFilter<"payments"> | string | null
    payment_date?: DateTimeNullableFilter<"payments"> | Date | string | null
    amount?: DecimalFilter<"payments"> | Decimal | DecimalJsLike | number | string
    remark?: StringNullableFilter<"payments"> | string | null
    payment_status?: Enumpayments_payment_statusNullableFilter<"payments"> | $Enums.payments_payment_status | null
    payment_Image?: StringNullableFilter<"payments"> | string | null
    orders?: XOR<OrdersRelationFilter, ordersWhereInput>
  }, "payment_id">

  export type paymentsOrderByWithAggregationInput = {
    payment_id?: SortOrder
    order_id?: SortOrder
    payment_method?: SortOrderInput | SortOrder
    payment_date?: SortOrderInput | SortOrder
    amount?: SortOrder
    remark?: SortOrderInput | SortOrder
    payment_status?: SortOrderInput | SortOrder
    payment_Image?: SortOrderInput | SortOrder
    _count?: paymentsCountOrderByAggregateInput
    _avg?: paymentsAvgOrderByAggregateInput
    _max?: paymentsMaxOrderByAggregateInput
    _min?: paymentsMinOrderByAggregateInput
    _sum?: paymentsSumOrderByAggregateInput
  }

  export type paymentsScalarWhereWithAggregatesInput = {
    AND?: paymentsScalarWhereWithAggregatesInput | paymentsScalarWhereWithAggregatesInput[]
    OR?: paymentsScalarWhereWithAggregatesInput[]
    NOT?: paymentsScalarWhereWithAggregatesInput | paymentsScalarWhereWithAggregatesInput[]
    payment_id?: IntWithAggregatesFilter<"payments"> | number
    order_id?: IntWithAggregatesFilter<"payments"> | number
    payment_method?: StringNullableWithAggregatesFilter<"payments"> | string | null
    payment_date?: DateTimeNullableWithAggregatesFilter<"payments"> | Date | string | null
    amount?: DecimalWithAggregatesFilter<"payments"> | Decimal | DecimalJsLike | number | string
    remark?: StringNullableWithAggregatesFilter<"payments"> | string | null
    payment_status?: Enumpayments_payment_statusNullableWithAggregatesFilter<"payments"> | $Enums.payments_payment_status | null
    payment_Image?: StringNullableWithAggregatesFilter<"payments"> | string | null
  }

  export type usersWhereInput = {
    AND?: usersWhereInput | usersWhereInput[]
    OR?: usersWhereInput[]
    NOT?: usersWhereInput | usersWhereInput[]
    UserName?: StringFilter<"users"> | string
    UserID?: IntFilter<"users"> | number
    Password?: StringFilter<"users"> | string
    Status?: StringNullableFilter<"users"> | string | null
    Role?: StringNullableFilter<"users"> | string | null
    resetToken?: StringNullableFilter<"users"> | string | null
    resetTokenExpiry?: DateTimeNullableFilter<"users"> | Date | string | null
    orders?: OrdersListRelationFilter
    reviews?: ReviewsListRelationFilter
    userdiscount?: UserdiscountListRelationFilter
    healthInfo?: XOR<Health_infoNullableRelationFilter, health_infoWhereInput> | null
  }

  export type usersOrderByWithRelationInput = {
    UserName?: SortOrder
    UserID?: SortOrder
    Password?: SortOrder
    Status?: SortOrderInput | SortOrder
    Role?: SortOrderInput | SortOrder
    resetToken?: SortOrderInput | SortOrder
    resetTokenExpiry?: SortOrderInput | SortOrder
    orders?: ordersOrderByRelationAggregateInput
    reviews?: reviewsOrderByRelationAggregateInput
    userdiscount?: userdiscountOrderByRelationAggregateInput
    healthInfo?: health_infoOrderByWithRelationInput
  }

  export type usersWhereUniqueInput = Prisma.AtLeast<{
    UserName?: string
    UserID?: number
    AND?: usersWhereInput | usersWhereInput[]
    OR?: usersWhereInput[]
    NOT?: usersWhereInput | usersWhereInput[]
    Password?: StringFilter<"users"> | string
    Status?: StringNullableFilter<"users"> | string | null
    Role?: StringNullableFilter<"users"> | string | null
    resetToken?: StringNullableFilter<"users"> | string | null
    resetTokenExpiry?: DateTimeNullableFilter<"users"> | Date | string | null
    orders?: OrdersListRelationFilter
    reviews?: ReviewsListRelationFilter
    userdiscount?: UserdiscountListRelationFilter
    healthInfo?: XOR<Health_infoNullableRelationFilter, health_infoWhereInput> | null
  }, "UserID" | "UserName">

  export type usersOrderByWithAggregationInput = {
    UserName?: SortOrder
    UserID?: SortOrder
    Password?: SortOrder
    Status?: SortOrderInput | SortOrder
    Role?: SortOrderInput | SortOrder
    resetToken?: SortOrderInput | SortOrder
    resetTokenExpiry?: SortOrderInput | SortOrder
    _count?: usersCountOrderByAggregateInput
    _avg?: usersAvgOrderByAggregateInput
    _max?: usersMaxOrderByAggregateInput
    _min?: usersMinOrderByAggregateInput
    _sum?: usersSumOrderByAggregateInput
  }

  export type usersScalarWhereWithAggregatesInput = {
    AND?: usersScalarWhereWithAggregatesInput | usersScalarWhereWithAggregatesInput[]
    OR?: usersScalarWhereWithAggregatesInput[]
    NOT?: usersScalarWhereWithAggregatesInput | usersScalarWhereWithAggregatesInput[]
    UserName?: StringWithAggregatesFilter<"users"> | string
    UserID?: IntWithAggregatesFilter<"users"> | number
    Password?: StringWithAggregatesFilter<"users"> | string
    Status?: StringNullableWithAggregatesFilter<"users"> | string | null
    Role?: StringNullableWithAggregatesFilter<"users"> | string | null
    resetToken?: StringNullableWithAggregatesFilter<"users"> | string | null
    resetTokenExpiry?: DateTimeNullableWithAggregatesFilter<"users"> | Date | string | null
  }

  export type categoriesWhereInput = {
    AND?: categoriesWhereInput | categoriesWhereInput[]
    OR?: categoriesWhereInput[]
    NOT?: categoriesWhereInput | categoriesWhereInput[]
    CategoriesID?: IntFilter<"categories"> | number
    CategoriesName?: StringNullableFilter<"categories"> | string | null
    Product?: ProductListRelationFilter
  }

  export type categoriesOrderByWithRelationInput = {
    CategoriesID?: SortOrder
    CategoriesName?: SortOrderInput | SortOrder
    Product?: ProductOrderByRelationAggregateInput
  }

  export type categoriesWhereUniqueInput = Prisma.AtLeast<{
    CategoriesID?: number
    AND?: categoriesWhereInput | categoriesWhereInput[]
    OR?: categoriesWhereInput[]
    NOT?: categoriesWhereInput | categoriesWhereInput[]
    CategoriesName?: StringNullableFilter<"categories"> | string | null
    Product?: ProductListRelationFilter
  }, "CategoriesID">

  export type categoriesOrderByWithAggregationInput = {
    CategoriesID?: SortOrder
    CategoriesName?: SortOrderInput | SortOrder
    _count?: categoriesCountOrderByAggregateInput
    _avg?: categoriesAvgOrderByAggregateInput
    _max?: categoriesMaxOrderByAggregateInput
    _min?: categoriesMinOrderByAggregateInput
    _sum?: categoriesSumOrderByAggregateInput
  }

  export type categoriesScalarWhereWithAggregatesInput = {
    AND?: categoriesScalarWhereWithAggregatesInput | categoriesScalarWhereWithAggregatesInput[]
    OR?: categoriesScalarWhereWithAggregatesInput[]
    NOT?: categoriesScalarWhereWithAggregatesInput | categoriesScalarWhereWithAggregatesInput[]
    CategoriesID?: IntWithAggregatesFilter<"categories"> | number
    CategoriesName?: StringNullableWithAggregatesFilter<"categories"> | string | null
  }

  export type ProductWhereInput = {
    AND?: ProductWhereInput | ProductWhereInput[]
    OR?: ProductWhereInput[]
    NOT?: ProductWhereInput | ProductWhereInput[]
    product_id?: IntFilter<"Product"> | number
    name?: StringFilter<"Product"> | string
    description?: StringFilter<"Product"> | string
    price?: FloatFilter<"Product"> | number
    CategoryID?: IntNullableFilter<"Product"> | number | null
    size?: FloatFilter<"Product"> | number
    Nutritional_value?: StringFilter<"Product"> | string
    taste?: StringFilter<"Product"> | string
    image_url?: StringFilter<"Product"> | string
    orderdetails?: OrderdetailListRelationFilter
    reviews?: ReviewsListRelationFilter
    categories?: XOR<CategoriesNullableRelationFilter, categoriesWhereInput> | null
  }

  export type ProductOrderByWithRelationInput = {
    product_id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    price?: SortOrder
    CategoryID?: SortOrderInput | SortOrder
    size?: SortOrder
    Nutritional_value?: SortOrder
    taste?: SortOrder
    image_url?: SortOrder
    orderdetails?: orderdetailOrderByRelationAggregateInput
    reviews?: reviewsOrderByRelationAggregateInput
    categories?: categoriesOrderByWithRelationInput
  }

  export type ProductWhereUniqueInput = Prisma.AtLeast<{
    product_id?: number
    AND?: ProductWhereInput | ProductWhereInput[]
    OR?: ProductWhereInput[]
    NOT?: ProductWhereInput | ProductWhereInput[]
    name?: StringFilter<"Product"> | string
    description?: StringFilter<"Product"> | string
    price?: FloatFilter<"Product"> | number
    CategoryID?: IntNullableFilter<"Product"> | number | null
    size?: FloatFilter<"Product"> | number
    Nutritional_value?: StringFilter<"Product"> | string
    taste?: StringFilter<"Product"> | string
    image_url?: StringFilter<"Product"> | string
    orderdetails?: OrderdetailListRelationFilter
    reviews?: ReviewsListRelationFilter
    categories?: XOR<CategoriesNullableRelationFilter, categoriesWhereInput> | null
  }, "product_id">

  export type ProductOrderByWithAggregationInput = {
    product_id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    price?: SortOrder
    CategoryID?: SortOrderInput | SortOrder
    size?: SortOrder
    Nutritional_value?: SortOrder
    taste?: SortOrder
    image_url?: SortOrder
    _count?: ProductCountOrderByAggregateInput
    _avg?: ProductAvgOrderByAggregateInput
    _max?: ProductMaxOrderByAggregateInput
    _min?: ProductMinOrderByAggregateInput
    _sum?: ProductSumOrderByAggregateInput
  }

  export type ProductScalarWhereWithAggregatesInput = {
    AND?: ProductScalarWhereWithAggregatesInput | ProductScalarWhereWithAggregatesInput[]
    OR?: ProductScalarWhereWithAggregatesInput[]
    NOT?: ProductScalarWhereWithAggregatesInput | ProductScalarWhereWithAggregatesInput[]
    product_id?: IntWithAggregatesFilter<"Product"> | number
    name?: StringWithAggregatesFilter<"Product"> | string
    description?: StringWithAggregatesFilter<"Product"> | string
    price?: FloatWithAggregatesFilter<"Product"> | number
    CategoryID?: IntNullableWithAggregatesFilter<"Product"> | number | null
    size?: FloatWithAggregatesFilter<"Product"> | number
    Nutritional_value?: StringWithAggregatesFilter<"Product"> | string
    taste?: StringWithAggregatesFilter<"Product"> | string
    image_url?: StringWithAggregatesFilter<"Product"> | string
  }

  export type health_infoWhereInput = {
    AND?: health_infoWhereInput | health_infoWhereInput[]
    OR?: health_infoWhereInput[]
    NOT?: health_infoWhereInput | health_infoWhereInput[]
    health_id?: IntFilter<"health_info"> | number
    UserID?: IntFilter<"health_info"> | number
    first_name?: StringFilter<"health_info"> | string
    last_name?: StringFilter<"health_info"> | string
    gender?: StringFilter<"health_info"> | string
    email?: StringNullableFilter<"health_info"> | string | null
    address?: StringNullableFilter<"health_info"> | string | null
    phone_number?: StringNullableFilter<"health_info"> | string | null
    age?: IntFilter<"health_info"> | number
    weight?: FloatFilter<"health_info"> | number
    height?: FloatFilter<"health_info"> | number
    profile_image?: StringNullableFilter<"health_info"> | string | null
    user?: XOR<UsersRelationFilter, usersWhereInput>
  }

  export type health_infoOrderByWithRelationInput = {
    health_id?: SortOrder
    UserID?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    gender?: SortOrder
    email?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    phone_number?: SortOrderInput | SortOrder
    age?: SortOrder
    weight?: SortOrder
    height?: SortOrder
    profile_image?: SortOrderInput | SortOrder
    user?: usersOrderByWithRelationInput
  }

  export type health_infoWhereUniqueInput = Prisma.AtLeast<{
    health_id?: number
    UserID?: number
    email?: string
    AND?: health_infoWhereInput | health_infoWhereInput[]
    OR?: health_infoWhereInput[]
    NOT?: health_infoWhereInput | health_infoWhereInput[]
    first_name?: StringFilter<"health_info"> | string
    last_name?: StringFilter<"health_info"> | string
    gender?: StringFilter<"health_info"> | string
    address?: StringNullableFilter<"health_info"> | string | null
    phone_number?: StringNullableFilter<"health_info"> | string | null
    age?: IntFilter<"health_info"> | number
    weight?: FloatFilter<"health_info"> | number
    height?: FloatFilter<"health_info"> | number
    profile_image?: StringNullableFilter<"health_info"> | string | null
    user?: XOR<UsersRelationFilter, usersWhereInput>
  }, "health_id" | "UserID" | "email">

  export type health_infoOrderByWithAggregationInput = {
    health_id?: SortOrder
    UserID?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    gender?: SortOrder
    email?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    phone_number?: SortOrderInput | SortOrder
    age?: SortOrder
    weight?: SortOrder
    height?: SortOrder
    profile_image?: SortOrderInput | SortOrder
    _count?: health_infoCountOrderByAggregateInput
    _avg?: health_infoAvgOrderByAggregateInput
    _max?: health_infoMaxOrderByAggregateInput
    _min?: health_infoMinOrderByAggregateInput
    _sum?: health_infoSumOrderByAggregateInput
  }

  export type health_infoScalarWhereWithAggregatesInput = {
    AND?: health_infoScalarWhereWithAggregatesInput | health_infoScalarWhereWithAggregatesInput[]
    OR?: health_infoScalarWhereWithAggregatesInput[]
    NOT?: health_infoScalarWhereWithAggregatesInput | health_infoScalarWhereWithAggregatesInput[]
    health_id?: IntWithAggregatesFilter<"health_info"> | number
    UserID?: IntWithAggregatesFilter<"health_info"> | number
    first_name?: StringWithAggregatesFilter<"health_info"> | string
    last_name?: StringWithAggregatesFilter<"health_info"> | string
    gender?: StringWithAggregatesFilter<"health_info"> | string
    email?: StringNullableWithAggregatesFilter<"health_info"> | string | null
    address?: StringNullableWithAggregatesFilter<"health_info"> | string | null
    phone_number?: StringNullableWithAggregatesFilter<"health_info"> | string | null
    age?: IntWithAggregatesFilter<"health_info"> | number
    weight?: FloatWithAggregatesFilter<"health_info"> | number
    height?: FloatWithAggregatesFilter<"health_info"> | number
    profile_image?: StringNullableWithAggregatesFilter<"health_info"> | string | null
  }

  export type reviewsWhereInput = {
    AND?: reviewsWhereInput | reviewsWhereInput[]
    OR?: reviewsWhereInput[]
    NOT?: reviewsWhereInput | reviewsWhereInput[]
    ReviewID?: IntFilter<"reviews"> | number
    product_id?: IntFilter<"reviews"> | number
    UserID?: IntFilter<"reviews"> | number
    Comment?: StringNullableFilter<"reviews"> | string | null
    Rating?: IntNullableFilter<"reviews"> | number | null
    CreatedAt?: DateTimeNullableFilter<"reviews"> | Date | string | null
    user?: XOR<UsersRelationFilter, usersWhereInput>
    product?: XOR<ProductRelationFilter, ProductWhereInput>
  }

  export type reviewsOrderByWithRelationInput = {
    ReviewID?: SortOrder
    product_id?: SortOrder
    UserID?: SortOrder
    Comment?: SortOrderInput | SortOrder
    Rating?: SortOrderInput | SortOrder
    CreatedAt?: SortOrderInput | SortOrder
    user?: usersOrderByWithRelationInput
    product?: ProductOrderByWithRelationInput
  }

  export type reviewsWhereUniqueInput = Prisma.AtLeast<{
    ReviewID?: number
    AND?: reviewsWhereInput | reviewsWhereInput[]
    OR?: reviewsWhereInput[]
    NOT?: reviewsWhereInput | reviewsWhereInput[]
    product_id?: IntFilter<"reviews"> | number
    UserID?: IntFilter<"reviews"> | number
    Comment?: StringNullableFilter<"reviews"> | string | null
    Rating?: IntNullableFilter<"reviews"> | number | null
    CreatedAt?: DateTimeNullableFilter<"reviews"> | Date | string | null
    user?: XOR<UsersRelationFilter, usersWhereInput>
    product?: XOR<ProductRelationFilter, ProductWhereInput>
  }, "ReviewID">

  export type reviewsOrderByWithAggregationInput = {
    ReviewID?: SortOrder
    product_id?: SortOrder
    UserID?: SortOrder
    Comment?: SortOrderInput | SortOrder
    Rating?: SortOrderInput | SortOrder
    CreatedAt?: SortOrderInput | SortOrder
    _count?: reviewsCountOrderByAggregateInput
    _avg?: reviewsAvgOrderByAggregateInput
    _max?: reviewsMaxOrderByAggregateInput
    _min?: reviewsMinOrderByAggregateInput
    _sum?: reviewsSumOrderByAggregateInput
  }

  export type reviewsScalarWhereWithAggregatesInput = {
    AND?: reviewsScalarWhereWithAggregatesInput | reviewsScalarWhereWithAggregatesInput[]
    OR?: reviewsScalarWhereWithAggregatesInput[]
    NOT?: reviewsScalarWhereWithAggregatesInput | reviewsScalarWhereWithAggregatesInput[]
    ReviewID?: IntWithAggregatesFilter<"reviews"> | number
    product_id?: IntWithAggregatesFilter<"reviews"> | number
    UserID?: IntWithAggregatesFilter<"reviews"> | number
    Comment?: StringNullableWithAggregatesFilter<"reviews"> | string | null
    Rating?: IntNullableWithAggregatesFilter<"reviews"> | number | null
    CreatedAt?: DateTimeNullableWithAggregatesFilter<"reviews"> | Date | string | null
  }

  export type ordersCreateInput = {
    order_date?: Date | string
    order_status?: $Enums.orders_order_status | null
    total_amount: Decimal | DecimalJsLike | number | string
    shipping_method?: $Enums.shipping_shipping_status | null
    shipping_price: Decimal | DecimalJsLike | number | string
    full_name: string
    shipping_address: string
    phone_number: string
    original_amount?: Decimal | DecimalJsLike | number | string | null
    discount_amount?: Decimal | DecimalJsLike | number | string | null
    final_amount?: Decimal | DecimalJsLike | number | string | null
    discount?: discountsCreateNestedOneWithoutOrdersInput
    user: usersCreateNestedOneWithoutOrdersInput
    orderdetails?: orderdetailCreateNestedManyWithoutOrdersInput
    payments?: paymentsCreateNestedManyWithoutOrdersInput
  }

  export type ordersUncheckedCreateInput = {
    order_id?: number
    UserID: number
    order_date?: Date | string
    order_status?: $Enums.orders_order_status | null
    total_amount: Decimal | DecimalJsLike | number | string
    shipping_method?: $Enums.shipping_shipping_status | null
    shipping_price: Decimal | DecimalJsLike | number | string
    full_name: string
    shipping_address: string
    phone_number: string
    discount_id?: number | null
    original_amount?: Decimal | DecimalJsLike | number | string | null
    discount_amount?: Decimal | DecimalJsLike | number | string | null
    final_amount?: Decimal | DecimalJsLike | number | string | null
    orderdetails?: orderdetailUncheckedCreateNestedManyWithoutOrdersInput
    payments?: paymentsUncheckedCreateNestedManyWithoutOrdersInput
  }

  export type ordersUpdateInput = {
    order_date?: DateTimeFieldUpdateOperationsInput | Date | string
    order_status?: NullableEnumorders_order_statusFieldUpdateOperationsInput | $Enums.orders_order_status | null
    total_amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    shipping_method?: NullableEnumshipping_shipping_statusFieldUpdateOperationsInput | $Enums.shipping_shipping_status | null
    shipping_price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    full_name?: StringFieldUpdateOperationsInput | string
    shipping_address?: StringFieldUpdateOperationsInput | string
    phone_number?: StringFieldUpdateOperationsInput | string
    original_amount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    discount_amount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    final_amount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    discount?: discountsUpdateOneWithoutOrdersNestedInput
    user?: usersUpdateOneRequiredWithoutOrdersNestedInput
    orderdetails?: orderdetailUpdateManyWithoutOrdersNestedInput
    payments?: paymentsUpdateManyWithoutOrdersNestedInput
  }

  export type ordersUncheckedUpdateInput = {
    order_id?: IntFieldUpdateOperationsInput | number
    UserID?: IntFieldUpdateOperationsInput | number
    order_date?: DateTimeFieldUpdateOperationsInput | Date | string
    order_status?: NullableEnumorders_order_statusFieldUpdateOperationsInput | $Enums.orders_order_status | null
    total_amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    shipping_method?: NullableEnumshipping_shipping_statusFieldUpdateOperationsInput | $Enums.shipping_shipping_status | null
    shipping_price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    full_name?: StringFieldUpdateOperationsInput | string
    shipping_address?: StringFieldUpdateOperationsInput | string
    phone_number?: StringFieldUpdateOperationsInput | string
    discount_id?: NullableIntFieldUpdateOperationsInput | number | null
    original_amount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    discount_amount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    final_amount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    orderdetails?: orderdetailUncheckedUpdateManyWithoutOrdersNestedInput
    payments?: paymentsUncheckedUpdateManyWithoutOrdersNestedInput
  }

  export type ordersCreateManyInput = {
    order_id?: number
    UserID: number
    order_date?: Date | string
    order_status?: $Enums.orders_order_status | null
    total_amount: Decimal | DecimalJsLike | number | string
    shipping_method?: $Enums.shipping_shipping_status | null
    shipping_price: Decimal | DecimalJsLike | number | string
    full_name: string
    shipping_address: string
    phone_number: string
    discount_id?: number | null
    original_amount?: Decimal | DecimalJsLike | number | string | null
    discount_amount?: Decimal | DecimalJsLike | number | string | null
    final_amount?: Decimal | DecimalJsLike | number | string | null
  }

  export type ordersUpdateManyMutationInput = {
    order_date?: DateTimeFieldUpdateOperationsInput | Date | string
    order_status?: NullableEnumorders_order_statusFieldUpdateOperationsInput | $Enums.orders_order_status | null
    total_amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    shipping_method?: NullableEnumshipping_shipping_statusFieldUpdateOperationsInput | $Enums.shipping_shipping_status | null
    shipping_price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    full_name?: StringFieldUpdateOperationsInput | string
    shipping_address?: StringFieldUpdateOperationsInput | string
    phone_number?: StringFieldUpdateOperationsInput | string
    original_amount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    discount_amount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    final_amount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type ordersUncheckedUpdateManyInput = {
    order_id?: IntFieldUpdateOperationsInput | number
    UserID?: IntFieldUpdateOperationsInput | number
    order_date?: DateTimeFieldUpdateOperationsInput | Date | string
    order_status?: NullableEnumorders_order_statusFieldUpdateOperationsInput | $Enums.orders_order_status | null
    total_amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    shipping_method?: NullableEnumshipping_shipping_statusFieldUpdateOperationsInput | $Enums.shipping_shipping_status | null
    shipping_price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    full_name?: StringFieldUpdateOperationsInput | string
    shipping_address?: StringFieldUpdateOperationsInput | string
    phone_number?: StringFieldUpdateOperationsInput | string
    discount_id?: NullableIntFieldUpdateOperationsInput | number | null
    original_amount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    discount_amount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    final_amount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type discountsCreateInput = {
    discount_code: string
    discount_amount?: Decimal | DecimalJsLike | number | string | null
    status?: $Enums.discount_status
    discount_percent?: number | null
    expiration_date?: Date | string | null
    orders?: ordersCreateNestedManyWithoutDiscountInput
    userdiscount?: userdiscountCreateNestedManyWithoutDiscountInput
  }

  export type discountsUncheckedCreateInput = {
    discount_id?: number
    discount_code: string
    discount_amount?: Decimal | DecimalJsLike | number | string | null
    status?: $Enums.discount_status
    discount_percent?: number | null
    expiration_date?: Date | string | null
    orders?: ordersUncheckedCreateNestedManyWithoutDiscountInput
    userdiscount?: userdiscountUncheckedCreateNestedManyWithoutDiscountInput
  }

  export type discountsUpdateInput = {
    discount_code?: StringFieldUpdateOperationsInput | string
    discount_amount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    status?: Enumdiscount_statusFieldUpdateOperationsInput | $Enums.discount_status
    discount_percent?: NullableFloatFieldUpdateOperationsInput | number | null
    expiration_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    orders?: ordersUpdateManyWithoutDiscountNestedInput
    userdiscount?: userdiscountUpdateManyWithoutDiscountNestedInput
  }

  export type discountsUncheckedUpdateInput = {
    discount_id?: IntFieldUpdateOperationsInput | number
    discount_code?: StringFieldUpdateOperationsInput | string
    discount_amount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    status?: Enumdiscount_statusFieldUpdateOperationsInput | $Enums.discount_status
    discount_percent?: NullableFloatFieldUpdateOperationsInput | number | null
    expiration_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    orders?: ordersUncheckedUpdateManyWithoutDiscountNestedInput
    userdiscount?: userdiscountUncheckedUpdateManyWithoutDiscountNestedInput
  }

  export type discountsCreateManyInput = {
    discount_id?: number
    discount_code: string
    discount_amount?: Decimal | DecimalJsLike | number | string | null
    status?: $Enums.discount_status
    discount_percent?: number | null
    expiration_date?: Date | string | null
  }

  export type discountsUpdateManyMutationInput = {
    discount_code?: StringFieldUpdateOperationsInput | string
    discount_amount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    status?: Enumdiscount_statusFieldUpdateOperationsInput | $Enums.discount_status
    discount_percent?: NullableFloatFieldUpdateOperationsInput | number | null
    expiration_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type discountsUncheckedUpdateManyInput = {
    discount_id?: IntFieldUpdateOperationsInput | number
    discount_code?: StringFieldUpdateOperationsInput | string
    discount_amount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    status?: Enumdiscount_statusFieldUpdateOperationsInput | $Enums.discount_status
    discount_percent?: NullableFloatFieldUpdateOperationsInput | number | null
    expiration_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type userdiscountCreateInput = {
    created_at?: Date | string
    status?: $Enums.userdiscount_status
    user: usersCreateNestedOneWithoutUserdiscountInput
    discount: discountsCreateNestedOneWithoutUserdiscountInput
  }

  export type userdiscountUncheckedCreateInput = {
    user_discount_id?: number
    UserID: number
    discount_id: number
    created_at?: Date | string
    status?: $Enums.userdiscount_status
  }

  export type userdiscountUpdateInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: Enumuserdiscount_statusFieldUpdateOperationsInput | $Enums.userdiscount_status
    user?: usersUpdateOneRequiredWithoutUserdiscountNestedInput
    discount?: discountsUpdateOneRequiredWithoutUserdiscountNestedInput
  }

  export type userdiscountUncheckedUpdateInput = {
    user_discount_id?: IntFieldUpdateOperationsInput | number
    UserID?: IntFieldUpdateOperationsInput | number
    discount_id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: Enumuserdiscount_statusFieldUpdateOperationsInput | $Enums.userdiscount_status
  }

  export type userdiscountCreateManyInput = {
    user_discount_id?: number
    UserID: number
    discount_id: number
    created_at?: Date | string
    status?: $Enums.userdiscount_status
  }

  export type userdiscountUpdateManyMutationInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: Enumuserdiscount_statusFieldUpdateOperationsInput | $Enums.userdiscount_status
  }

  export type userdiscountUncheckedUpdateManyInput = {
    user_discount_id?: IntFieldUpdateOperationsInput | number
    UserID?: IntFieldUpdateOperationsInput | number
    discount_id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: Enumuserdiscount_statusFieldUpdateOperationsInput | $Enums.userdiscount_status
  }

  export type orderdetailCreateInput = {
    quantity: number
    unit_price: Decimal | DecimalJsLike | number | string
    orders: ordersCreateNestedOneWithoutOrderdetailsInput
    product: ProductCreateNestedOneWithoutOrderdetailsInput
  }

  export type orderdetailUncheckedCreateInput = {
    order_id: number
    product_id: number
    quantity: number
    unit_price: Decimal | DecimalJsLike | number | string
  }

  export type orderdetailUpdateInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    unit_price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    orders?: ordersUpdateOneRequiredWithoutOrderdetailsNestedInput
    product?: ProductUpdateOneRequiredWithoutOrderdetailsNestedInput
  }

  export type orderdetailUncheckedUpdateInput = {
    order_id?: IntFieldUpdateOperationsInput | number
    product_id?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    unit_price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type orderdetailCreateManyInput = {
    order_id: number
    product_id: number
    quantity: number
    unit_price: Decimal | DecimalJsLike | number | string
  }

  export type orderdetailUpdateManyMutationInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    unit_price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type orderdetailUncheckedUpdateManyInput = {
    order_id?: IntFieldUpdateOperationsInput | number
    product_id?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    unit_price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type paymentsCreateInput = {
    payment_method?: string | null
    payment_date?: Date | string | null
    amount: Decimal | DecimalJsLike | number | string
    remark?: string | null
    payment_status?: $Enums.payments_payment_status | null
    payment_Image?: string | null
    orders: ordersCreateNestedOneWithoutPaymentsInput
  }

  export type paymentsUncheckedCreateInput = {
    payment_id?: number
    order_id: number
    payment_method?: string | null
    payment_date?: Date | string | null
    amount: Decimal | DecimalJsLike | number | string
    remark?: string | null
    payment_status?: $Enums.payments_payment_status | null
    payment_Image?: string | null
  }

  export type paymentsUpdateInput = {
    payment_method?: NullableStringFieldUpdateOperationsInput | string | null
    payment_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    remark?: NullableStringFieldUpdateOperationsInput | string | null
    payment_status?: NullableEnumpayments_payment_statusFieldUpdateOperationsInput | $Enums.payments_payment_status | null
    payment_Image?: NullableStringFieldUpdateOperationsInput | string | null
    orders?: ordersUpdateOneRequiredWithoutPaymentsNestedInput
  }

  export type paymentsUncheckedUpdateInput = {
    payment_id?: IntFieldUpdateOperationsInput | number
    order_id?: IntFieldUpdateOperationsInput | number
    payment_method?: NullableStringFieldUpdateOperationsInput | string | null
    payment_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    remark?: NullableStringFieldUpdateOperationsInput | string | null
    payment_status?: NullableEnumpayments_payment_statusFieldUpdateOperationsInput | $Enums.payments_payment_status | null
    payment_Image?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type paymentsCreateManyInput = {
    payment_id?: number
    order_id: number
    payment_method?: string | null
    payment_date?: Date | string | null
    amount: Decimal | DecimalJsLike | number | string
    remark?: string | null
    payment_status?: $Enums.payments_payment_status | null
    payment_Image?: string | null
  }

  export type paymentsUpdateManyMutationInput = {
    payment_method?: NullableStringFieldUpdateOperationsInput | string | null
    payment_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    remark?: NullableStringFieldUpdateOperationsInput | string | null
    payment_status?: NullableEnumpayments_payment_statusFieldUpdateOperationsInput | $Enums.payments_payment_status | null
    payment_Image?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type paymentsUncheckedUpdateManyInput = {
    payment_id?: IntFieldUpdateOperationsInput | number
    order_id?: IntFieldUpdateOperationsInput | number
    payment_method?: NullableStringFieldUpdateOperationsInput | string | null
    payment_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    remark?: NullableStringFieldUpdateOperationsInput | string | null
    payment_status?: NullableEnumpayments_payment_statusFieldUpdateOperationsInput | $Enums.payments_payment_status | null
    payment_Image?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type usersCreateInput = {
    UserName: string
    Password: string
    Status?: string | null
    Role?: string | null
    resetToken?: string | null
    resetTokenExpiry?: Date | string | null
    orders?: ordersCreateNestedManyWithoutUserInput
    reviews?: reviewsCreateNestedManyWithoutUserInput
    userdiscount?: userdiscountCreateNestedManyWithoutUserInput
    healthInfo?: health_infoCreateNestedOneWithoutUserInput
  }

  export type usersUncheckedCreateInput = {
    UserName: string
    UserID?: number
    Password: string
    Status?: string | null
    Role?: string | null
    resetToken?: string | null
    resetTokenExpiry?: Date | string | null
    orders?: ordersUncheckedCreateNestedManyWithoutUserInput
    reviews?: reviewsUncheckedCreateNestedManyWithoutUserInput
    userdiscount?: userdiscountUncheckedCreateNestedManyWithoutUserInput
    healthInfo?: health_infoUncheckedCreateNestedOneWithoutUserInput
  }

  export type usersUpdateInput = {
    UserName?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
    Status?: NullableStringFieldUpdateOperationsInput | string | null
    Role?: NullableStringFieldUpdateOperationsInput | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    orders?: ordersUpdateManyWithoutUserNestedInput
    reviews?: reviewsUpdateManyWithoutUserNestedInput
    userdiscount?: userdiscountUpdateManyWithoutUserNestedInput
    healthInfo?: health_infoUpdateOneWithoutUserNestedInput
  }

  export type usersUncheckedUpdateInput = {
    UserName?: StringFieldUpdateOperationsInput | string
    UserID?: IntFieldUpdateOperationsInput | number
    Password?: StringFieldUpdateOperationsInput | string
    Status?: NullableStringFieldUpdateOperationsInput | string | null
    Role?: NullableStringFieldUpdateOperationsInput | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    orders?: ordersUncheckedUpdateManyWithoutUserNestedInput
    reviews?: reviewsUncheckedUpdateManyWithoutUserNestedInput
    userdiscount?: userdiscountUncheckedUpdateManyWithoutUserNestedInput
    healthInfo?: health_infoUncheckedUpdateOneWithoutUserNestedInput
  }

  export type usersCreateManyInput = {
    UserName: string
    UserID?: number
    Password: string
    Status?: string | null
    Role?: string | null
    resetToken?: string | null
    resetTokenExpiry?: Date | string | null
  }

  export type usersUpdateManyMutationInput = {
    UserName?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
    Status?: NullableStringFieldUpdateOperationsInput | string | null
    Role?: NullableStringFieldUpdateOperationsInput | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type usersUncheckedUpdateManyInput = {
    UserName?: StringFieldUpdateOperationsInput | string
    UserID?: IntFieldUpdateOperationsInput | number
    Password?: StringFieldUpdateOperationsInput | string
    Status?: NullableStringFieldUpdateOperationsInput | string | null
    Role?: NullableStringFieldUpdateOperationsInput | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type categoriesCreateInput = {
    CategoriesName?: string | null
    Product?: ProductCreateNestedManyWithoutCategoriesInput
  }

  export type categoriesUncheckedCreateInput = {
    CategoriesID?: number
    CategoriesName?: string | null
    Product?: ProductUncheckedCreateNestedManyWithoutCategoriesInput
  }

  export type categoriesUpdateInput = {
    CategoriesName?: NullableStringFieldUpdateOperationsInput | string | null
    Product?: ProductUpdateManyWithoutCategoriesNestedInput
  }

  export type categoriesUncheckedUpdateInput = {
    CategoriesID?: IntFieldUpdateOperationsInput | number
    CategoriesName?: NullableStringFieldUpdateOperationsInput | string | null
    Product?: ProductUncheckedUpdateManyWithoutCategoriesNestedInput
  }

  export type categoriesCreateManyInput = {
    CategoriesID?: number
    CategoriesName?: string | null
  }

  export type categoriesUpdateManyMutationInput = {
    CategoriesName?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type categoriesUncheckedUpdateManyInput = {
    CategoriesID?: IntFieldUpdateOperationsInput | number
    CategoriesName?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProductCreateInput = {
    name: string
    description: string
    price: number
    size: number
    Nutritional_value: string
    taste: string
    image_url: string
    orderdetails?: orderdetailCreateNestedManyWithoutProductInput
    reviews?: reviewsCreateNestedManyWithoutProductInput
    categories?: categoriesCreateNestedOneWithoutProductInput
  }

  export type ProductUncheckedCreateInput = {
    product_id?: number
    name: string
    description: string
    price: number
    CategoryID?: number | null
    size: number
    Nutritional_value: string
    taste: string
    image_url: string
    orderdetails?: orderdetailUncheckedCreateNestedManyWithoutProductInput
    reviews?: reviewsUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    size?: FloatFieldUpdateOperationsInput | number
    Nutritional_value?: StringFieldUpdateOperationsInput | string
    taste?: StringFieldUpdateOperationsInput | string
    image_url?: StringFieldUpdateOperationsInput | string
    orderdetails?: orderdetailUpdateManyWithoutProductNestedInput
    reviews?: reviewsUpdateManyWithoutProductNestedInput
    categories?: categoriesUpdateOneWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateInput = {
    product_id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    CategoryID?: NullableIntFieldUpdateOperationsInput | number | null
    size?: FloatFieldUpdateOperationsInput | number
    Nutritional_value?: StringFieldUpdateOperationsInput | string
    taste?: StringFieldUpdateOperationsInput | string
    image_url?: StringFieldUpdateOperationsInput | string
    orderdetails?: orderdetailUncheckedUpdateManyWithoutProductNestedInput
    reviews?: reviewsUncheckedUpdateManyWithoutProductNestedInput
  }

  export type ProductCreateManyInput = {
    product_id?: number
    name: string
    description: string
    price: number
    CategoryID?: number | null
    size: number
    Nutritional_value: string
    taste: string
    image_url: string
  }

  export type ProductUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    size?: FloatFieldUpdateOperationsInput | number
    Nutritional_value?: StringFieldUpdateOperationsInput | string
    taste?: StringFieldUpdateOperationsInput | string
    image_url?: StringFieldUpdateOperationsInput | string
  }

  export type ProductUncheckedUpdateManyInput = {
    product_id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    CategoryID?: NullableIntFieldUpdateOperationsInput | number | null
    size?: FloatFieldUpdateOperationsInput | number
    Nutritional_value?: StringFieldUpdateOperationsInput | string
    taste?: StringFieldUpdateOperationsInput | string
    image_url?: StringFieldUpdateOperationsInput | string
  }

  export type health_infoCreateInput = {
    first_name: string
    last_name: string
    gender: string
    email?: string | null
    address?: string | null
    phone_number?: string | null
    age: number
    weight: number
    height: number
    profile_image?: string | null
    user: usersCreateNestedOneWithoutHealthInfoInput
  }

  export type health_infoUncheckedCreateInput = {
    health_id?: number
    UserID: number
    first_name: string
    last_name: string
    gender: string
    email?: string | null
    address?: string | null
    phone_number?: string | null
    age: number
    weight: number
    height: number
    profile_image?: string | null
  }

  export type health_infoUpdateInput = {
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone_number?: NullableStringFieldUpdateOperationsInput | string | null
    age?: IntFieldUpdateOperationsInput | number
    weight?: FloatFieldUpdateOperationsInput | number
    height?: FloatFieldUpdateOperationsInput | number
    profile_image?: NullableStringFieldUpdateOperationsInput | string | null
    user?: usersUpdateOneRequiredWithoutHealthInfoNestedInput
  }

  export type health_infoUncheckedUpdateInput = {
    health_id?: IntFieldUpdateOperationsInput | number
    UserID?: IntFieldUpdateOperationsInput | number
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone_number?: NullableStringFieldUpdateOperationsInput | string | null
    age?: IntFieldUpdateOperationsInput | number
    weight?: FloatFieldUpdateOperationsInput | number
    height?: FloatFieldUpdateOperationsInput | number
    profile_image?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type health_infoCreateManyInput = {
    health_id?: number
    UserID: number
    first_name: string
    last_name: string
    gender: string
    email?: string | null
    address?: string | null
    phone_number?: string | null
    age: number
    weight: number
    height: number
    profile_image?: string | null
  }

  export type health_infoUpdateManyMutationInput = {
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone_number?: NullableStringFieldUpdateOperationsInput | string | null
    age?: IntFieldUpdateOperationsInput | number
    weight?: FloatFieldUpdateOperationsInput | number
    height?: FloatFieldUpdateOperationsInput | number
    profile_image?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type health_infoUncheckedUpdateManyInput = {
    health_id?: IntFieldUpdateOperationsInput | number
    UserID?: IntFieldUpdateOperationsInput | number
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone_number?: NullableStringFieldUpdateOperationsInput | string | null
    age?: IntFieldUpdateOperationsInput | number
    weight?: FloatFieldUpdateOperationsInput | number
    height?: FloatFieldUpdateOperationsInput | number
    profile_image?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type reviewsCreateInput = {
    Comment?: string | null
    Rating?: number | null
    CreatedAt?: Date | string | null
    user: usersCreateNestedOneWithoutReviewsInput
    product: ProductCreateNestedOneWithoutReviewsInput
  }

  export type reviewsUncheckedCreateInput = {
    ReviewID?: number
    product_id: number
    UserID: number
    Comment?: string | null
    Rating?: number | null
    CreatedAt?: Date | string | null
  }

  export type reviewsUpdateInput = {
    Comment?: NullableStringFieldUpdateOperationsInput | string | null
    Rating?: NullableIntFieldUpdateOperationsInput | number | null
    CreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: usersUpdateOneRequiredWithoutReviewsNestedInput
    product?: ProductUpdateOneRequiredWithoutReviewsNestedInput
  }

  export type reviewsUncheckedUpdateInput = {
    ReviewID?: IntFieldUpdateOperationsInput | number
    product_id?: IntFieldUpdateOperationsInput | number
    UserID?: IntFieldUpdateOperationsInput | number
    Comment?: NullableStringFieldUpdateOperationsInput | string | null
    Rating?: NullableIntFieldUpdateOperationsInput | number | null
    CreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type reviewsCreateManyInput = {
    ReviewID?: number
    product_id: number
    UserID: number
    Comment?: string | null
    Rating?: number | null
    CreatedAt?: Date | string | null
  }

  export type reviewsUpdateManyMutationInput = {
    Comment?: NullableStringFieldUpdateOperationsInput | string | null
    Rating?: NullableIntFieldUpdateOperationsInput | number | null
    CreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type reviewsUncheckedUpdateManyInput = {
    ReviewID?: IntFieldUpdateOperationsInput | number
    product_id?: IntFieldUpdateOperationsInput | number
    UserID?: IntFieldUpdateOperationsInput | number
    Comment?: NullableStringFieldUpdateOperationsInput | string | null
    Rating?: NullableIntFieldUpdateOperationsInput | number | null
    CreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type Enumorders_order_statusNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.orders_order_status | Enumorders_order_statusFieldRefInput<$PrismaModel> | null
    in?: $Enums.orders_order_status[] | null
    notIn?: $Enums.orders_order_status[] | null
    not?: NestedEnumorders_order_statusNullableFilter<$PrismaModel> | $Enums.orders_order_status | null
  }

  export type DecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[]
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[]
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type Enumshipping_shipping_statusNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.shipping_shipping_status | Enumshipping_shipping_statusFieldRefInput<$PrismaModel> | null
    in?: $Enums.shipping_shipping_status[] | null
    notIn?: $Enums.shipping_shipping_status[] | null
    not?: NestedEnumshipping_shipping_statusNullableFilter<$PrismaModel> | $Enums.shipping_shipping_status | null
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type DecimalNullableFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
  }

  export type DiscountsNullableRelationFilter = {
    is?: discountsWhereInput | null
    isNot?: discountsWhereInput | null
  }

  export type UsersRelationFilter = {
    is?: usersWhereInput
    isNot?: usersWhereInput
  }

  export type OrderdetailListRelationFilter = {
    every?: orderdetailWhereInput
    some?: orderdetailWhereInput
    none?: orderdetailWhereInput
  }

  export type PaymentsListRelationFilter = {
    every?: paymentsWhereInput
    some?: paymentsWhereInput
    none?: paymentsWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type orderdetailOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type paymentsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ordersCountOrderByAggregateInput = {
    order_id?: SortOrder
    UserID?: SortOrder
    order_date?: SortOrder
    order_status?: SortOrder
    total_amount?: SortOrder
    shipping_method?: SortOrder
    shipping_price?: SortOrder
    full_name?: SortOrder
    shipping_address?: SortOrder
    phone_number?: SortOrder
    discount_id?: SortOrder
    original_amount?: SortOrder
    discount_amount?: SortOrder
    final_amount?: SortOrder
  }

  export type ordersAvgOrderByAggregateInput = {
    order_id?: SortOrder
    UserID?: SortOrder
    total_amount?: SortOrder
    shipping_price?: SortOrder
    discount_id?: SortOrder
    original_amount?: SortOrder
    discount_amount?: SortOrder
    final_amount?: SortOrder
  }

  export type ordersMaxOrderByAggregateInput = {
    order_id?: SortOrder
    UserID?: SortOrder
    order_date?: SortOrder
    order_status?: SortOrder
    total_amount?: SortOrder
    shipping_method?: SortOrder
    shipping_price?: SortOrder
    full_name?: SortOrder
    shipping_address?: SortOrder
    phone_number?: SortOrder
    discount_id?: SortOrder
    original_amount?: SortOrder
    discount_amount?: SortOrder
    final_amount?: SortOrder
  }

  export type ordersMinOrderByAggregateInput = {
    order_id?: SortOrder
    UserID?: SortOrder
    order_date?: SortOrder
    order_status?: SortOrder
    total_amount?: SortOrder
    shipping_method?: SortOrder
    shipping_price?: SortOrder
    full_name?: SortOrder
    shipping_address?: SortOrder
    phone_number?: SortOrder
    discount_id?: SortOrder
    original_amount?: SortOrder
    discount_amount?: SortOrder
    final_amount?: SortOrder
  }

  export type ordersSumOrderByAggregateInput = {
    order_id?: SortOrder
    UserID?: SortOrder
    total_amount?: SortOrder
    shipping_price?: SortOrder
    discount_id?: SortOrder
    original_amount?: SortOrder
    discount_amount?: SortOrder
    final_amount?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type Enumorders_order_statusNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.orders_order_status | Enumorders_order_statusFieldRefInput<$PrismaModel> | null
    in?: $Enums.orders_order_status[] | null
    notIn?: $Enums.orders_order_status[] | null
    not?: NestedEnumorders_order_statusNullableWithAggregatesFilter<$PrismaModel> | $Enums.orders_order_status | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumorders_order_statusNullableFilter<$PrismaModel>
    _max?: NestedEnumorders_order_statusNullableFilter<$PrismaModel>
  }

  export type DecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[]
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[]
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type Enumshipping_shipping_statusNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.shipping_shipping_status | Enumshipping_shipping_statusFieldRefInput<$PrismaModel> | null
    in?: $Enums.shipping_shipping_status[] | null
    notIn?: $Enums.shipping_shipping_status[] | null
    not?: NestedEnumshipping_shipping_statusNullableWithAggregatesFilter<$PrismaModel> | $Enums.shipping_shipping_status | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumshipping_shipping_statusNullableFilter<$PrismaModel>
    _max?: NestedEnumshipping_shipping_statusNullableFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type DecimalNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedDecimalNullableFilter<$PrismaModel>
    _sum?: NestedDecimalNullableFilter<$PrismaModel>
    _min?: NestedDecimalNullableFilter<$PrismaModel>
    _max?: NestedDecimalNullableFilter<$PrismaModel>
  }

  export type Enumdiscount_statusFilter<$PrismaModel = never> = {
    equals?: $Enums.discount_status | Enumdiscount_statusFieldRefInput<$PrismaModel>
    in?: $Enums.discount_status[]
    notIn?: $Enums.discount_status[]
    not?: NestedEnumdiscount_statusFilter<$PrismaModel> | $Enums.discount_status
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type OrdersListRelationFilter = {
    every?: ordersWhereInput
    some?: ordersWhereInput
    none?: ordersWhereInput
  }

  export type UserdiscountListRelationFilter = {
    every?: userdiscountWhereInput
    some?: userdiscountWhereInput
    none?: userdiscountWhereInput
  }

  export type ordersOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type userdiscountOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type discountsCountOrderByAggregateInput = {
    discount_id?: SortOrder
    discount_code?: SortOrder
    discount_amount?: SortOrder
    status?: SortOrder
    discount_percent?: SortOrder
    expiration_date?: SortOrder
  }

  export type discountsAvgOrderByAggregateInput = {
    discount_id?: SortOrder
    discount_amount?: SortOrder
    discount_percent?: SortOrder
  }

  export type discountsMaxOrderByAggregateInput = {
    discount_id?: SortOrder
    discount_code?: SortOrder
    discount_amount?: SortOrder
    status?: SortOrder
    discount_percent?: SortOrder
    expiration_date?: SortOrder
  }

  export type discountsMinOrderByAggregateInput = {
    discount_id?: SortOrder
    discount_code?: SortOrder
    discount_amount?: SortOrder
    status?: SortOrder
    discount_percent?: SortOrder
    expiration_date?: SortOrder
  }

  export type discountsSumOrderByAggregateInput = {
    discount_id?: SortOrder
    discount_amount?: SortOrder
    discount_percent?: SortOrder
  }

  export type Enumdiscount_statusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.discount_status | Enumdiscount_statusFieldRefInput<$PrismaModel>
    in?: $Enums.discount_status[]
    notIn?: $Enums.discount_status[]
    not?: NestedEnumdiscount_statusWithAggregatesFilter<$PrismaModel> | $Enums.discount_status
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumdiscount_statusFilter<$PrismaModel>
    _max?: NestedEnumdiscount_statusFilter<$PrismaModel>
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type Enumuserdiscount_statusFilter<$PrismaModel = never> = {
    equals?: $Enums.userdiscount_status | Enumuserdiscount_statusFieldRefInput<$PrismaModel>
    in?: $Enums.userdiscount_status[]
    notIn?: $Enums.userdiscount_status[]
    not?: NestedEnumuserdiscount_statusFilter<$PrismaModel> | $Enums.userdiscount_status
  }

  export type DiscountsRelationFilter = {
    is?: discountsWhereInput
    isNot?: discountsWhereInput
  }

  export type userdiscountCountOrderByAggregateInput = {
    user_discount_id?: SortOrder
    UserID?: SortOrder
    discount_id?: SortOrder
    created_at?: SortOrder
    status?: SortOrder
  }

  export type userdiscountAvgOrderByAggregateInput = {
    user_discount_id?: SortOrder
    UserID?: SortOrder
    discount_id?: SortOrder
  }

  export type userdiscountMaxOrderByAggregateInput = {
    user_discount_id?: SortOrder
    UserID?: SortOrder
    discount_id?: SortOrder
    created_at?: SortOrder
    status?: SortOrder
  }

  export type userdiscountMinOrderByAggregateInput = {
    user_discount_id?: SortOrder
    UserID?: SortOrder
    discount_id?: SortOrder
    created_at?: SortOrder
    status?: SortOrder
  }

  export type userdiscountSumOrderByAggregateInput = {
    user_discount_id?: SortOrder
    UserID?: SortOrder
    discount_id?: SortOrder
  }

  export type Enumuserdiscount_statusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.userdiscount_status | Enumuserdiscount_statusFieldRefInput<$PrismaModel>
    in?: $Enums.userdiscount_status[]
    notIn?: $Enums.userdiscount_status[]
    not?: NestedEnumuserdiscount_statusWithAggregatesFilter<$PrismaModel> | $Enums.userdiscount_status
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumuserdiscount_statusFilter<$PrismaModel>
    _max?: NestedEnumuserdiscount_statusFilter<$PrismaModel>
  }

  export type OrdersRelationFilter = {
    is?: ordersWhereInput
    isNot?: ordersWhereInput
  }

  export type ProductRelationFilter = {
    is?: ProductWhereInput
    isNot?: ProductWhereInput
  }

  export type orderdetailOrder_idProduct_idCompoundUniqueInput = {
    order_id: number
    product_id: number
  }

  export type orderdetailCountOrderByAggregateInput = {
    order_id?: SortOrder
    product_id?: SortOrder
    quantity?: SortOrder
    unit_price?: SortOrder
  }

  export type orderdetailAvgOrderByAggregateInput = {
    order_id?: SortOrder
    product_id?: SortOrder
    quantity?: SortOrder
    unit_price?: SortOrder
  }

  export type orderdetailMaxOrderByAggregateInput = {
    order_id?: SortOrder
    product_id?: SortOrder
    quantity?: SortOrder
    unit_price?: SortOrder
  }

  export type orderdetailMinOrderByAggregateInput = {
    order_id?: SortOrder
    product_id?: SortOrder
    quantity?: SortOrder
    unit_price?: SortOrder
  }

  export type orderdetailSumOrderByAggregateInput = {
    order_id?: SortOrder
    product_id?: SortOrder
    quantity?: SortOrder
    unit_price?: SortOrder
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type Enumpayments_payment_statusNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.payments_payment_status | Enumpayments_payment_statusFieldRefInput<$PrismaModel> | null
    in?: $Enums.payments_payment_status[] | null
    notIn?: $Enums.payments_payment_status[] | null
    not?: NestedEnumpayments_payment_statusNullableFilter<$PrismaModel> | $Enums.payments_payment_status | null
  }

  export type paymentsCountOrderByAggregateInput = {
    payment_id?: SortOrder
    order_id?: SortOrder
    payment_method?: SortOrder
    payment_date?: SortOrder
    amount?: SortOrder
    remark?: SortOrder
    payment_status?: SortOrder
    payment_Image?: SortOrder
  }

  export type paymentsAvgOrderByAggregateInput = {
    payment_id?: SortOrder
    order_id?: SortOrder
    amount?: SortOrder
  }

  export type paymentsMaxOrderByAggregateInput = {
    payment_id?: SortOrder
    order_id?: SortOrder
    payment_method?: SortOrder
    payment_date?: SortOrder
    amount?: SortOrder
    remark?: SortOrder
    payment_status?: SortOrder
    payment_Image?: SortOrder
  }

  export type paymentsMinOrderByAggregateInput = {
    payment_id?: SortOrder
    order_id?: SortOrder
    payment_method?: SortOrder
    payment_date?: SortOrder
    amount?: SortOrder
    remark?: SortOrder
    payment_status?: SortOrder
    payment_Image?: SortOrder
  }

  export type paymentsSumOrderByAggregateInput = {
    payment_id?: SortOrder
    order_id?: SortOrder
    amount?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type Enumpayments_payment_statusNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.payments_payment_status | Enumpayments_payment_statusFieldRefInput<$PrismaModel> | null
    in?: $Enums.payments_payment_status[] | null
    notIn?: $Enums.payments_payment_status[] | null
    not?: NestedEnumpayments_payment_statusNullableWithAggregatesFilter<$PrismaModel> | $Enums.payments_payment_status | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumpayments_payment_statusNullableFilter<$PrismaModel>
    _max?: NestedEnumpayments_payment_statusNullableFilter<$PrismaModel>
  }

  export type ReviewsListRelationFilter = {
    every?: reviewsWhereInput
    some?: reviewsWhereInput
    none?: reviewsWhereInput
  }

  export type Health_infoNullableRelationFilter = {
    is?: health_infoWhereInput | null
    isNot?: health_infoWhereInput | null
  }

  export type reviewsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type usersCountOrderByAggregateInput = {
    UserName?: SortOrder
    UserID?: SortOrder
    Password?: SortOrder
    Status?: SortOrder
    Role?: SortOrder
    resetToken?: SortOrder
    resetTokenExpiry?: SortOrder
  }

  export type usersAvgOrderByAggregateInput = {
    UserID?: SortOrder
  }

  export type usersMaxOrderByAggregateInput = {
    UserName?: SortOrder
    UserID?: SortOrder
    Password?: SortOrder
    Status?: SortOrder
    Role?: SortOrder
    resetToken?: SortOrder
    resetTokenExpiry?: SortOrder
  }

  export type usersMinOrderByAggregateInput = {
    UserName?: SortOrder
    UserID?: SortOrder
    Password?: SortOrder
    Status?: SortOrder
    Role?: SortOrder
    resetToken?: SortOrder
    resetTokenExpiry?: SortOrder
  }

  export type usersSumOrderByAggregateInput = {
    UserID?: SortOrder
  }

  export type ProductListRelationFilter = {
    every?: ProductWhereInput
    some?: ProductWhereInput
    none?: ProductWhereInput
  }

  export type ProductOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type categoriesCountOrderByAggregateInput = {
    CategoriesID?: SortOrder
    CategoriesName?: SortOrder
  }

  export type categoriesAvgOrderByAggregateInput = {
    CategoriesID?: SortOrder
  }

  export type categoriesMaxOrderByAggregateInput = {
    CategoriesID?: SortOrder
    CategoriesName?: SortOrder
  }

  export type categoriesMinOrderByAggregateInput = {
    CategoriesID?: SortOrder
    CategoriesName?: SortOrder
  }

  export type categoriesSumOrderByAggregateInput = {
    CategoriesID?: SortOrder
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type CategoriesNullableRelationFilter = {
    is?: categoriesWhereInput | null
    isNot?: categoriesWhereInput | null
  }

  export type ProductCountOrderByAggregateInput = {
    product_id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    price?: SortOrder
    CategoryID?: SortOrder
    size?: SortOrder
    Nutritional_value?: SortOrder
    taste?: SortOrder
    image_url?: SortOrder
  }

  export type ProductAvgOrderByAggregateInput = {
    product_id?: SortOrder
    price?: SortOrder
    CategoryID?: SortOrder
    size?: SortOrder
  }

  export type ProductMaxOrderByAggregateInput = {
    product_id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    price?: SortOrder
    CategoryID?: SortOrder
    size?: SortOrder
    Nutritional_value?: SortOrder
    taste?: SortOrder
    image_url?: SortOrder
  }

  export type ProductMinOrderByAggregateInput = {
    product_id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    price?: SortOrder
    CategoryID?: SortOrder
    size?: SortOrder
    Nutritional_value?: SortOrder
    taste?: SortOrder
    image_url?: SortOrder
  }

  export type ProductSumOrderByAggregateInput = {
    product_id?: SortOrder
    price?: SortOrder
    CategoryID?: SortOrder
    size?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type health_infoCountOrderByAggregateInput = {
    health_id?: SortOrder
    UserID?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    gender?: SortOrder
    email?: SortOrder
    address?: SortOrder
    phone_number?: SortOrder
    age?: SortOrder
    weight?: SortOrder
    height?: SortOrder
    profile_image?: SortOrder
  }

  export type health_infoAvgOrderByAggregateInput = {
    health_id?: SortOrder
    UserID?: SortOrder
    age?: SortOrder
    weight?: SortOrder
    height?: SortOrder
  }

  export type health_infoMaxOrderByAggregateInput = {
    health_id?: SortOrder
    UserID?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    gender?: SortOrder
    email?: SortOrder
    address?: SortOrder
    phone_number?: SortOrder
    age?: SortOrder
    weight?: SortOrder
    height?: SortOrder
    profile_image?: SortOrder
  }

  export type health_infoMinOrderByAggregateInput = {
    health_id?: SortOrder
    UserID?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    gender?: SortOrder
    email?: SortOrder
    address?: SortOrder
    phone_number?: SortOrder
    age?: SortOrder
    weight?: SortOrder
    height?: SortOrder
    profile_image?: SortOrder
  }

  export type health_infoSumOrderByAggregateInput = {
    health_id?: SortOrder
    UserID?: SortOrder
    age?: SortOrder
    weight?: SortOrder
    height?: SortOrder
  }

  export type reviewsCountOrderByAggregateInput = {
    ReviewID?: SortOrder
    product_id?: SortOrder
    UserID?: SortOrder
    Comment?: SortOrder
    Rating?: SortOrder
    CreatedAt?: SortOrder
  }

  export type reviewsAvgOrderByAggregateInput = {
    ReviewID?: SortOrder
    product_id?: SortOrder
    UserID?: SortOrder
    Rating?: SortOrder
  }

  export type reviewsMaxOrderByAggregateInput = {
    ReviewID?: SortOrder
    product_id?: SortOrder
    UserID?: SortOrder
    Comment?: SortOrder
    Rating?: SortOrder
    CreatedAt?: SortOrder
  }

  export type reviewsMinOrderByAggregateInput = {
    ReviewID?: SortOrder
    product_id?: SortOrder
    UserID?: SortOrder
    Comment?: SortOrder
    Rating?: SortOrder
    CreatedAt?: SortOrder
  }

  export type reviewsSumOrderByAggregateInput = {
    ReviewID?: SortOrder
    product_id?: SortOrder
    UserID?: SortOrder
    Rating?: SortOrder
  }

  export type discountsCreateNestedOneWithoutOrdersInput = {
    create?: XOR<discountsCreateWithoutOrdersInput, discountsUncheckedCreateWithoutOrdersInput>
    connectOrCreate?: discountsCreateOrConnectWithoutOrdersInput
    connect?: discountsWhereUniqueInput
  }

  export type usersCreateNestedOneWithoutOrdersInput = {
    create?: XOR<usersCreateWithoutOrdersInput, usersUncheckedCreateWithoutOrdersInput>
    connectOrCreate?: usersCreateOrConnectWithoutOrdersInput
    connect?: usersWhereUniqueInput
  }

  export type orderdetailCreateNestedManyWithoutOrdersInput = {
    create?: XOR<orderdetailCreateWithoutOrdersInput, orderdetailUncheckedCreateWithoutOrdersInput> | orderdetailCreateWithoutOrdersInput[] | orderdetailUncheckedCreateWithoutOrdersInput[]
    connectOrCreate?: orderdetailCreateOrConnectWithoutOrdersInput | orderdetailCreateOrConnectWithoutOrdersInput[]
    createMany?: orderdetailCreateManyOrdersInputEnvelope
    connect?: orderdetailWhereUniqueInput | orderdetailWhereUniqueInput[]
  }

  export type paymentsCreateNestedManyWithoutOrdersInput = {
    create?: XOR<paymentsCreateWithoutOrdersInput, paymentsUncheckedCreateWithoutOrdersInput> | paymentsCreateWithoutOrdersInput[] | paymentsUncheckedCreateWithoutOrdersInput[]
    connectOrCreate?: paymentsCreateOrConnectWithoutOrdersInput | paymentsCreateOrConnectWithoutOrdersInput[]
    createMany?: paymentsCreateManyOrdersInputEnvelope
    connect?: paymentsWhereUniqueInput | paymentsWhereUniqueInput[]
  }

  export type orderdetailUncheckedCreateNestedManyWithoutOrdersInput = {
    create?: XOR<orderdetailCreateWithoutOrdersInput, orderdetailUncheckedCreateWithoutOrdersInput> | orderdetailCreateWithoutOrdersInput[] | orderdetailUncheckedCreateWithoutOrdersInput[]
    connectOrCreate?: orderdetailCreateOrConnectWithoutOrdersInput | orderdetailCreateOrConnectWithoutOrdersInput[]
    createMany?: orderdetailCreateManyOrdersInputEnvelope
    connect?: orderdetailWhereUniqueInput | orderdetailWhereUniqueInput[]
  }

  export type paymentsUncheckedCreateNestedManyWithoutOrdersInput = {
    create?: XOR<paymentsCreateWithoutOrdersInput, paymentsUncheckedCreateWithoutOrdersInput> | paymentsCreateWithoutOrdersInput[] | paymentsUncheckedCreateWithoutOrdersInput[]
    connectOrCreate?: paymentsCreateOrConnectWithoutOrdersInput | paymentsCreateOrConnectWithoutOrdersInput[]
    createMany?: paymentsCreateManyOrdersInputEnvelope
    connect?: paymentsWhereUniqueInput | paymentsWhereUniqueInput[]
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NullableEnumorders_order_statusFieldUpdateOperationsInput = {
    set?: $Enums.orders_order_status | null
  }

  export type DecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type NullableEnumshipping_shipping_statusFieldUpdateOperationsInput = {
    set?: $Enums.shipping_shipping_status | null
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableDecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string | null
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type discountsUpdateOneWithoutOrdersNestedInput = {
    create?: XOR<discountsCreateWithoutOrdersInput, discountsUncheckedCreateWithoutOrdersInput>
    connectOrCreate?: discountsCreateOrConnectWithoutOrdersInput
    upsert?: discountsUpsertWithoutOrdersInput
    disconnect?: discountsWhereInput | boolean
    delete?: discountsWhereInput | boolean
    connect?: discountsWhereUniqueInput
    update?: XOR<XOR<discountsUpdateToOneWithWhereWithoutOrdersInput, discountsUpdateWithoutOrdersInput>, discountsUncheckedUpdateWithoutOrdersInput>
  }

  export type usersUpdateOneRequiredWithoutOrdersNestedInput = {
    create?: XOR<usersCreateWithoutOrdersInput, usersUncheckedCreateWithoutOrdersInput>
    connectOrCreate?: usersCreateOrConnectWithoutOrdersInput
    upsert?: usersUpsertWithoutOrdersInput
    connect?: usersWhereUniqueInput
    update?: XOR<XOR<usersUpdateToOneWithWhereWithoutOrdersInput, usersUpdateWithoutOrdersInput>, usersUncheckedUpdateWithoutOrdersInput>
  }

  export type orderdetailUpdateManyWithoutOrdersNestedInput = {
    create?: XOR<orderdetailCreateWithoutOrdersInput, orderdetailUncheckedCreateWithoutOrdersInput> | orderdetailCreateWithoutOrdersInput[] | orderdetailUncheckedCreateWithoutOrdersInput[]
    connectOrCreate?: orderdetailCreateOrConnectWithoutOrdersInput | orderdetailCreateOrConnectWithoutOrdersInput[]
    upsert?: orderdetailUpsertWithWhereUniqueWithoutOrdersInput | orderdetailUpsertWithWhereUniqueWithoutOrdersInput[]
    createMany?: orderdetailCreateManyOrdersInputEnvelope
    set?: orderdetailWhereUniqueInput | orderdetailWhereUniqueInput[]
    disconnect?: orderdetailWhereUniqueInput | orderdetailWhereUniqueInput[]
    delete?: orderdetailWhereUniqueInput | orderdetailWhereUniqueInput[]
    connect?: orderdetailWhereUniqueInput | orderdetailWhereUniqueInput[]
    update?: orderdetailUpdateWithWhereUniqueWithoutOrdersInput | orderdetailUpdateWithWhereUniqueWithoutOrdersInput[]
    updateMany?: orderdetailUpdateManyWithWhereWithoutOrdersInput | orderdetailUpdateManyWithWhereWithoutOrdersInput[]
    deleteMany?: orderdetailScalarWhereInput | orderdetailScalarWhereInput[]
  }

  export type paymentsUpdateManyWithoutOrdersNestedInput = {
    create?: XOR<paymentsCreateWithoutOrdersInput, paymentsUncheckedCreateWithoutOrdersInput> | paymentsCreateWithoutOrdersInput[] | paymentsUncheckedCreateWithoutOrdersInput[]
    connectOrCreate?: paymentsCreateOrConnectWithoutOrdersInput | paymentsCreateOrConnectWithoutOrdersInput[]
    upsert?: paymentsUpsertWithWhereUniqueWithoutOrdersInput | paymentsUpsertWithWhereUniqueWithoutOrdersInput[]
    createMany?: paymentsCreateManyOrdersInputEnvelope
    set?: paymentsWhereUniqueInput | paymentsWhereUniqueInput[]
    disconnect?: paymentsWhereUniqueInput | paymentsWhereUniqueInput[]
    delete?: paymentsWhereUniqueInput | paymentsWhereUniqueInput[]
    connect?: paymentsWhereUniqueInput | paymentsWhereUniqueInput[]
    update?: paymentsUpdateWithWhereUniqueWithoutOrdersInput | paymentsUpdateWithWhereUniqueWithoutOrdersInput[]
    updateMany?: paymentsUpdateManyWithWhereWithoutOrdersInput | paymentsUpdateManyWithWhereWithoutOrdersInput[]
    deleteMany?: paymentsScalarWhereInput | paymentsScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type orderdetailUncheckedUpdateManyWithoutOrdersNestedInput = {
    create?: XOR<orderdetailCreateWithoutOrdersInput, orderdetailUncheckedCreateWithoutOrdersInput> | orderdetailCreateWithoutOrdersInput[] | orderdetailUncheckedCreateWithoutOrdersInput[]
    connectOrCreate?: orderdetailCreateOrConnectWithoutOrdersInput | orderdetailCreateOrConnectWithoutOrdersInput[]
    upsert?: orderdetailUpsertWithWhereUniqueWithoutOrdersInput | orderdetailUpsertWithWhereUniqueWithoutOrdersInput[]
    createMany?: orderdetailCreateManyOrdersInputEnvelope
    set?: orderdetailWhereUniqueInput | orderdetailWhereUniqueInput[]
    disconnect?: orderdetailWhereUniqueInput | orderdetailWhereUniqueInput[]
    delete?: orderdetailWhereUniqueInput | orderdetailWhereUniqueInput[]
    connect?: orderdetailWhereUniqueInput | orderdetailWhereUniqueInput[]
    update?: orderdetailUpdateWithWhereUniqueWithoutOrdersInput | orderdetailUpdateWithWhereUniqueWithoutOrdersInput[]
    updateMany?: orderdetailUpdateManyWithWhereWithoutOrdersInput | orderdetailUpdateManyWithWhereWithoutOrdersInput[]
    deleteMany?: orderdetailScalarWhereInput | orderdetailScalarWhereInput[]
  }

  export type paymentsUncheckedUpdateManyWithoutOrdersNestedInput = {
    create?: XOR<paymentsCreateWithoutOrdersInput, paymentsUncheckedCreateWithoutOrdersInput> | paymentsCreateWithoutOrdersInput[] | paymentsUncheckedCreateWithoutOrdersInput[]
    connectOrCreate?: paymentsCreateOrConnectWithoutOrdersInput | paymentsCreateOrConnectWithoutOrdersInput[]
    upsert?: paymentsUpsertWithWhereUniqueWithoutOrdersInput | paymentsUpsertWithWhereUniqueWithoutOrdersInput[]
    createMany?: paymentsCreateManyOrdersInputEnvelope
    set?: paymentsWhereUniqueInput | paymentsWhereUniqueInput[]
    disconnect?: paymentsWhereUniqueInput | paymentsWhereUniqueInput[]
    delete?: paymentsWhereUniqueInput | paymentsWhereUniqueInput[]
    connect?: paymentsWhereUniqueInput | paymentsWhereUniqueInput[]
    update?: paymentsUpdateWithWhereUniqueWithoutOrdersInput | paymentsUpdateWithWhereUniqueWithoutOrdersInput[]
    updateMany?: paymentsUpdateManyWithWhereWithoutOrdersInput | paymentsUpdateManyWithWhereWithoutOrdersInput[]
    deleteMany?: paymentsScalarWhereInput | paymentsScalarWhereInput[]
  }

  export type ordersCreateNestedManyWithoutDiscountInput = {
    create?: XOR<ordersCreateWithoutDiscountInput, ordersUncheckedCreateWithoutDiscountInput> | ordersCreateWithoutDiscountInput[] | ordersUncheckedCreateWithoutDiscountInput[]
    connectOrCreate?: ordersCreateOrConnectWithoutDiscountInput | ordersCreateOrConnectWithoutDiscountInput[]
    createMany?: ordersCreateManyDiscountInputEnvelope
    connect?: ordersWhereUniqueInput | ordersWhereUniqueInput[]
  }

  export type userdiscountCreateNestedManyWithoutDiscountInput = {
    create?: XOR<userdiscountCreateWithoutDiscountInput, userdiscountUncheckedCreateWithoutDiscountInput> | userdiscountCreateWithoutDiscountInput[] | userdiscountUncheckedCreateWithoutDiscountInput[]
    connectOrCreate?: userdiscountCreateOrConnectWithoutDiscountInput | userdiscountCreateOrConnectWithoutDiscountInput[]
    createMany?: userdiscountCreateManyDiscountInputEnvelope
    connect?: userdiscountWhereUniqueInput | userdiscountWhereUniqueInput[]
  }

  export type ordersUncheckedCreateNestedManyWithoutDiscountInput = {
    create?: XOR<ordersCreateWithoutDiscountInput, ordersUncheckedCreateWithoutDiscountInput> | ordersCreateWithoutDiscountInput[] | ordersUncheckedCreateWithoutDiscountInput[]
    connectOrCreate?: ordersCreateOrConnectWithoutDiscountInput | ordersCreateOrConnectWithoutDiscountInput[]
    createMany?: ordersCreateManyDiscountInputEnvelope
    connect?: ordersWhereUniqueInput | ordersWhereUniqueInput[]
  }

  export type userdiscountUncheckedCreateNestedManyWithoutDiscountInput = {
    create?: XOR<userdiscountCreateWithoutDiscountInput, userdiscountUncheckedCreateWithoutDiscountInput> | userdiscountCreateWithoutDiscountInput[] | userdiscountUncheckedCreateWithoutDiscountInput[]
    connectOrCreate?: userdiscountCreateOrConnectWithoutDiscountInput | userdiscountCreateOrConnectWithoutDiscountInput[]
    createMany?: userdiscountCreateManyDiscountInputEnvelope
    connect?: userdiscountWhereUniqueInput | userdiscountWhereUniqueInput[]
  }

  export type Enumdiscount_statusFieldUpdateOperationsInput = {
    set?: $Enums.discount_status
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type ordersUpdateManyWithoutDiscountNestedInput = {
    create?: XOR<ordersCreateWithoutDiscountInput, ordersUncheckedCreateWithoutDiscountInput> | ordersCreateWithoutDiscountInput[] | ordersUncheckedCreateWithoutDiscountInput[]
    connectOrCreate?: ordersCreateOrConnectWithoutDiscountInput | ordersCreateOrConnectWithoutDiscountInput[]
    upsert?: ordersUpsertWithWhereUniqueWithoutDiscountInput | ordersUpsertWithWhereUniqueWithoutDiscountInput[]
    createMany?: ordersCreateManyDiscountInputEnvelope
    set?: ordersWhereUniqueInput | ordersWhereUniqueInput[]
    disconnect?: ordersWhereUniqueInput | ordersWhereUniqueInput[]
    delete?: ordersWhereUniqueInput | ordersWhereUniqueInput[]
    connect?: ordersWhereUniqueInput | ordersWhereUniqueInput[]
    update?: ordersUpdateWithWhereUniqueWithoutDiscountInput | ordersUpdateWithWhereUniqueWithoutDiscountInput[]
    updateMany?: ordersUpdateManyWithWhereWithoutDiscountInput | ordersUpdateManyWithWhereWithoutDiscountInput[]
    deleteMany?: ordersScalarWhereInput | ordersScalarWhereInput[]
  }

  export type userdiscountUpdateManyWithoutDiscountNestedInput = {
    create?: XOR<userdiscountCreateWithoutDiscountInput, userdiscountUncheckedCreateWithoutDiscountInput> | userdiscountCreateWithoutDiscountInput[] | userdiscountUncheckedCreateWithoutDiscountInput[]
    connectOrCreate?: userdiscountCreateOrConnectWithoutDiscountInput | userdiscountCreateOrConnectWithoutDiscountInput[]
    upsert?: userdiscountUpsertWithWhereUniqueWithoutDiscountInput | userdiscountUpsertWithWhereUniqueWithoutDiscountInput[]
    createMany?: userdiscountCreateManyDiscountInputEnvelope
    set?: userdiscountWhereUniqueInput | userdiscountWhereUniqueInput[]
    disconnect?: userdiscountWhereUniqueInput | userdiscountWhereUniqueInput[]
    delete?: userdiscountWhereUniqueInput | userdiscountWhereUniqueInput[]
    connect?: userdiscountWhereUniqueInput | userdiscountWhereUniqueInput[]
    update?: userdiscountUpdateWithWhereUniqueWithoutDiscountInput | userdiscountUpdateWithWhereUniqueWithoutDiscountInput[]
    updateMany?: userdiscountUpdateManyWithWhereWithoutDiscountInput | userdiscountUpdateManyWithWhereWithoutDiscountInput[]
    deleteMany?: userdiscountScalarWhereInput | userdiscountScalarWhereInput[]
  }

  export type ordersUncheckedUpdateManyWithoutDiscountNestedInput = {
    create?: XOR<ordersCreateWithoutDiscountInput, ordersUncheckedCreateWithoutDiscountInput> | ordersCreateWithoutDiscountInput[] | ordersUncheckedCreateWithoutDiscountInput[]
    connectOrCreate?: ordersCreateOrConnectWithoutDiscountInput | ordersCreateOrConnectWithoutDiscountInput[]
    upsert?: ordersUpsertWithWhereUniqueWithoutDiscountInput | ordersUpsertWithWhereUniqueWithoutDiscountInput[]
    createMany?: ordersCreateManyDiscountInputEnvelope
    set?: ordersWhereUniqueInput | ordersWhereUniqueInput[]
    disconnect?: ordersWhereUniqueInput | ordersWhereUniqueInput[]
    delete?: ordersWhereUniqueInput | ordersWhereUniqueInput[]
    connect?: ordersWhereUniqueInput | ordersWhereUniqueInput[]
    update?: ordersUpdateWithWhereUniqueWithoutDiscountInput | ordersUpdateWithWhereUniqueWithoutDiscountInput[]
    updateMany?: ordersUpdateManyWithWhereWithoutDiscountInput | ordersUpdateManyWithWhereWithoutDiscountInput[]
    deleteMany?: ordersScalarWhereInput | ordersScalarWhereInput[]
  }

  export type userdiscountUncheckedUpdateManyWithoutDiscountNestedInput = {
    create?: XOR<userdiscountCreateWithoutDiscountInput, userdiscountUncheckedCreateWithoutDiscountInput> | userdiscountCreateWithoutDiscountInput[] | userdiscountUncheckedCreateWithoutDiscountInput[]
    connectOrCreate?: userdiscountCreateOrConnectWithoutDiscountInput | userdiscountCreateOrConnectWithoutDiscountInput[]
    upsert?: userdiscountUpsertWithWhereUniqueWithoutDiscountInput | userdiscountUpsertWithWhereUniqueWithoutDiscountInput[]
    createMany?: userdiscountCreateManyDiscountInputEnvelope
    set?: userdiscountWhereUniqueInput | userdiscountWhereUniqueInput[]
    disconnect?: userdiscountWhereUniqueInput | userdiscountWhereUniqueInput[]
    delete?: userdiscountWhereUniqueInput | userdiscountWhereUniqueInput[]
    connect?: userdiscountWhereUniqueInput | userdiscountWhereUniqueInput[]
    update?: userdiscountUpdateWithWhereUniqueWithoutDiscountInput | userdiscountUpdateWithWhereUniqueWithoutDiscountInput[]
    updateMany?: userdiscountUpdateManyWithWhereWithoutDiscountInput | userdiscountUpdateManyWithWhereWithoutDiscountInput[]
    deleteMany?: userdiscountScalarWhereInput | userdiscountScalarWhereInput[]
  }

  export type usersCreateNestedOneWithoutUserdiscountInput = {
    create?: XOR<usersCreateWithoutUserdiscountInput, usersUncheckedCreateWithoutUserdiscountInput>
    connectOrCreate?: usersCreateOrConnectWithoutUserdiscountInput
    connect?: usersWhereUniqueInput
  }

  export type discountsCreateNestedOneWithoutUserdiscountInput = {
    create?: XOR<discountsCreateWithoutUserdiscountInput, discountsUncheckedCreateWithoutUserdiscountInput>
    connectOrCreate?: discountsCreateOrConnectWithoutUserdiscountInput
    connect?: discountsWhereUniqueInput
  }

  export type Enumuserdiscount_statusFieldUpdateOperationsInput = {
    set?: $Enums.userdiscount_status
  }

  export type usersUpdateOneRequiredWithoutUserdiscountNestedInput = {
    create?: XOR<usersCreateWithoutUserdiscountInput, usersUncheckedCreateWithoutUserdiscountInput>
    connectOrCreate?: usersCreateOrConnectWithoutUserdiscountInput
    upsert?: usersUpsertWithoutUserdiscountInput
    connect?: usersWhereUniqueInput
    update?: XOR<XOR<usersUpdateToOneWithWhereWithoutUserdiscountInput, usersUpdateWithoutUserdiscountInput>, usersUncheckedUpdateWithoutUserdiscountInput>
  }

  export type discountsUpdateOneRequiredWithoutUserdiscountNestedInput = {
    create?: XOR<discountsCreateWithoutUserdiscountInput, discountsUncheckedCreateWithoutUserdiscountInput>
    connectOrCreate?: discountsCreateOrConnectWithoutUserdiscountInput
    upsert?: discountsUpsertWithoutUserdiscountInput
    connect?: discountsWhereUniqueInput
    update?: XOR<XOR<discountsUpdateToOneWithWhereWithoutUserdiscountInput, discountsUpdateWithoutUserdiscountInput>, discountsUncheckedUpdateWithoutUserdiscountInput>
  }

  export type ordersCreateNestedOneWithoutOrderdetailsInput = {
    create?: XOR<ordersCreateWithoutOrderdetailsInput, ordersUncheckedCreateWithoutOrderdetailsInput>
    connectOrCreate?: ordersCreateOrConnectWithoutOrderdetailsInput
    connect?: ordersWhereUniqueInput
  }

  export type ProductCreateNestedOneWithoutOrderdetailsInput = {
    create?: XOR<ProductCreateWithoutOrderdetailsInput, ProductUncheckedCreateWithoutOrderdetailsInput>
    connectOrCreate?: ProductCreateOrConnectWithoutOrderdetailsInput
    connect?: ProductWhereUniqueInput
  }

  export type ordersUpdateOneRequiredWithoutOrderdetailsNestedInput = {
    create?: XOR<ordersCreateWithoutOrderdetailsInput, ordersUncheckedCreateWithoutOrderdetailsInput>
    connectOrCreate?: ordersCreateOrConnectWithoutOrderdetailsInput
    upsert?: ordersUpsertWithoutOrderdetailsInput
    connect?: ordersWhereUniqueInput
    update?: XOR<XOR<ordersUpdateToOneWithWhereWithoutOrderdetailsInput, ordersUpdateWithoutOrderdetailsInput>, ordersUncheckedUpdateWithoutOrderdetailsInput>
  }

  export type ProductUpdateOneRequiredWithoutOrderdetailsNestedInput = {
    create?: XOR<ProductCreateWithoutOrderdetailsInput, ProductUncheckedCreateWithoutOrderdetailsInput>
    connectOrCreate?: ProductCreateOrConnectWithoutOrderdetailsInput
    upsert?: ProductUpsertWithoutOrderdetailsInput
    connect?: ProductWhereUniqueInput
    update?: XOR<XOR<ProductUpdateToOneWithWhereWithoutOrderdetailsInput, ProductUpdateWithoutOrderdetailsInput>, ProductUncheckedUpdateWithoutOrderdetailsInput>
  }

  export type ordersCreateNestedOneWithoutPaymentsInput = {
    create?: XOR<ordersCreateWithoutPaymentsInput, ordersUncheckedCreateWithoutPaymentsInput>
    connectOrCreate?: ordersCreateOrConnectWithoutPaymentsInput
    connect?: ordersWhereUniqueInput
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableEnumpayments_payment_statusFieldUpdateOperationsInput = {
    set?: $Enums.payments_payment_status | null
  }

  export type ordersUpdateOneRequiredWithoutPaymentsNestedInput = {
    create?: XOR<ordersCreateWithoutPaymentsInput, ordersUncheckedCreateWithoutPaymentsInput>
    connectOrCreate?: ordersCreateOrConnectWithoutPaymentsInput
    upsert?: ordersUpsertWithoutPaymentsInput
    connect?: ordersWhereUniqueInput
    update?: XOR<XOR<ordersUpdateToOneWithWhereWithoutPaymentsInput, ordersUpdateWithoutPaymentsInput>, ordersUncheckedUpdateWithoutPaymentsInput>
  }

  export type ordersCreateNestedManyWithoutUserInput = {
    create?: XOR<ordersCreateWithoutUserInput, ordersUncheckedCreateWithoutUserInput> | ordersCreateWithoutUserInput[] | ordersUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ordersCreateOrConnectWithoutUserInput | ordersCreateOrConnectWithoutUserInput[]
    createMany?: ordersCreateManyUserInputEnvelope
    connect?: ordersWhereUniqueInput | ordersWhereUniqueInput[]
  }

  export type reviewsCreateNestedManyWithoutUserInput = {
    create?: XOR<reviewsCreateWithoutUserInput, reviewsUncheckedCreateWithoutUserInput> | reviewsCreateWithoutUserInput[] | reviewsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: reviewsCreateOrConnectWithoutUserInput | reviewsCreateOrConnectWithoutUserInput[]
    createMany?: reviewsCreateManyUserInputEnvelope
    connect?: reviewsWhereUniqueInput | reviewsWhereUniqueInput[]
  }

  export type userdiscountCreateNestedManyWithoutUserInput = {
    create?: XOR<userdiscountCreateWithoutUserInput, userdiscountUncheckedCreateWithoutUserInput> | userdiscountCreateWithoutUserInput[] | userdiscountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: userdiscountCreateOrConnectWithoutUserInput | userdiscountCreateOrConnectWithoutUserInput[]
    createMany?: userdiscountCreateManyUserInputEnvelope
    connect?: userdiscountWhereUniqueInput | userdiscountWhereUniqueInput[]
  }

  export type health_infoCreateNestedOneWithoutUserInput = {
    create?: XOR<health_infoCreateWithoutUserInput, health_infoUncheckedCreateWithoutUserInput>
    connectOrCreate?: health_infoCreateOrConnectWithoutUserInput
    connect?: health_infoWhereUniqueInput
  }

  export type ordersUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ordersCreateWithoutUserInput, ordersUncheckedCreateWithoutUserInput> | ordersCreateWithoutUserInput[] | ordersUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ordersCreateOrConnectWithoutUserInput | ordersCreateOrConnectWithoutUserInput[]
    createMany?: ordersCreateManyUserInputEnvelope
    connect?: ordersWhereUniqueInput | ordersWhereUniqueInput[]
  }

  export type reviewsUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<reviewsCreateWithoutUserInput, reviewsUncheckedCreateWithoutUserInput> | reviewsCreateWithoutUserInput[] | reviewsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: reviewsCreateOrConnectWithoutUserInput | reviewsCreateOrConnectWithoutUserInput[]
    createMany?: reviewsCreateManyUserInputEnvelope
    connect?: reviewsWhereUniqueInput | reviewsWhereUniqueInput[]
  }

  export type userdiscountUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<userdiscountCreateWithoutUserInput, userdiscountUncheckedCreateWithoutUserInput> | userdiscountCreateWithoutUserInput[] | userdiscountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: userdiscountCreateOrConnectWithoutUserInput | userdiscountCreateOrConnectWithoutUserInput[]
    createMany?: userdiscountCreateManyUserInputEnvelope
    connect?: userdiscountWhereUniqueInput | userdiscountWhereUniqueInput[]
  }

  export type health_infoUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<health_infoCreateWithoutUserInput, health_infoUncheckedCreateWithoutUserInput>
    connectOrCreate?: health_infoCreateOrConnectWithoutUserInput
    connect?: health_infoWhereUniqueInput
  }

  export type ordersUpdateManyWithoutUserNestedInput = {
    create?: XOR<ordersCreateWithoutUserInput, ordersUncheckedCreateWithoutUserInput> | ordersCreateWithoutUserInput[] | ordersUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ordersCreateOrConnectWithoutUserInput | ordersCreateOrConnectWithoutUserInput[]
    upsert?: ordersUpsertWithWhereUniqueWithoutUserInput | ordersUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ordersCreateManyUserInputEnvelope
    set?: ordersWhereUniqueInput | ordersWhereUniqueInput[]
    disconnect?: ordersWhereUniqueInput | ordersWhereUniqueInput[]
    delete?: ordersWhereUniqueInput | ordersWhereUniqueInput[]
    connect?: ordersWhereUniqueInput | ordersWhereUniqueInput[]
    update?: ordersUpdateWithWhereUniqueWithoutUserInput | ordersUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ordersUpdateManyWithWhereWithoutUserInput | ordersUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ordersScalarWhereInput | ordersScalarWhereInput[]
  }

  export type reviewsUpdateManyWithoutUserNestedInput = {
    create?: XOR<reviewsCreateWithoutUserInput, reviewsUncheckedCreateWithoutUserInput> | reviewsCreateWithoutUserInput[] | reviewsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: reviewsCreateOrConnectWithoutUserInput | reviewsCreateOrConnectWithoutUserInput[]
    upsert?: reviewsUpsertWithWhereUniqueWithoutUserInput | reviewsUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: reviewsCreateManyUserInputEnvelope
    set?: reviewsWhereUniqueInput | reviewsWhereUniqueInput[]
    disconnect?: reviewsWhereUniqueInput | reviewsWhereUniqueInput[]
    delete?: reviewsWhereUniqueInput | reviewsWhereUniqueInput[]
    connect?: reviewsWhereUniqueInput | reviewsWhereUniqueInput[]
    update?: reviewsUpdateWithWhereUniqueWithoutUserInput | reviewsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: reviewsUpdateManyWithWhereWithoutUserInput | reviewsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: reviewsScalarWhereInput | reviewsScalarWhereInput[]
  }

  export type userdiscountUpdateManyWithoutUserNestedInput = {
    create?: XOR<userdiscountCreateWithoutUserInput, userdiscountUncheckedCreateWithoutUserInput> | userdiscountCreateWithoutUserInput[] | userdiscountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: userdiscountCreateOrConnectWithoutUserInput | userdiscountCreateOrConnectWithoutUserInput[]
    upsert?: userdiscountUpsertWithWhereUniqueWithoutUserInput | userdiscountUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: userdiscountCreateManyUserInputEnvelope
    set?: userdiscountWhereUniqueInput | userdiscountWhereUniqueInput[]
    disconnect?: userdiscountWhereUniqueInput | userdiscountWhereUniqueInput[]
    delete?: userdiscountWhereUniqueInput | userdiscountWhereUniqueInput[]
    connect?: userdiscountWhereUniqueInput | userdiscountWhereUniqueInput[]
    update?: userdiscountUpdateWithWhereUniqueWithoutUserInput | userdiscountUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: userdiscountUpdateManyWithWhereWithoutUserInput | userdiscountUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: userdiscountScalarWhereInput | userdiscountScalarWhereInput[]
  }

  export type health_infoUpdateOneWithoutUserNestedInput = {
    create?: XOR<health_infoCreateWithoutUserInput, health_infoUncheckedCreateWithoutUserInput>
    connectOrCreate?: health_infoCreateOrConnectWithoutUserInput
    upsert?: health_infoUpsertWithoutUserInput
    disconnect?: health_infoWhereInput | boolean
    delete?: health_infoWhereInput | boolean
    connect?: health_infoWhereUniqueInput
    update?: XOR<XOR<health_infoUpdateToOneWithWhereWithoutUserInput, health_infoUpdateWithoutUserInput>, health_infoUncheckedUpdateWithoutUserInput>
  }

  export type ordersUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ordersCreateWithoutUserInput, ordersUncheckedCreateWithoutUserInput> | ordersCreateWithoutUserInput[] | ordersUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ordersCreateOrConnectWithoutUserInput | ordersCreateOrConnectWithoutUserInput[]
    upsert?: ordersUpsertWithWhereUniqueWithoutUserInput | ordersUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ordersCreateManyUserInputEnvelope
    set?: ordersWhereUniqueInput | ordersWhereUniqueInput[]
    disconnect?: ordersWhereUniqueInput | ordersWhereUniqueInput[]
    delete?: ordersWhereUniqueInput | ordersWhereUniqueInput[]
    connect?: ordersWhereUniqueInput | ordersWhereUniqueInput[]
    update?: ordersUpdateWithWhereUniqueWithoutUserInput | ordersUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ordersUpdateManyWithWhereWithoutUserInput | ordersUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ordersScalarWhereInput | ordersScalarWhereInput[]
  }

  export type reviewsUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<reviewsCreateWithoutUserInput, reviewsUncheckedCreateWithoutUserInput> | reviewsCreateWithoutUserInput[] | reviewsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: reviewsCreateOrConnectWithoutUserInput | reviewsCreateOrConnectWithoutUserInput[]
    upsert?: reviewsUpsertWithWhereUniqueWithoutUserInput | reviewsUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: reviewsCreateManyUserInputEnvelope
    set?: reviewsWhereUniqueInput | reviewsWhereUniqueInput[]
    disconnect?: reviewsWhereUniqueInput | reviewsWhereUniqueInput[]
    delete?: reviewsWhereUniqueInput | reviewsWhereUniqueInput[]
    connect?: reviewsWhereUniqueInput | reviewsWhereUniqueInput[]
    update?: reviewsUpdateWithWhereUniqueWithoutUserInput | reviewsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: reviewsUpdateManyWithWhereWithoutUserInput | reviewsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: reviewsScalarWhereInput | reviewsScalarWhereInput[]
  }

  export type userdiscountUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<userdiscountCreateWithoutUserInput, userdiscountUncheckedCreateWithoutUserInput> | userdiscountCreateWithoutUserInput[] | userdiscountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: userdiscountCreateOrConnectWithoutUserInput | userdiscountCreateOrConnectWithoutUserInput[]
    upsert?: userdiscountUpsertWithWhereUniqueWithoutUserInput | userdiscountUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: userdiscountCreateManyUserInputEnvelope
    set?: userdiscountWhereUniqueInput | userdiscountWhereUniqueInput[]
    disconnect?: userdiscountWhereUniqueInput | userdiscountWhereUniqueInput[]
    delete?: userdiscountWhereUniqueInput | userdiscountWhereUniqueInput[]
    connect?: userdiscountWhereUniqueInput | userdiscountWhereUniqueInput[]
    update?: userdiscountUpdateWithWhereUniqueWithoutUserInput | userdiscountUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: userdiscountUpdateManyWithWhereWithoutUserInput | userdiscountUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: userdiscountScalarWhereInput | userdiscountScalarWhereInput[]
  }

  export type health_infoUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<health_infoCreateWithoutUserInput, health_infoUncheckedCreateWithoutUserInput>
    connectOrCreate?: health_infoCreateOrConnectWithoutUserInput
    upsert?: health_infoUpsertWithoutUserInput
    disconnect?: health_infoWhereInput | boolean
    delete?: health_infoWhereInput | boolean
    connect?: health_infoWhereUniqueInput
    update?: XOR<XOR<health_infoUpdateToOneWithWhereWithoutUserInput, health_infoUpdateWithoutUserInput>, health_infoUncheckedUpdateWithoutUserInput>
  }

  export type ProductCreateNestedManyWithoutCategoriesInput = {
    create?: XOR<ProductCreateWithoutCategoriesInput, ProductUncheckedCreateWithoutCategoriesInput> | ProductCreateWithoutCategoriesInput[] | ProductUncheckedCreateWithoutCategoriesInput[]
    connectOrCreate?: ProductCreateOrConnectWithoutCategoriesInput | ProductCreateOrConnectWithoutCategoriesInput[]
    createMany?: ProductCreateManyCategoriesInputEnvelope
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
  }

  export type ProductUncheckedCreateNestedManyWithoutCategoriesInput = {
    create?: XOR<ProductCreateWithoutCategoriesInput, ProductUncheckedCreateWithoutCategoriesInput> | ProductCreateWithoutCategoriesInput[] | ProductUncheckedCreateWithoutCategoriesInput[]
    connectOrCreate?: ProductCreateOrConnectWithoutCategoriesInput | ProductCreateOrConnectWithoutCategoriesInput[]
    createMany?: ProductCreateManyCategoriesInputEnvelope
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
  }

  export type ProductUpdateManyWithoutCategoriesNestedInput = {
    create?: XOR<ProductCreateWithoutCategoriesInput, ProductUncheckedCreateWithoutCategoriesInput> | ProductCreateWithoutCategoriesInput[] | ProductUncheckedCreateWithoutCategoriesInput[]
    connectOrCreate?: ProductCreateOrConnectWithoutCategoriesInput | ProductCreateOrConnectWithoutCategoriesInput[]
    upsert?: ProductUpsertWithWhereUniqueWithoutCategoriesInput | ProductUpsertWithWhereUniqueWithoutCategoriesInput[]
    createMany?: ProductCreateManyCategoriesInputEnvelope
    set?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    disconnect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    delete?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    update?: ProductUpdateWithWhereUniqueWithoutCategoriesInput | ProductUpdateWithWhereUniqueWithoutCategoriesInput[]
    updateMany?: ProductUpdateManyWithWhereWithoutCategoriesInput | ProductUpdateManyWithWhereWithoutCategoriesInput[]
    deleteMany?: ProductScalarWhereInput | ProductScalarWhereInput[]
  }

  export type ProductUncheckedUpdateManyWithoutCategoriesNestedInput = {
    create?: XOR<ProductCreateWithoutCategoriesInput, ProductUncheckedCreateWithoutCategoriesInput> | ProductCreateWithoutCategoriesInput[] | ProductUncheckedCreateWithoutCategoriesInput[]
    connectOrCreate?: ProductCreateOrConnectWithoutCategoriesInput | ProductCreateOrConnectWithoutCategoriesInput[]
    upsert?: ProductUpsertWithWhereUniqueWithoutCategoriesInput | ProductUpsertWithWhereUniqueWithoutCategoriesInput[]
    createMany?: ProductCreateManyCategoriesInputEnvelope
    set?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    disconnect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    delete?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    update?: ProductUpdateWithWhereUniqueWithoutCategoriesInput | ProductUpdateWithWhereUniqueWithoutCategoriesInput[]
    updateMany?: ProductUpdateManyWithWhereWithoutCategoriesInput | ProductUpdateManyWithWhereWithoutCategoriesInput[]
    deleteMany?: ProductScalarWhereInput | ProductScalarWhereInput[]
  }

  export type orderdetailCreateNestedManyWithoutProductInput = {
    create?: XOR<orderdetailCreateWithoutProductInput, orderdetailUncheckedCreateWithoutProductInput> | orderdetailCreateWithoutProductInput[] | orderdetailUncheckedCreateWithoutProductInput[]
    connectOrCreate?: orderdetailCreateOrConnectWithoutProductInput | orderdetailCreateOrConnectWithoutProductInput[]
    createMany?: orderdetailCreateManyProductInputEnvelope
    connect?: orderdetailWhereUniqueInput | orderdetailWhereUniqueInput[]
  }

  export type reviewsCreateNestedManyWithoutProductInput = {
    create?: XOR<reviewsCreateWithoutProductInput, reviewsUncheckedCreateWithoutProductInput> | reviewsCreateWithoutProductInput[] | reviewsUncheckedCreateWithoutProductInput[]
    connectOrCreate?: reviewsCreateOrConnectWithoutProductInput | reviewsCreateOrConnectWithoutProductInput[]
    createMany?: reviewsCreateManyProductInputEnvelope
    connect?: reviewsWhereUniqueInput | reviewsWhereUniqueInput[]
  }

  export type categoriesCreateNestedOneWithoutProductInput = {
    create?: XOR<categoriesCreateWithoutProductInput, categoriesUncheckedCreateWithoutProductInput>
    connectOrCreate?: categoriesCreateOrConnectWithoutProductInput
    connect?: categoriesWhereUniqueInput
  }

  export type orderdetailUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<orderdetailCreateWithoutProductInput, orderdetailUncheckedCreateWithoutProductInput> | orderdetailCreateWithoutProductInput[] | orderdetailUncheckedCreateWithoutProductInput[]
    connectOrCreate?: orderdetailCreateOrConnectWithoutProductInput | orderdetailCreateOrConnectWithoutProductInput[]
    createMany?: orderdetailCreateManyProductInputEnvelope
    connect?: orderdetailWhereUniqueInput | orderdetailWhereUniqueInput[]
  }

  export type reviewsUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<reviewsCreateWithoutProductInput, reviewsUncheckedCreateWithoutProductInput> | reviewsCreateWithoutProductInput[] | reviewsUncheckedCreateWithoutProductInput[]
    connectOrCreate?: reviewsCreateOrConnectWithoutProductInput | reviewsCreateOrConnectWithoutProductInput[]
    createMany?: reviewsCreateManyProductInputEnvelope
    connect?: reviewsWhereUniqueInput | reviewsWhereUniqueInput[]
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type orderdetailUpdateManyWithoutProductNestedInput = {
    create?: XOR<orderdetailCreateWithoutProductInput, orderdetailUncheckedCreateWithoutProductInput> | orderdetailCreateWithoutProductInput[] | orderdetailUncheckedCreateWithoutProductInput[]
    connectOrCreate?: orderdetailCreateOrConnectWithoutProductInput | orderdetailCreateOrConnectWithoutProductInput[]
    upsert?: orderdetailUpsertWithWhereUniqueWithoutProductInput | orderdetailUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: orderdetailCreateManyProductInputEnvelope
    set?: orderdetailWhereUniqueInput | orderdetailWhereUniqueInput[]
    disconnect?: orderdetailWhereUniqueInput | orderdetailWhereUniqueInput[]
    delete?: orderdetailWhereUniqueInput | orderdetailWhereUniqueInput[]
    connect?: orderdetailWhereUniqueInput | orderdetailWhereUniqueInput[]
    update?: orderdetailUpdateWithWhereUniqueWithoutProductInput | orderdetailUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: orderdetailUpdateManyWithWhereWithoutProductInput | orderdetailUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: orderdetailScalarWhereInput | orderdetailScalarWhereInput[]
  }

  export type reviewsUpdateManyWithoutProductNestedInput = {
    create?: XOR<reviewsCreateWithoutProductInput, reviewsUncheckedCreateWithoutProductInput> | reviewsCreateWithoutProductInput[] | reviewsUncheckedCreateWithoutProductInput[]
    connectOrCreate?: reviewsCreateOrConnectWithoutProductInput | reviewsCreateOrConnectWithoutProductInput[]
    upsert?: reviewsUpsertWithWhereUniqueWithoutProductInput | reviewsUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: reviewsCreateManyProductInputEnvelope
    set?: reviewsWhereUniqueInput | reviewsWhereUniqueInput[]
    disconnect?: reviewsWhereUniqueInput | reviewsWhereUniqueInput[]
    delete?: reviewsWhereUniqueInput | reviewsWhereUniqueInput[]
    connect?: reviewsWhereUniqueInput | reviewsWhereUniqueInput[]
    update?: reviewsUpdateWithWhereUniqueWithoutProductInput | reviewsUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: reviewsUpdateManyWithWhereWithoutProductInput | reviewsUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: reviewsScalarWhereInput | reviewsScalarWhereInput[]
  }

  export type categoriesUpdateOneWithoutProductNestedInput = {
    create?: XOR<categoriesCreateWithoutProductInput, categoriesUncheckedCreateWithoutProductInput>
    connectOrCreate?: categoriesCreateOrConnectWithoutProductInput
    upsert?: categoriesUpsertWithoutProductInput
    disconnect?: categoriesWhereInput | boolean
    delete?: categoriesWhereInput | boolean
    connect?: categoriesWhereUniqueInput
    update?: XOR<XOR<categoriesUpdateToOneWithWhereWithoutProductInput, categoriesUpdateWithoutProductInput>, categoriesUncheckedUpdateWithoutProductInput>
  }

  export type orderdetailUncheckedUpdateManyWithoutProductNestedInput = {
    create?: XOR<orderdetailCreateWithoutProductInput, orderdetailUncheckedCreateWithoutProductInput> | orderdetailCreateWithoutProductInput[] | orderdetailUncheckedCreateWithoutProductInput[]
    connectOrCreate?: orderdetailCreateOrConnectWithoutProductInput | orderdetailCreateOrConnectWithoutProductInput[]
    upsert?: orderdetailUpsertWithWhereUniqueWithoutProductInput | orderdetailUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: orderdetailCreateManyProductInputEnvelope
    set?: orderdetailWhereUniqueInput | orderdetailWhereUniqueInput[]
    disconnect?: orderdetailWhereUniqueInput | orderdetailWhereUniqueInput[]
    delete?: orderdetailWhereUniqueInput | orderdetailWhereUniqueInput[]
    connect?: orderdetailWhereUniqueInput | orderdetailWhereUniqueInput[]
    update?: orderdetailUpdateWithWhereUniqueWithoutProductInput | orderdetailUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: orderdetailUpdateManyWithWhereWithoutProductInput | orderdetailUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: orderdetailScalarWhereInput | orderdetailScalarWhereInput[]
  }

  export type reviewsUncheckedUpdateManyWithoutProductNestedInput = {
    create?: XOR<reviewsCreateWithoutProductInput, reviewsUncheckedCreateWithoutProductInput> | reviewsCreateWithoutProductInput[] | reviewsUncheckedCreateWithoutProductInput[]
    connectOrCreate?: reviewsCreateOrConnectWithoutProductInput | reviewsCreateOrConnectWithoutProductInput[]
    upsert?: reviewsUpsertWithWhereUniqueWithoutProductInput | reviewsUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: reviewsCreateManyProductInputEnvelope
    set?: reviewsWhereUniqueInput | reviewsWhereUniqueInput[]
    disconnect?: reviewsWhereUniqueInput | reviewsWhereUniqueInput[]
    delete?: reviewsWhereUniqueInput | reviewsWhereUniqueInput[]
    connect?: reviewsWhereUniqueInput | reviewsWhereUniqueInput[]
    update?: reviewsUpdateWithWhereUniqueWithoutProductInput | reviewsUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: reviewsUpdateManyWithWhereWithoutProductInput | reviewsUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: reviewsScalarWhereInput | reviewsScalarWhereInput[]
  }

  export type usersCreateNestedOneWithoutHealthInfoInput = {
    create?: XOR<usersCreateWithoutHealthInfoInput, usersUncheckedCreateWithoutHealthInfoInput>
    connectOrCreate?: usersCreateOrConnectWithoutHealthInfoInput
    connect?: usersWhereUniqueInput
  }

  export type usersUpdateOneRequiredWithoutHealthInfoNestedInput = {
    create?: XOR<usersCreateWithoutHealthInfoInput, usersUncheckedCreateWithoutHealthInfoInput>
    connectOrCreate?: usersCreateOrConnectWithoutHealthInfoInput
    upsert?: usersUpsertWithoutHealthInfoInput
    connect?: usersWhereUniqueInput
    update?: XOR<XOR<usersUpdateToOneWithWhereWithoutHealthInfoInput, usersUpdateWithoutHealthInfoInput>, usersUncheckedUpdateWithoutHealthInfoInput>
  }

  export type usersCreateNestedOneWithoutReviewsInput = {
    create?: XOR<usersCreateWithoutReviewsInput, usersUncheckedCreateWithoutReviewsInput>
    connectOrCreate?: usersCreateOrConnectWithoutReviewsInput
    connect?: usersWhereUniqueInput
  }

  export type ProductCreateNestedOneWithoutReviewsInput = {
    create?: XOR<ProductCreateWithoutReviewsInput, ProductUncheckedCreateWithoutReviewsInput>
    connectOrCreate?: ProductCreateOrConnectWithoutReviewsInput
    connect?: ProductWhereUniqueInput
  }

  export type usersUpdateOneRequiredWithoutReviewsNestedInput = {
    create?: XOR<usersCreateWithoutReviewsInput, usersUncheckedCreateWithoutReviewsInput>
    connectOrCreate?: usersCreateOrConnectWithoutReviewsInput
    upsert?: usersUpsertWithoutReviewsInput
    connect?: usersWhereUniqueInput
    update?: XOR<XOR<usersUpdateToOneWithWhereWithoutReviewsInput, usersUpdateWithoutReviewsInput>, usersUncheckedUpdateWithoutReviewsInput>
  }

  export type ProductUpdateOneRequiredWithoutReviewsNestedInput = {
    create?: XOR<ProductCreateWithoutReviewsInput, ProductUncheckedCreateWithoutReviewsInput>
    connectOrCreate?: ProductCreateOrConnectWithoutReviewsInput
    upsert?: ProductUpsertWithoutReviewsInput
    connect?: ProductWhereUniqueInput
    update?: XOR<XOR<ProductUpdateToOneWithWhereWithoutReviewsInput, ProductUpdateWithoutReviewsInput>, ProductUncheckedUpdateWithoutReviewsInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedEnumorders_order_statusNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.orders_order_status | Enumorders_order_statusFieldRefInput<$PrismaModel> | null
    in?: $Enums.orders_order_status[] | null
    notIn?: $Enums.orders_order_status[] | null
    not?: NestedEnumorders_order_statusNullableFilter<$PrismaModel> | $Enums.orders_order_status | null
  }

  export type NestedDecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[]
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[]
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type NestedEnumshipping_shipping_statusNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.shipping_shipping_status | Enumshipping_shipping_statusFieldRefInput<$PrismaModel> | null
    in?: $Enums.shipping_shipping_status[] | null
    notIn?: $Enums.shipping_shipping_status[] | null
    not?: NestedEnumshipping_shipping_statusNullableFilter<$PrismaModel> | $Enums.shipping_shipping_status | null
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDecimalNullableFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedEnumorders_order_statusNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.orders_order_status | Enumorders_order_statusFieldRefInput<$PrismaModel> | null
    in?: $Enums.orders_order_status[] | null
    notIn?: $Enums.orders_order_status[] | null
    not?: NestedEnumorders_order_statusNullableWithAggregatesFilter<$PrismaModel> | $Enums.orders_order_status | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumorders_order_statusNullableFilter<$PrismaModel>
    _max?: NestedEnumorders_order_statusNullableFilter<$PrismaModel>
  }

  export type NestedDecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[]
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[]
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type NestedEnumshipping_shipping_statusNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.shipping_shipping_status | Enumshipping_shipping_statusFieldRefInput<$PrismaModel> | null
    in?: $Enums.shipping_shipping_status[] | null
    notIn?: $Enums.shipping_shipping_status[] | null
    not?: NestedEnumshipping_shipping_statusNullableWithAggregatesFilter<$PrismaModel> | $Enums.shipping_shipping_status | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumshipping_shipping_statusNullableFilter<$PrismaModel>
    _max?: NestedEnumshipping_shipping_statusNullableFilter<$PrismaModel>
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDecimalNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedDecimalNullableFilter<$PrismaModel>
    _sum?: NestedDecimalNullableFilter<$PrismaModel>
    _min?: NestedDecimalNullableFilter<$PrismaModel>
    _max?: NestedDecimalNullableFilter<$PrismaModel>
  }

  export type NestedEnumdiscount_statusFilter<$PrismaModel = never> = {
    equals?: $Enums.discount_status | Enumdiscount_statusFieldRefInput<$PrismaModel>
    in?: $Enums.discount_status[]
    notIn?: $Enums.discount_status[]
    not?: NestedEnumdiscount_statusFilter<$PrismaModel> | $Enums.discount_status
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedEnumdiscount_statusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.discount_status | Enumdiscount_statusFieldRefInput<$PrismaModel>
    in?: $Enums.discount_status[]
    notIn?: $Enums.discount_status[]
    not?: NestedEnumdiscount_statusWithAggregatesFilter<$PrismaModel> | $Enums.discount_status
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumdiscount_statusFilter<$PrismaModel>
    _max?: NestedEnumdiscount_statusFilter<$PrismaModel>
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedEnumuserdiscount_statusFilter<$PrismaModel = never> = {
    equals?: $Enums.userdiscount_status | Enumuserdiscount_statusFieldRefInput<$PrismaModel>
    in?: $Enums.userdiscount_status[]
    notIn?: $Enums.userdiscount_status[]
    not?: NestedEnumuserdiscount_statusFilter<$PrismaModel> | $Enums.userdiscount_status
  }

  export type NestedEnumuserdiscount_statusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.userdiscount_status | Enumuserdiscount_statusFieldRefInput<$PrismaModel>
    in?: $Enums.userdiscount_status[]
    notIn?: $Enums.userdiscount_status[]
    not?: NestedEnumuserdiscount_statusWithAggregatesFilter<$PrismaModel> | $Enums.userdiscount_status
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumuserdiscount_statusFilter<$PrismaModel>
    _max?: NestedEnumuserdiscount_statusFilter<$PrismaModel>
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedEnumpayments_payment_statusNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.payments_payment_status | Enumpayments_payment_statusFieldRefInput<$PrismaModel> | null
    in?: $Enums.payments_payment_status[] | null
    notIn?: $Enums.payments_payment_status[] | null
    not?: NestedEnumpayments_payment_statusNullableFilter<$PrismaModel> | $Enums.payments_payment_status | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedEnumpayments_payment_statusNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.payments_payment_status | Enumpayments_payment_statusFieldRefInput<$PrismaModel> | null
    in?: $Enums.payments_payment_status[] | null
    notIn?: $Enums.payments_payment_status[] | null
    not?: NestedEnumpayments_payment_statusNullableWithAggregatesFilter<$PrismaModel> | $Enums.payments_payment_status | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumpayments_payment_statusNullableFilter<$PrismaModel>
    _max?: NestedEnumpayments_payment_statusNullableFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type discountsCreateWithoutOrdersInput = {
    discount_code: string
    discount_amount?: Decimal | DecimalJsLike | number | string | null
    status?: $Enums.discount_status
    discount_percent?: number | null
    expiration_date?: Date | string | null
    userdiscount?: userdiscountCreateNestedManyWithoutDiscountInput
  }

  export type discountsUncheckedCreateWithoutOrdersInput = {
    discount_id?: number
    discount_code: string
    discount_amount?: Decimal | DecimalJsLike | number | string | null
    status?: $Enums.discount_status
    discount_percent?: number | null
    expiration_date?: Date | string | null
    userdiscount?: userdiscountUncheckedCreateNestedManyWithoutDiscountInput
  }

  export type discountsCreateOrConnectWithoutOrdersInput = {
    where: discountsWhereUniqueInput
    create: XOR<discountsCreateWithoutOrdersInput, discountsUncheckedCreateWithoutOrdersInput>
  }

  export type usersCreateWithoutOrdersInput = {
    UserName: string
    Password: string
    Status?: string | null
    Role?: string | null
    resetToken?: string | null
    resetTokenExpiry?: Date | string | null
    reviews?: reviewsCreateNestedManyWithoutUserInput
    userdiscount?: userdiscountCreateNestedManyWithoutUserInput
    healthInfo?: health_infoCreateNestedOneWithoutUserInput
  }

  export type usersUncheckedCreateWithoutOrdersInput = {
    UserName: string
    UserID?: number
    Password: string
    Status?: string | null
    Role?: string | null
    resetToken?: string | null
    resetTokenExpiry?: Date | string | null
    reviews?: reviewsUncheckedCreateNestedManyWithoutUserInput
    userdiscount?: userdiscountUncheckedCreateNestedManyWithoutUserInput
    healthInfo?: health_infoUncheckedCreateNestedOneWithoutUserInput
  }

  export type usersCreateOrConnectWithoutOrdersInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutOrdersInput, usersUncheckedCreateWithoutOrdersInput>
  }

  export type orderdetailCreateWithoutOrdersInput = {
    quantity: number
    unit_price: Decimal | DecimalJsLike | number | string
    product: ProductCreateNestedOneWithoutOrderdetailsInput
  }

  export type orderdetailUncheckedCreateWithoutOrdersInput = {
    product_id: number
    quantity: number
    unit_price: Decimal | DecimalJsLike | number | string
  }

  export type orderdetailCreateOrConnectWithoutOrdersInput = {
    where: orderdetailWhereUniqueInput
    create: XOR<orderdetailCreateWithoutOrdersInput, orderdetailUncheckedCreateWithoutOrdersInput>
  }

  export type orderdetailCreateManyOrdersInputEnvelope = {
    data: orderdetailCreateManyOrdersInput | orderdetailCreateManyOrdersInput[]
    skipDuplicates?: boolean
  }

  export type paymentsCreateWithoutOrdersInput = {
    payment_method?: string | null
    payment_date?: Date | string | null
    amount: Decimal | DecimalJsLike | number | string
    remark?: string | null
    payment_status?: $Enums.payments_payment_status | null
    payment_Image?: string | null
  }

  export type paymentsUncheckedCreateWithoutOrdersInput = {
    payment_id?: number
    payment_method?: string | null
    payment_date?: Date | string | null
    amount: Decimal | DecimalJsLike | number | string
    remark?: string | null
    payment_status?: $Enums.payments_payment_status | null
    payment_Image?: string | null
  }

  export type paymentsCreateOrConnectWithoutOrdersInput = {
    where: paymentsWhereUniqueInput
    create: XOR<paymentsCreateWithoutOrdersInput, paymentsUncheckedCreateWithoutOrdersInput>
  }

  export type paymentsCreateManyOrdersInputEnvelope = {
    data: paymentsCreateManyOrdersInput | paymentsCreateManyOrdersInput[]
    skipDuplicates?: boolean
  }

  export type discountsUpsertWithoutOrdersInput = {
    update: XOR<discountsUpdateWithoutOrdersInput, discountsUncheckedUpdateWithoutOrdersInput>
    create: XOR<discountsCreateWithoutOrdersInput, discountsUncheckedCreateWithoutOrdersInput>
    where?: discountsWhereInput
  }

  export type discountsUpdateToOneWithWhereWithoutOrdersInput = {
    where?: discountsWhereInput
    data: XOR<discountsUpdateWithoutOrdersInput, discountsUncheckedUpdateWithoutOrdersInput>
  }

  export type discountsUpdateWithoutOrdersInput = {
    discount_code?: StringFieldUpdateOperationsInput | string
    discount_amount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    status?: Enumdiscount_statusFieldUpdateOperationsInput | $Enums.discount_status
    discount_percent?: NullableFloatFieldUpdateOperationsInput | number | null
    expiration_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    userdiscount?: userdiscountUpdateManyWithoutDiscountNestedInput
  }

  export type discountsUncheckedUpdateWithoutOrdersInput = {
    discount_id?: IntFieldUpdateOperationsInput | number
    discount_code?: StringFieldUpdateOperationsInput | string
    discount_amount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    status?: Enumdiscount_statusFieldUpdateOperationsInput | $Enums.discount_status
    discount_percent?: NullableFloatFieldUpdateOperationsInput | number | null
    expiration_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    userdiscount?: userdiscountUncheckedUpdateManyWithoutDiscountNestedInput
  }

  export type usersUpsertWithoutOrdersInput = {
    update: XOR<usersUpdateWithoutOrdersInput, usersUncheckedUpdateWithoutOrdersInput>
    create: XOR<usersCreateWithoutOrdersInput, usersUncheckedCreateWithoutOrdersInput>
    where?: usersWhereInput
  }

  export type usersUpdateToOneWithWhereWithoutOrdersInput = {
    where?: usersWhereInput
    data: XOR<usersUpdateWithoutOrdersInput, usersUncheckedUpdateWithoutOrdersInput>
  }

  export type usersUpdateWithoutOrdersInput = {
    UserName?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
    Status?: NullableStringFieldUpdateOperationsInput | string | null
    Role?: NullableStringFieldUpdateOperationsInput | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reviews?: reviewsUpdateManyWithoutUserNestedInput
    userdiscount?: userdiscountUpdateManyWithoutUserNestedInput
    healthInfo?: health_infoUpdateOneWithoutUserNestedInput
  }

  export type usersUncheckedUpdateWithoutOrdersInput = {
    UserName?: StringFieldUpdateOperationsInput | string
    UserID?: IntFieldUpdateOperationsInput | number
    Password?: StringFieldUpdateOperationsInput | string
    Status?: NullableStringFieldUpdateOperationsInput | string | null
    Role?: NullableStringFieldUpdateOperationsInput | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reviews?: reviewsUncheckedUpdateManyWithoutUserNestedInput
    userdiscount?: userdiscountUncheckedUpdateManyWithoutUserNestedInput
    healthInfo?: health_infoUncheckedUpdateOneWithoutUserNestedInput
  }

  export type orderdetailUpsertWithWhereUniqueWithoutOrdersInput = {
    where: orderdetailWhereUniqueInput
    update: XOR<orderdetailUpdateWithoutOrdersInput, orderdetailUncheckedUpdateWithoutOrdersInput>
    create: XOR<orderdetailCreateWithoutOrdersInput, orderdetailUncheckedCreateWithoutOrdersInput>
  }

  export type orderdetailUpdateWithWhereUniqueWithoutOrdersInput = {
    where: orderdetailWhereUniqueInput
    data: XOR<orderdetailUpdateWithoutOrdersInput, orderdetailUncheckedUpdateWithoutOrdersInput>
  }

  export type orderdetailUpdateManyWithWhereWithoutOrdersInput = {
    where: orderdetailScalarWhereInput
    data: XOR<orderdetailUpdateManyMutationInput, orderdetailUncheckedUpdateManyWithoutOrdersInput>
  }

  export type orderdetailScalarWhereInput = {
    AND?: orderdetailScalarWhereInput | orderdetailScalarWhereInput[]
    OR?: orderdetailScalarWhereInput[]
    NOT?: orderdetailScalarWhereInput | orderdetailScalarWhereInput[]
    order_id?: IntFilter<"orderdetail"> | number
    product_id?: IntFilter<"orderdetail"> | number
    quantity?: IntFilter<"orderdetail"> | number
    unit_price?: DecimalFilter<"orderdetail"> | Decimal | DecimalJsLike | number | string
  }

  export type paymentsUpsertWithWhereUniqueWithoutOrdersInput = {
    where: paymentsWhereUniqueInput
    update: XOR<paymentsUpdateWithoutOrdersInput, paymentsUncheckedUpdateWithoutOrdersInput>
    create: XOR<paymentsCreateWithoutOrdersInput, paymentsUncheckedCreateWithoutOrdersInput>
  }

  export type paymentsUpdateWithWhereUniqueWithoutOrdersInput = {
    where: paymentsWhereUniqueInput
    data: XOR<paymentsUpdateWithoutOrdersInput, paymentsUncheckedUpdateWithoutOrdersInput>
  }

  export type paymentsUpdateManyWithWhereWithoutOrdersInput = {
    where: paymentsScalarWhereInput
    data: XOR<paymentsUpdateManyMutationInput, paymentsUncheckedUpdateManyWithoutOrdersInput>
  }

  export type paymentsScalarWhereInput = {
    AND?: paymentsScalarWhereInput | paymentsScalarWhereInput[]
    OR?: paymentsScalarWhereInput[]
    NOT?: paymentsScalarWhereInput | paymentsScalarWhereInput[]
    payment_id?: IntFilter<"payments"> | number
    order_id?: IntFilter<"payments"> | number
    payment_method?: StringNullableFilter<"payments"> | string | null
    payment_date?: DateTimeNullableFilter<"payments"> | Date | string | null
    amount?: DecimalFilter<"payments"> | Decimal | DecimalJsLike | number | string
    remark?: StringNullableFilter<"payments"> | string | null
    payment_status?: Enumpayments_payment_statusNullableFilter<"payments"> | $Enums.payments_payment_status | null
    payment_Image?: StringNullableFilter<"payments"> | string | null
  }

  export type ordersCreateWithoutDiscountInput = {
    order_date?: Date | string
    order_status?: $Enums.orders_order_status | null
    total_amount: Decimal | DecimalJsLike | number | string
    shipping_method?: $Enums.shipping_shipping_status | null
    shipping_price: Decimal | DecimalJsLike | number | string
    full_name: string
    shipping_address: string
    phone_number: string
    original_amount?: Decimal | DecimalJsLike | number | string | null
    discount_amount?: Decimal | DecimalJsLike | number | string | null
    final_amount?: Decimal | DecimalJsLike | number | string | null
    user: usersCreateNestedOneWithoutOrdersInput
    orderdetails?: orderdetailCreateNestedManyWithoutOrdersInput
    payments?: paymentsCreateNestedManyWithoutOrdersInput
  }

  export type ordersUncheckedCreateWithoutDiscountInput = {
    order_id?: number
    UserID: number
    order_date?: Date | string
    order_status?: $Enums.orders_order_status | null
    total_amount: Decimal | DecimalJsLike | number | string
    shipping_method?: $Enums.shipping_shipping_status | null
    shipping_price: Decimal | DecimalJsLike | number | string
    full_name: string
    shipping_address: string
    phone_number: string
    original_amount?: Decimal | DecimalJsLike | number | string | null
    discount_amount?: Decimal | DecimalJsLike | number | string | null
    final_amount?: Decimal | DecimalJsLike | number | string | null
    orderdetails?: orderdetailUncheckedCreateNestedManyWithoutOrdersInput
    payments?: paymentsUncheckedCreateNestedManyWithoutOrdersInput
  }

  export type ordersCreateOrConnectWithoutDiscountInput = {
    where: ordersWhereUniqueInput
    create: XOR<ordersCreateWithoutDiscountInput, ordersUncheckedCreateWithoutDiscountInput>
  }

  export type ordersCreateManyDiscountInputEnvelope = {
    data: ordersCreateManyDiscountInput | ordersCreateManyDiscountInput[]
    skipDuplicates?: boolean
  }

  export type userdiscountCreateWithoutDiscountInput = {
    created_at?: Date | string
    status?: $Enums.userdiscount_status
    user: usersCreateNestedOneWithoutUserdiscountInput
  }

  export type userdiscountUncheckedCreateWithoutDiscountInput = {
    user_discount_id?: number
    UserID: number
    created_at?: Date | string
    status?: $Enums.userdiscount_status
  }

  export type userdiscountCreateOrConnectWithoutDiscountInput = {
    where: userdiscountWhereUniqueInput
    create: XOR<userdiscountCreateWithoutDiscountInput, userdiscountUncheckedCreateWithoutDiscountInput>
  }

  export type userdiscountCreateManyDiscountInputEnvelope = {
    data: userdiscountCreateManyDiscountInput | userdiscountCreateManyDiscountInput[]
    skipDuplicates?: boolean
  }

  export type ordersUpsertWithWhereUniqueWithoutDiscountInput = {
    where: ordersWhereUniqueInput
    update: XOR<ordersUpdateWithoutDiscountInput, ordersUncheckedUpdateWithoutDiscountInput>
    create: XOR<ordersCreateWithoutDiscountInput, ordersUncheckedCreateWithoutDiscountInput>
  }

  export type ordersUpdateWithWhereUniqueWithoutDiscountInput = {
    where: ordersWhereUniqueInput
    data: XOR<ordersUpdateWithoutDiscountInput, ordersUncheckedUpdateWithoutDiscountInput>
  }

  export type ordersUpdateManyWithWhereWithoutDiscountInput = {
    where: ordersScalarWhereInput
    data: XOR<ordersUpdateManyMutationInput, ordersUncheckedUpdateManyWithoutDiscountInput>
  }

  export type ordersScalarWhereInput = {
    AND?: ordersScalarWhereInput | ordersScalarWhereInput[]
    OR?: ordersScalarWhereInput[]
    NOT?: ordersScalarWhereInput | ordersScalarWhereInput[]
    order_id?: IntFilter<"orders"> | number
    UserID?: IntFilter<"orders"> | number
    order_date?: DateTimeFilter<"orders"> | Date | string
    order_status?: Enumorders_order_statusNullableFilter<"orders"> | $Enums.orders_order_status | null
    total_amount?: DecimalFilter<"orders"> | Decimal | DecimalJsLike | number | string
    shipping_method?: Enumshipping_shipping_statusNullableFilter<"orders"> | $Enums.shipping_shipping_status | null
    shipping_price?: DecimalFilter<"orders"> | Decimal | DecimalJsLike | number | string
    full_name?: StringFilter<"orders"> | string
    shipping_address?: StringFilter<"orders"> | string
    phone_number?: StringFilter<"orders"> | string
    discount_id?: IntNullableFilter<"orders"> | number | null
    original_amount?: DecimalNullableFilter<"orders"> | Decimal | DecimalJsLike | number | string | null
    discount_amount?: DecimalNullableFilter<"orders"> | Decimal | DecimalJsLike | number | string | null
    final_amount?: DecimalNullableFilter<"orders"> | Decimal | DecimalJsLike | number | string | null
  }

  export type userdiscountUpsertWithWhereUniqueWithoutDiscountInput = {
    where: userdiscountWhereUniqueInput
    update: XOR<userdiscountUpdateWithoutDiscountInput, userdiscountUncheckedUpdateWithoutDiscountInput>
    create: XOR<userdiscountCreateWithoutDiscountInput, userdiscountUncheckedCreateWithoutDiscountInput>
  }

  export type userdiscountUpdateWithWhereUniqueWithoutDiscountInput = {
    where: userdiscountWhereUniqueInput
    data: XOR<userdiscountUpdateWithoutDiscountInput, userdiscountUncheckedUpdateWithoutDiscountInput>
  }

  export type userdiscountUpdateManyWithWhereWithoutDiscountInput = {
    where: userdiscountScalarWhereInput
    data: XOR<userdiscountUpdateManyMutationInput, userdiscountUncheckedUpdateManyWithoutDiscountInput>
  }

  export type userdiscountScalarWhereInput = {
    AND?: userdiscountScalarWhereInput | userdiscountScalarWhereInput[]
    OR?: userdiscountScalarWhereInput[]
    NOT?: userdiscountScalarWhereInput | userdiscountScalarWhereInput[]
    user_discount_id?: IntFilter<"userdiscount"> | number
    UserID?: IntFilter<"userdiscount"> | number
    discount_id?: IntFilter<"userdiscount"> | number
    created_at?: DateTimeFilter<"userdiscount"> | Date | string
    status?: Enumuserdiscount_statusFilter<"userdiscount"> | $Enums.userdiscount_status
  }

  export type usersCreateWithoutUserdiscountInput = {
    UserName: string
    Password: string
    Status?: string | null
    Role?: string | null
    resetToken?: string | null
    resetTokenExpiry?: Date | string | null
    orders?: ordersCreateNestedManyWithoutUserInput
    reviews?: reviewsCreateNestedManyWithoutUserInput
    healthInfo?: health_infoCreateNestedOneWithoutUserInput
  }

  export type usersUncheckedCreateWithoutUserdiscountInput = {
    UserName: string
    UserID?: number
    Password: string
    Status?: string | null
    Role?: string | null
    resetToken?: string | null
    resetTokenExpiry?: Date | string | null
    orders?: ordersUncheckedCreateNestedManyWithoutUserInput
    reviews?: reviewsUncheckedCreateNestedManyWithoutUserInput
    healthInfo?: health_infoUncheckedCreateNestedOneWithoutUserInput
  }

  export type usersCreateOrConnectWithoutUserdiscountInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutUserdiscountInput, usersUncheckedCreateWithoutUserdiscountInput>
  }

  export type discountsCreateWithoutUserdiscountInput = {
    discount_code: string
    discount_amount?: Decimal | DecimalJsLike | number | string | null
    status?: $Enums.discount_status
    discount_percent?: number | null
    expiration_date?: Date | string | null
    orders?: ordersCreateNestedManyWithoutDiscountInput
  }

  export type discountsUncheckedCreateWithoutUserdiscountInput = {
    discount_id?: number
    discount_code: string
    discount_amount?: Decimal | DecimalJsLike | number | string | null
    status?: $Enums.discount_status
    discount_percent?: number | null
    expiration_date?: Date | string | null
    orders?: ordersUncheckedCreateNestedManyWithoutDiscountInput
  }

  export type discountsCreateOrConnectWithoutUserdiscountInput = {
    where: discountsWhereUniqueInput
    create: XOR<discountsCreateWithoutUserdiscountInput, discountsUncheckedCreateWithoutUserdiscountInput>
  }

  export type usersUpsertWithoutUserdiscountInput = {
    update: XOR<usersUpdateWithoutUserdiscountInput, usersUncheckedUpdateWithoutUserdiscountInput>
    create: XOR<usersCreateWithoutUserdiscountInput, usersUncheckedCreateWithoutUserdiscountInput>
    where?: usersWhereInput
  }

  export type usersUpdateToOneWithWhereWithoutUserdiscountInput = {
    where?: usersWhereInput
    data: XOR<usersUpdateWithoutUserdiscountInput, usersUncheckedUpdateWithoutUserdiscountInput>
  }

  export type usersUpdateWithoutUserdiscountInput = {
    UserName?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
    Status?: NullableStringFieldUpdateOperationsInput | string | null
    Role?: NullableStringFieldUpdateOperationsInput | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    orders?: ordersUpdateManyWithoutUserNestedInput
    reviews?: reviewsUpdateManyWithoutUserNestedInput
    healthInfo?: health_infoUpdateOneWithoutUserNestedInput
  }

  export type usersUncheckedUpdateWithoutUserdiscountInput = {
    UserName?: StringFieldUpdateOperationsInput | string
    UserID?: IntFieldUpdateOperationsInput | number
    Password?: StringFieldUpdateOperationsInput | string
    Status?: NullableStringFieldUpdateOperationsInput | string | null
    Role?: NullableStringFieldUpdateOperationsInput | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    orders?: ordersUncheckedUpdateManyWithoutUserNestedInput
    reviews?: reviewsUncheckedUpdateManyWithoutUserNestedInput
    healthInfo?: health_infoUncheckedUpdateOneWithoutUserNestedInput
  }

  export type discountsUpsertWithoutUserdiscountInput = {
    update: XOR<discountsUpdateWithoutUserdiscountInput, discountsUncheckedUpdateWithoutUserdiscountInput>
    create: XOR<discountsCreateWithoutUserdiscountInput, discountsUncheckedCreateWithoutUserdiscountInput>
    where?: discountsWhereInput
  }

  export type discountsUpdateToOneWithWhereWithoutUserdiscountInput = {
    where?: discountsWhereInput
    data: XOR<discountsUpdateWithoutUserdiscountInput, discountsUncheckedUpdateWithoutUserdiscountInput>
  }

  export type discountsUpdateWithoutUserdiscountInput = {
    discount_code?: StringFieldUpdateOperationsInput | string
    discount_amount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    status?: Enumdiscount_statusFieldUpdateOperationsInput | $Enums.discount_status
    discount_percent?: NullableFloatFieldUpdateOperationsInput | number | null
    expiration_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    orders?: ordersUpdateManyWithoutDiscountNestedInput
  }

  export type discountsUncheckedUpdateWithoutUserdiscountInput = {
    discount_id?: IntFieldUpdateOperationsInput | number
    discount_code?: StringFieldUpdateOperationsInput | string
    discount_amount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    status?: Enumdiscount_statusFieldUpdateOperationsInput | $Enums.discount_status
    discount_percent?: NullableFloatFieldUpdateOperationsInput | number | null
    expiration_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    orders?: ordersUncheckedUpdateManyWithoutDiscountNestedInput
  }

  export type ordersCreateWithoutOrderdetailsInput = {
    order_date?: Date | string
    order_status?: $Enums.orders_order_status | null
    total_amount: Decimal | DecimalJsLike | number | string
    shipping_method?: $Enums.shipping_shipping_status | null
    shipping_price: Decimal | DecimalJsLike | number | string
    full_name: string
    shipping_address: string
    phone_number: string
    original_amount?: Decimal | DecimalJsLike | number | string | null
    discount_amount?: Decimal | DecimalJsLike | number | string | null
    final_amount?: Decimal | DecimalJsLike | number | string | null
    discount?: discountsCreateNestedOneWithoutOrdersInput
    user: usersCreateNestedOneWithoutOrdersInput
    payments?: paymentsCreateNestedManyWithoutOrdersInput
  }

  export type ordersUncheckedCreateWithoutOrderdetailsInput = {
    order_id?: number
    UserID: number
    order_date?: Date | string
    order_status?: $Enums.orders_order_status | null
    total_amount: Decimal | DecimalJsLike | number | string
    shipping_method?: $Enums.shipping_shipping_status | null
    shipping_price: Decimal | DecimalJsLike | number | string
    full_name: string
    shipping_address: string
    phone_number: string
    discount_id?: number | null
    original_amount?: Decimal | DecimalJsLike | number | string | null
    discount_amount?: Decimal | DecimalJsLike | number | string | null
    final_amount?: Decimal | DecimalJsLike | number | string | null
    payments?: paymentsUncheckedCreateNestedManyWithoutOrdersInput
  }

  export type ordersCreateOrConnectWithoutOrderdetailsInput = {
    where: ordersWhereUniqueInput
    create: XOR<ordersCreateWithoutOrderdetailsInput, ordersUncheckedCreateWithoutOrderdetailsInput>
  }

  export type ProductCreateWithoutOrderdetailsInput = {
    name: string
    description: string
    price: number
    size: number
    Nutritional_value: string
    taste: string
    image_url: string
    reviews?: reviewsCreateNestedManyWithoutProductInput
    categories?: categoriesCreateNestedOneWithoutProductInput
  }

  export type ProductUncheckedCreateWithoutOrderdetailsInput = {
    product_id?: number
    name: string
    description: string
    price: number
    CategoryID?: number | null
    size: number
    Nutritional_value: string
    taste: string
    image_url: string
    reviews?: reviewsUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductCreateOrConnectWithoutOrderdetailsInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutOrderdetailsInput, ProductUncheckedCreateWithoutOrderdetailsInput>
  }

  export type ordersUpsertWithoutOrderdetailsInput = {
    update: XOR<ordersUpdateWithoutOrderdetailsInput, ordersUncheckedUpdateWithoutOrderdetailsInput>
    create: XOR<ordersCreateWithoutOrderdetailsInput, ordersUncheckedCreateWithoutOrderdetailsInput>
    where?: ordersWhereInput
  }

  export type ordersUpdateToOneWithWhereWithoutOrderdetailsInput = {
    where?: ordersWhereInput
    data: XOR<ordersUpdateWithoutOrderdetailsInput, ordersUncheckedUpdateWithoutOrderdetailsInput>
  }

  export type ordersUpdateWithoutOrderdetailsInput = {
    order_date?: DateTimeFieldUpdateOperationsInput | Date | string
    order_status?: NullableEnumorders_order_statusFieldUpdateOperationsInput | $Enums.orders_order_status | null
    total_amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    shipping_method?: NullableEnumshipping_shipping_statusFieldUpdateOperationsInput | $Enums.shipping_shipping_status | null
    shipping_price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    full_name?: StringFieldUpdateOperationsInput | string
    shipping_address?: StringFieldUpdateOperationsInput | string
    phone_number?: StringFieldUpdateOperationsInput | string
    original_amount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    discount_amount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    final_amount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    discount?: discountsUpdateOneWithoutOrdersNestedInput
    user?: usersUpdateOneRequiredWithoutOrdersNestedInput
    payments?: paymentsUpdateManyWithoutOrdersNestedInput
  }

  export type ordersUncheckedUpdateWithoutOrderdetailsInput = {
    order_id?: IntFieldUpdateOperationsInput | number
    UserID?: IntFieldUpdateOperationsInput | number
    order_date?: DateTimeFieldUpdateOperationsInput | Date | string
    order_status?: NullableEnumorders_order_statusFieldUpdateOperationsInput | $Enums.orders_order_status | null
    total_amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    shipping_method?: NullableEnumshipping_shipping_statusFieldUpdateOperationsInput | $Enums.shipping_shipping_status | null
    shipping_price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    full_name?: StringFieldUpdateOperationsInput | string
    shipping_address?: StringFieldUpdateOperationsInput | string
    phone_number?: StringFieldUpdateOperationsInput | string
    discount_id?: NullableIntFieldUpdateOperationsInput | number | null
    original_amount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    discount_amount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    final_amount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    payments?: paymentsUncheckedUpdateManyWithoutOrdersNestedInput
  }

  export type ProductUpsertWithoutOrderdetailsInput = {
    update: XOR<ProductUpdateWithoutOrderdetailsInput, ProductUncheckedUpdateWithoutOrderdetailsInput>
    create: XOR<ProductCreateWithoutOrderdetailsInput, ProductUncheckedCreateWithoutOrderdetailsInput>
    where?: ProductWhereInput
  }

  export type ProductUpdateToOneWithWhereWithoutOrderdetailsInput = {
    where?: ProductWhereInput
    data: XOR<ProductUpdateWithoutOrderdetailsInput, ProductUncheckedUpdateWithoutOrderdetailsInput>
  }

  export type ProductUpdateWithoutOrderdetailsInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    size?: FloatFieldUpdateOperationsInput | number
    Nutritional_value?: StringFieldUpdateOperationsInput | string
    taste?: StringFieldUpdateOperationsInput | string
    image_url?: StringFieldUpdateOperationsInput | string
    reviews?: reviewsUpdateManyWithoutProductNestedInput
    categories?: categoriesUpdateOneWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateWithoutOrderdetailsInput = {
    product_id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    CategoryID?: NullableIntFieldUpdateOperationsInput | number | null
    size?: FloatFieldUpdateOperationsInput | number
    Nutritional_value?: StringFieldUpdateOperationsInput | string
    taste?: StringFieldUpdateOperationsInput | string
    image_url?: StringFieldUpdateOperationsInput | string
    reviews?: reviewsUncheckedUpdateManyWithoutProductNestedInput
  }

  export type ordersCreateWithoutPaymentsInput = {
    order_date?: Date | string
    order_status?: $Enums.orders_order_status | null
    total_amount: Decimal | DecimalJsLike | number | string
    shipping_method?: $Enums.shipping_shipping_status | null
    shipping_price: Decimal | DecimalJsLike | number | string
    full_name: string
    shipping_address: string
    phone_number: string
    original_amount?: Decimal | DecimalJsLike | number | string | null
    discount_amount?: Decimal | DecimalJsLike | number | string | null
    final_amount?: Decimal | DecimalJsLike | number | string | null
    discount?: discountsCreateNestedOneWithoutOrdersInput
    user: usersCreateNestedOneWithoutOrdersInput
    orderdetails?: orderdetailCreateNestedManyWithoutOrdersInput
  }

  export type ordersUncheckedCreateWithoutPaymentsInput = {
    order_id?: number
    UserID: number
    order_date?: Date | string
    order_status?: $Enums.orders_order_status | null
    total_amount: Decimal | DecimalJsLike | number | string
    shipping_method?: $Enums.shipping_shipping_status | null
    shipping_price: Decimal | DecimalJsLike | number | string
    full_name: string
    shipping_address: string
    phone_number: string
    discount_id?: number | null
    original_amount?: Decimal | DecimalJsLike | number | string | null
    discount_amount?: Decimal | DecimalJsLike | number | string | null
    final_amount?: Decimal | DecimalJsLike | number | string | null
    orderdetails?: orderdetailUncheckedCreateNestedManyWithoutOrdersInput
  }

  export type ordersCreateOrConnectWithoutPaymentsInput = {
    where: ordersWhereUniqueInput
    create: XOR<ordersCreateWithoutPaymentsInput, ordersUncheckedCreateWithoutPaymentsInput>
  }

  export type ordersUpsertWithoutPaymentsInput = {
    update: XOR<ordersUpdateWithoutPaymentsInput, ordersUncheckedUpdateWithoutPaymentsInput>
    create: XOR<ordersCreateWithoutPaymentsInput, ordersUncheckedCreateWithoutPaymentsInput>
    where?: ordersWhereInput
  }

  export type ordersUpdateToOneWithWhereWithoutPaymentsInput = {
    where?: ordersWhereInput
    data: XOR<ordersUpdateWithoutPaymentsInput, ordersUncheckedUpdateWithoutPaymentsInput>
  }

  export type ordersUpdateWithoutPaymentsInput = {
    order_date?: DateTimeFieldUpdateOperationsInput | Date | string
    order_status?: NullableEnumorders_order_statusFieldUpdateOperationsInput | $Enums.orders_order_status | null
    total_amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    shipping_method?: NullableEnumshipping_shipping_statusFieldUpdateOperationsInput | $Enums.shipping_shipping_status | null
    shipping_price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    full_name?: StringFieldUpdateOperationsInput | string
    shipping_address?: StringFieldUpdateOperationsInput | string
    phone_number?: StringFieldUpdateOperationsInput | string
    original_amount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    discount_amount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    final_amount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    discount?: discountsUpdateOneWithoutOrdersNestedInput
    user?: usersUpdateOneRequiredWithoutOrdersNestedInput
    orderdetails?: orderdetailUpdateManyWithoutOrdersNestedInput
  }

  export type ordersUncheckedUpdateWithoutPaymentsInput = {
    order_id?: IntFieldUpdateOperationsInput | number
    UserID?: IntFieldUpdateOperationsInput | number
    order_date?: DateTimeFieldUpdateOperationsInput | Date | string
    order_status?: NullableEnumorders_order_statusFieldUpdateOperationsInput | $Enums.orders_order_status | null
    total_amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    shipping_method?: NullableEnumshipping_shipping_statusFieldUpdateOperationsInput | $Enums.shipping_shipping_status | null
    shipping_price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    full_name?: StringFieldUpdateOperationsInput | string
    shipping_address?: StringFieldUpdateOperationsInput | string
    phone_number?: StringFieldUpdateOperationsInput | string
    discount_id?: NullableIntFieldUpdateOperationsInput | number | null
    original_amount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    discount_amount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    final_amount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    orderdetails?: orderdetailUncheckedUpdateManyWithoutOrdersNestedInput
  }

  export type ordersCreateWithoutUserInput = {
    order_date?: Date | string
    order_status?: $Enums.orders_order_status | null
    total_amount: Decimal | DecimalJsLike | number | string
    shipping_method?: $Enums.shipping_shipping_status | null
    shipping_price: Decimal | DecimalJsLike | number | string
    full_name: string
    shipping_address: string
    phone_number: string
    original_amount?: Decimal | DecimalJsLike | number | string | null
    discount_amount?: Decimal | DecimalJsLike | number | string | null
    final_amount?: Decimal | DecimalJsLike | number | string | null
    discount?: discountsCreateNestedOneWithoutOrdersInput
    orderdetails?: orderdetailCreateNestedManyWithoutOrdersInput
    payments?: paymentsCreateNestedManyWithoutOrdersInput
  }

  export type ordersUncheckedCreateWithoutUserInput = {
    order_id?: number
    order_date?: Date | string
    order_status?: $Enums.orders_order_status | null
    total_amount: Decimal | DecimalJsLike | number | string
    shipping_method?: $Enums.shipping_shipping_status | null
    shipping_price: Decimal | DecimalJsLike | number | string
    full_name: string
    shipping_address: string
    phone_number: string
    discount_id?: number | null
    original_amount?: Decimal | DecimalJsLike | number | string | null
    discount_amount?: Decimal | DecimalJsLike | number | string | null
    final_amount?: Decimal | DecimalJsLike | number | string | null
    orderdetails?: orderdetailUncheckedCreateNestedManyWithoutOrdersInput
    payments?: paymentsUncheckedCreateNestedManyWithoutOrdersInput
  }

  export type ordersCreateOrConnectWithoutUserInput = {
    where: ordersWhereUniqueInput
    create: XOR<ordersCreateWithoutUserInput, ordersUncheckedCreateWithoutUserInput>
  }

  export type ordersCreateManyUserInputEnvelope = {
    data: ordersCreateManyUserInput | ordersCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type reviewsCreateWithoutUserInput = {
    Comment?: string | null
    Rating?: number | null
    CreatedAt?: Date | string | null
    product: ProductCreateNestedOneWithoutReviewsInput
  }

  export type reviewsUncheckedCreateWithoutUserInput = {
    ReviewID?: number
    product_id: number
    Comment?: string | null
    Rating?: number | null
    CreatedAt?: Date | string | null
  }

  export type reviewsCreateOrConnectWithoutUserInput = {
    where: reviewsWhereUniqueInput
    create: XOR<reviewsCreateWithoutUserInput, reviewsUncheckedCreateWithoutUserInput>
  }

  export type reviewsCreateManyUserInputEnvelope = {
    data: reviewsCreateManyUserInput | reviewsCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type userdiscountCreateWithoutUserInput = {
    created_at?: Date | string
    status?: $Enums.userdiscount_status
    discount: discountsCreateNestedOneWithoutUserdiscountInput
  }

  export type userdiscountUncheckedCreateWithoutUserInput = {
    user_discount_id?: number
    discount_id: number
    created_at?: Date | string
    status?: $Enums.userdiscount_status
  }

  export type userdiscountCreateOrConnectWithoutUserInput = {
    where: userdiscountWhereUniqueInput
    create: XOR<userdiscountCreateWithoutUserInput, userdiscountUncheckedCreateWithoutUserInput>
  }

  export type userdiscountCreateManyUserInputEnvelope = {
    data: userdiscountCreateManyUserInput | userdiscountCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type health_infoCreateWithoutUserInput = {
    first_name: string
    last_name: string
    gender: string
    email?: string | null
    address?: string | null
    phone_number?: string | null
    age: number
    weight: number
    height: number
    profile_image?: string | null
  }

  export type health_infoUncheckedCreateWithoutUserInput = {
    health_id?: number
    first_name: string
    last_name: string
    gender: string
    email?: string | null
    address?: string | null
    phone_number?: string | null
    age: number
    weight: number
    height: number
    profile_image?: string | null
  }

  export type health_infoCreateOrConnectWithoutUserInput = {
    where: health_infoWhereUniqueInput
    create: XOR<health_infoCreateWithoutUserInput, health_infoUncheckedCreateWithoutUserInput>
  }

  export type ordersUpsertWithWhereUniqueWithoutUserInput = {
    where: ordersWhereUniqueInput
    update: XOR<ordersUpdateWithoutUserInput, ordersUncheckedUpdateWithoutUserInput>
    create: XOR<ordersCreateWithoutUserInput, ordersUncheckedCreateWithoutUserInput>
  }

  export type ordersUpdateWithWhereUniqueWithoutUserInput = {
    where: ordersWhereUniqueInput
    data: XOR<ordersUpdateWithoutUserInput, ordersUncheckedUpdateWithoutUserInput>
  }

  export type ordersUpdateManyWithWhereWithoutUserInput = {
    where: ordersScalarWhereInput
    data: XOR<ordersUpdateManyMutationInput, ordersUncheckedUpdateManyWithoutUserInput>
  }

  export type reviewsUpsertWithWhereUniqueWithoutUserInput = {
    where: reviewsWhereUniqueInput
    update: XOR<reviewsUpdateWithoutUserInput, reviewsUncheckedUpdateWithoutUserInput>
    create: XOR<reviewsCreateWithoutUserInput, reviewsUncheckedCreateWithoutUserInput>
  }

  export type reviewsUpdateWithWhereUniqueWithoutUserInput = {
    where: reviewsWhereUniqueInput
    data: XOR<reviewsUpdateWithoutUserInput, reviewsUncheckedUpdateWithoutUserInput>
  }

  export type reviewsUpdateManyWithWhereWithoutUserInput = {
    where: reviewsScalarWhereInput
    data: XOR<reviewsUpdateManyMutationInput, reviewsUncheckedUpdateManyWithoutUserInput>
  }

  export type reviewsScalarWhereInput = {
    AND?: reviewsScalarWhereInput | reviewsScalarWhereInput[]
    OR?: reviewsScalarWhereInput[]
    NOT?: reviewsScalarWhereInput | reviewsScalarWhereInput[]
    ReviewID?: IntFilter<"reviews"> | number
    product_id?: IntFilter<"reviews"> | number
    UserID?: IntFilter<"reviews"> | number
    Comment?: StringNullableFilter<"reviews"> | string | null
    Rating?: IntNullableFilter<"reviews"> | number | null
    CreatedAt?: DateTimeNullableFilter<"reviews"> | Date | string | null
  }

  export type userdiscountUpsertWithWhereUniqueWithoutUserInput = {
    where: userdiscountWhereUniqueInput
    update: XOR<userdiscountUpdateWithoutUserInput, userdiscountUncheckedUpdateWithoutUserInput>
    create: XOR<userdiscountCreateWithoutUserInput, userdiscountUncheckedCreateWithoutUserInput>
  }

  export type userdiscountUpdateWithWhereUniqueWithoutUserInput = {
    where: userdiscountWhereUniqueInput
    data: XOR<userdiscountUpdateWithoutUserInput, userdiscountUncheckedUpdateWithoutUserInput>
  }

  export type userdiscountUpdateManyWithWhereWithoutUserInput = {
    where: userdiscountScalarWhereInput
    data: XOR<userdiscountUpdateManyMutationInput, userdiscountUncheckedUpdateManyWithoutUserInput>
  }

  export type health_infoUpsertWithoutUserInput = {
    update: XOR<health_infoUpdateWithoutUserInput, health_infoUncheckedUpdateWithoutUserInput>
    create: XOR<health_infoCreateWithoutUserInput, health_infoUncheckedCreateWithoutUserInput>
    where?: health_infoWhereInput
  }

  export type health_infoUpdateToOneWithWhereWithoutUserInput = {
    where?: health_infoWhereInput
    data: XOR<health_infoUpdateWithoutUserInput, health_infoUncheckedUpdateWithoutUserInput>
  }

  export type health_infoUpdateWithoutUserInput = {
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone_number?: NullableStringFieldUpdateOperationsInput | string | null
    age?: IntFieldUpdateOperationsInput | number
    weight?: FloatFieldUpdateOperationsInput | number
    height?: FloatFieldUpdateOperationsInput | number
    profile_image?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type health_infoUncheckedUpdateWithoutUserInput = {
    health_id?: IntFieldUpdateOperationsInput | number
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone_number?: NullableStringFieldUpdateOperationsInput | string | null
    age?: IntFieldUpdateOperationsInput | number
    weight?: FloatFieldUpdateOperationsInput | number
    height?: FloatFieldUpdateOperationsInput | number
    profile_image?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProductCreateWithoutCategoriesInput = {
    name: string
    description: string
    price: number
    size: number
    Nutritional_value: string
    taste: string
    image_url: string
    orderdetails?: orderdetailCreateNestedManyWithoutProductInput
    reviews?: reviewsCreateNestedManyWithoutProductInput
  }

  export type ProductUncheckedCreateWithoutCategoriesInput = {
    product_id?: number
    name: string
    description: string
    price: number
    size: number
    Nutritional_value: string
    taste: string
    image_url: string
    orderdetails?: orderdetailUncheckedCreateNestedManyWithoutProductInput
    reviews?: reviewsUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductCreateOrConnectWithoutCategoriesInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutCategoriesInput, ProductUncheckedCreateWithoutCategoriesInput>
  }

  export type ProductCreateManyCategoriesInputEnvelope = {
    data: ProductCreateManyCategoriesInput | ProductCreateManyCategoriesInput[]
    skipDuplicates?: boolean
  }

  export type ProductUpsertWithWhereUniqueWithoutCategoriesInput = {
    where: ProductWhereUniqueInput
    update: XOR<ProductUpdateWithoutCategoriesInput, ProductUncheckedUpdateWithoutCategoriesInput>
    create: XOR<ProductCreateWithoutCategoriesInput, ProductUncheckedCreateWithoutCategoriesInput>
  }

  export type ProductUpdateWithWhereUniqueWithoutCategoriesInput = {
    where: ProductWhereUniqueInput
    data: XOR<ProductUpdateWithoutCategoriesInput, ProductUncheckedUpdateWithoutCategoriesInput>
  }

  export type ProductUpdateManyWithWhereWithoutCategoriesInput = {
    where: ProductScalarWhereInput
    data: XOR<ProductUpdateManyMutationInput, ProductUncheckedUpdateManyWithoutCategoriesInput>
  }

  export type ProductScalarWhereInput = {
    AND?: ProductScalarWhereInput | ProductScalarWhereInput[]
    OR?: ProductScalarWhereInput[]
    NOT?: ProductScalarWhereInput | ProductScalarWhereInput[]
    product_id?: IntFilter<"Product"> | number
    name?: StringFilter<"Product"> | string
    description?: StringFilter<"Product"> | string
    price?: FloatFilter<"Product"> | number
    CategoryID?: IntNullableFilter<"Product"> | number | null
    size?: FloatFilter<"Product"> | number
    Nutritional_value?: StringFilter<"Product"> | string
    taste?: StringFilter<"Product"> | string
    image_url?: StringFilter<"Product"> | string
  }

  export type orderdetailCreateWithoutProductInput = {
    quantity: number
    unit_price: Decimal | DecimalJsLike | number | string
    orders: ordersCreateNestedOneWithoutOrderdetailsInput
  }

  export type orderdetailUncheckedCreateWithoutProductInput = {
    order_id: number
    quantity: number
    unit_price: Decimal | DecimalJsLike | number | string
  }

  export type orderdetailCreateOrConnectWithoutProductInput = {
    where: orderdetailWhereUniqueInput
    create: XOR<orderdetailCreateWithoutProductInput, orderdetailUncheckedCreateWithoutProductInput>
  }

  export type orderdetailCreateManyProductInputEnvelope = {
    data: orderdetailCreateManyProductInput | orderdetailCreateManyProductInput[]
    skipDuplicates?: boolean
  }

  export type reviewsCreateWithoutProductInput = {
    Comment?: string | null
    Rating?: number | null
    CreatedAt?: Date | string | null
    user: usersCreateNestedOneWithoutReviewsInput
  }

  export type reviewsUncheckedCreateWithoutProductInput = {
    ReviewID?: number
    UserID: number
    Comment?: string | null
    Rating?: number | null
    CreatedAt?: Date | string | null
  }

  export type reviewsCreateOrConnectWithoutProductInput = {
    where: reviewsWhereUniqueInput
    create: XOR<reviewsCreateWithoutProductInput, reviewsUncheckedCreateWithoutProductInput>
  }

  export type reviewsCreateManyProductInputEnvelope = {
    data: reviewsCreateManyProductInput | reviewsCreateManyProductInput[]
    skipDuplicates?: boolean
  }

  export type categoriesCreateWithoutProductInput = {
    CategoriesName?: string | null
  }

  export type categoriesUncheckedCreateWithoutProductInput = {
    CategoriesID?: number
    CategoriesName?: string | null
  }

  export type categoriesCreateOrConnectWithoutProductInput = {
    where: categoriesWhereUniqueInput
    create: XOR<categoriesCreateWithoutProductInput, categoriesUncheckedCreateWithoutProductInput>
  }

  export type orderdetailUpsertWithWhereUniqueWithoutProductInput = {
    where: orderdetailWhereUniqueInput
    update: XOR<orderdetailUpdateWithoutProductInput, orderdetailUncheckedUpdateWithoutProductInput>
    create: XOR<orderdetailCreateWithoutProductInput, orderdetailUncheckedCreateWithoutProductInput>
  }

  export type orderdetailUpdateWithWhereUniqueWithoutProductInput = {
    where: orderdetailWhereUniqueInput
    data: XOR<orderdetailUpdateWithoutProductInput, orderdetailUncheckedUpdateWithoutProductInput>
  }

  export type orderdetailUpdateManyWithWhereWithoutProductInput = {
    where: orderdetailScalarWhereInput
    data: XOR<orderdetailUpdateManyMutationInput, orderdetailUncheckedUpdateManyWithoutProductInput>
  }

  export type reviewsUpsertWithWhereUniqueWithoutProductInput = {
    where: reviewsWhereUniqueInput
    update: XOR<reviewsUpdateWithoutProductInput, reviewsUncheckedUpdateWithoutProductInput>
    create: XOR<reviewsCreateWithoutProductInput, reviewsUncheckedCreateWithoutProductInput>
  }

  export type reviewsUpdateWithWhereUniqueWithoutProductInput = {
    where: reviewsWhereUniqueInput
    data: XOR<reviewsUpdateWithoutProductInput, reviewsUncheckedUpdateWithoutProductInput>
  }

  export type reviewsUpdateManyWithWhereWithoutProductInput = {
    where: reviewsScalarWhereInput
    data: XOR<reviewsUpdateManyMutationInput, reviewsUncheckedUpdateManyWithoutProductInput>
  }

  export type categoriesUpsertWithoutProductInput = {
    update: XOR<categoriesUpdateWithoutProductInput, categoriesUncheckedUpdateWithoutProductInput>
    create: XOR<categoriesCreateWithoutProductInput, categoriesUncheckedCreateWithoutProductInput>
    where?: categoriesWhereInput
  }

  export type categoriesUpdateToOneWithWhereWithoutProductInput = {
    where?: categoriesWhereInput
    data: XOR<categoriesUpdateWithoutProductInput, categoriesUncheckedUpdateWithoutProductInput>
  }

  export type categoriesUpdateWithoutProductInput = {
    CategoriesName?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type categoriesUncheckedUpdateWithoutProductInput = {
    CategoriesID?: IntFieldUpdateOperationsInput | number
    CategoriesName?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type usersCreateWithoutHealthInfoInput = {
    UserName: string
    Password: string
    Status?: string | null
    Role?: string | null
    resetToken?: string | null
    resetTokenExpiry?: Date | string | null
    orders?: ordersCreateNestedManyWithoutUserInput
    reviews?: reviewsCreateNestedManyWithoutUserInput
    userdiscount?: userdiscountCreateNestedManyWithoutUserInput
  }

  export type usersUncheckedCreateWithoutHealthInfoInput = {
    UserName: string
    UserID?: number
    Password: string
    Status?: string | null
    Role?: string | null
    resetToken?: string | null
    resetTokenExpiry?: Date | string | null
    orders?: ordersUncheckedCreateNestedManyWithoutUserInput
    reviews?: reviewsUncheckedCreateNestedManyWithoutUserInput
    userdiscount?: userdiscountUncheckedCreateNestedManyWithoutUserInput
  }

  export type usersCreateOrConnectWithoutHealthInfoInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutHealthInfoInput, usersUncheckedCreateWithoutHealthInfoInput>
  }

  export type usersUpsertWithoutHealthInfoInput = {
    update: XOR<usersUpdateWithoutHealthInfoInput, usersUncheckedUpdateWithoutHealthInfoInput>
    create: XOR<usersCreateWithoutHealthInfoInput, usersUncheckedCreateWithoutHealthInfoInput>
    where?: usersWhereInput
  }

  export type usersUpdateToOneWithWhereWithoutHealthInfoInput = {
    where?: usersWhereInput
    data: XOR<usersUpdateWithoutHealthInfoInput, usersUncheckedUpdateWithoutHealthInfoInput>
  }

  export type usersUpdateWithoutHealthInfoInput = {
    UserName?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
    Status?: NullableStringFieldUpdateOperationsInput | string | null
    Role?: NullableStringFieldUpdateOperationsInput | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    orders?: ordersUpdateManyWithoutUserNestedInput
    reviews?: reviewsUpdateManyWithoutUserNestedInput
    userdiscount?: userdiscountUpdateManyWithoutUserNestedInput
  }

  export type usersUncheckedUpdateWithoutHealthInfoInput = {
    UserName?: StringFieldUpdateOperationsInput | string
    UserID?: IntFieldUpdateOperationsInput | number
    Password?: StringFieldUpdateOperationsInput | string
    Status?: NullableStringFieldUpdateOperationsInput | string | null
    Role?: NullableStringFieldUpdateOperationsInput | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    orders?: ordersUncheckedUpdateManyWithoutUserNestedInput
    reviews?: reviewsUncheckedUpdateManyWithoutUserNestedInput
    userdiscount?: userdiscountUncheckedUpdateManyWithoutUserNestedInput
  }

  export type usersCreateWithoutReviewsInput = {
    UserName: string
    Password: string
    Status?: string | null
    Role?: string | null
    resetToken?: string | null
    resetTokenExpiry?: Date | string | null
    orders?: ordersCreateNestedManyWithoutUserInput
    userdiscount?: userdiscountCreateNestedManyWithoutUserInput
    healthInfo?: health_infoCreateNestedOneWithoutUserInput
  }

  export type usersUncheckedCreateWithoutReviewsInput = {
    UserName: string
    UserID?: number
    Password: string
    Status?: string | null
    Role?: string | null
    resetToken?: string | null
    resetTokenExpiry?: Date | string | null
    orders?: ordersUncheckedCreateNestedManyWithoutUserInput
    userdiscount?: userdiscountUncheckedCreateNestedManyWithoutUserInput
    healthInfo?: health_infoUncheckedCreateNestedOneWithoutUserInput
  }

  export type usersCreateOrConnectWithoutReviewsInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutReviewsInput, usersUncheckedCreateWithoutReviewsInput>
  }

  export type ProductCreateWithoutReviewsInput = {
    name: string
    description: string
    price: number
    size: number
    Nutritional_value: string
    taste: string
    image_url: string
    orderdetails?: orderdetailCreateNestedManyWithoutProductInput
    categories?: categoriesCreateNestedOneWithoutProductInput
  }

  export type ProductUncheckedCreateWithoutReviewsInput = {
    product_id?: number
    name: string
    description: string
    price: number
    CategoryID?: number | null
    size: number
    Nutritional_value: string
    taste: string
    image_url: string
    orderdetails?: orderdetailUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductCreateOrConnectWithoutReviewsInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutReviewsInput, ProductUncheckedCreateWithoutReviewsInput>
  }

  export type usersUpsertWithoutReviewsInput = {
    update: XOR<usersUpdateWithoutReviewsInput, usersUncheckedUpdateWithoutReviewsInput>
    create: XOR<usersCreateWithoutReviewsInput, usersUncheckedCreateWithoutReviewsInput>
    where?: usersWhereInput
  }

  export type usersUpdateToOneWithWhereWithoutReviewsInput = {
    where?: usersWhereInput
    data: XOR<usersUpdateWithoutReviewsInput, usersUncheckedUpdateWithoutReviewsInput>
  }

  export type usersUpdateWithoutReviewsInput = {
    UserName?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
    Status?: NullableStringFieldUpdateOperationsInput | string | null
    Role?: NullableStringFieldUpdateOperationsInput | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    orders?: ordersUpdateManyWithoutUserNestedInput
    userdiscount?: userdiscountUpdateManyWithoutUserNestedInput
    healthInfo?: health_infoUpdateOneWithoutUserNestedInput
  }

  export type usersUncheckedUpdateWithoutReviewsInput = {
    UserName?: StringFieldUpdateOperationsInput | string
    UserID?: IntFieldUpdateOperationsInput | number
    Password?: StringFieldUpdateOperationsInput | string
    Status?: NullableStringFieldUpdateOperationsInput | string | null
    Role?: NullableStringFieldUpdateOperationsInput | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    orders?: ordersUncheckedUpdateManyWithoutUserNestedInput
    userdiscount?: userdiscountUncheckedUpdateManyWithoutUserNestedInput
    healthInfo?: health_infoUncheckedUpdateOneWithoutUserNestedInput
  }

  export type ProductUpsertWithoutReviewsInput = {
    update: XOR<ProductUpdateWithoutReviewsInput, ProductUncheckedUpdateWithoutReviewsInput>
    create: XOR<ProductCreateWithoutReviewsInput, ProductUncheckedCreateWithoutReviewsInput>
    where?: ProductWhereInput
  }

  export type ProductUpdateToOneWithWhereWithoutReviewsInput = {
    where?: ProductWhereInput
    data: XOR<ProductUpdateWithoutReviewsInput, ProductUncheckedUpdateWithoutReviewsInput>
  }

  export type ProductUpdateWithoutReviewsInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    size?: FloatFieldUpdateOperationsInput | number
    Nutritional_value?: StringFieldUpdateOperationsInput | string
    taste?: StringFieldUpdateOperationsInput | string
    image_url?: StringFieldUpdateOperationsInput | string
    orderdetails?: orderdetailUpdateManyWithoutProductNestedInput
    categories?: categoriesUpdateOneWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateWithoutReviewsInput = {
    product_id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    CategoryID?: NullableIntFieldUpdateOperationsInput | number | null
    size?: FloatFieldUpdateOperationsInput | number
    Nutritional_value?: StringFieldUpdateOperationsInput | string
    taste?: StringFieldUpdateOperationsInput | string
    image_url?: StringFieldUpdateOperationsInput | string
    orderdetails?: orderdetailUncheckedUpdateManyWithoutProductNestedInput
  }

  export type orderdetailCreateManyOrdersInput = {
    product_id: number
    quantity: number
    unit_price: Decimal | DecimalJsLike | number | string
  }

  export type paymentsCreateManyOrdersInput = {
    payment_id?: number
    payment_method?: string | null
    payment_date?: Date | string | null
    amount: Decimal | DecimalJsLike | number | string
    remark?: string | null
    payment_status?: $Enums.payments_payment_status | null
    payment_Image?: string | null
  }

  export type orderdetailUpdateWithoutOrdersInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    unit_price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    product?: ProductUpdateOneRequiredWithoutOrderdetailsNestedInput
  }

  export type orderdetailUncheckedUpdateWithoutOrdersInput = {
    product_id?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    unit_price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type orderdetailUncheckedUpdateManyWithoutOrdersInput = {
    product_id?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    unit_price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type paymentsUpdateWithoutOrdersInput = {
    payment_method?: NullableStringFieldUpdateOperationsInput | string | null
    payment_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    remark?: NullableStringFieldUpdateOperationsInput | string | null
    payment_status?: NullableEnumpayments_payment_statusFieldUpdateOperationsInput | $Enums.payments_payment_status | null
    payment_Image?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type paymentsUncheckedUpdateWithoutOrdersInput = {
    payment_id?: IntFieldUpdateOperationsInput | number
    payment_method?: NullableStringFieldUpdateOperationsInput | string | null
    payment_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    remark?: NullableStringFieldUpdateOperationsInput | string | null
    payment_status?: NullableEnumpayments_payment_statusFieldUpdateOperationsInput | $Enums.payments_payment_status | null
    payment_Image?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type paymentsUncheckedUpdateManyWithoutOrdersInput = {
    payment_id?: IntFieldUpdateOperationsInput | number
    payment_method?: NullableStringFieldUpdateOperationsInput | string | null
    payment_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    remark?: NullableStringFieldUpdateOperationsInput | string | null
    payment_status?: NullableEnumpayments_payment_statusFieldUpdateOperationsInput | $Enums.payments_payment_status | null
    payment_Image?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ordersCreateManyDiscountInput = {
    order_id?: number
    UserID: number
    order_date?: Date | string
    order_status?: $Enums.orders_order_status | null
    total_amount: Decimal | DecimalJsLike | number | string
    shipping_method?: $Enums.shipping_shipping_status | null
    shipping_price: Decimal | DecimalJsLike | number | string
    full_name: string
    shipping_address: string
    phone_number: string
    original_amount?: Decimal | DecimalJsLike | number | string | null
    discount_amount?: Decimal | DecimalJsLike | number | string | null
    final_amount?: Decimal | DecimalJsLike | number | string | null
  }

  export type userdiscountCreateManyDiscountInput = {
    user_discount_id?: number
    UserID: number
    created_at?: Date | string
    status?: $Enums.userdiscount_status
  }

  export type ordersUpdateWithoutDiscountInput = {
    order_date?: DateTimeFieldUpdateOperationsInput | Date | string
    order_status?: NullableEnumorders_order_statusFieldUpdateOperationsInput | $Enums.orders_order_status | null
    total_amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    shipping_method?: NullableEnumshipping_shipping_statusFieldUpdateOperationsInput | $Enums.shipping_shipping_status | null
    shipping_price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    full_name?: StringFieldUpdateOperationsInput | string
    shipping_address?: StringFieldUpdateOperationsInput | string
    phone_number?: StringFieldUpdateOperationsInput | string
    original_amount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    discount_amount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    final_amount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    user?: usersUpdateOneRequiredWithoutOrdersNestedInput
    orderdetails?: orderdetailUpdateManyWithoutOrdersNestedInput
    payments?: paymentsUpdateManyWithoutOrdersNestedInput
  }

  export type ordersUncheckedUpdateWithoutDiscountInput = {
    order_id?: IntFieldUpdateOperationsInput | number
    UserID?: IntFieldUpdateOperationsInput | number
    order_date?: DateTimeFieldUpdateOperationsInput | Date | string
    order_status?: NullableEnumorders_order_statusFieldUpdateOperationsInput | $Enums.orders_order_status | null
    total_amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    shipping_method?: NullableEnumshipping_shipping_statusFieldUpdateOperationsInput | $Enums.shipping_shipping_status | null
    shipping_price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    full_name?: StringFieldUpdateOperationsInput | string
    shipping_address?: StringFieldUpdateOperationsInput | string
    phone_number?: StringFieldUpdateOperationsInput | string
    original_amount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    discount_amount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    final_amount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    orderdetails?: orderdetailUncheckedUpdateManyWithoutOrdersNestedInput
    payments?: paymentsUncheckedUpdateManyWithoutOrdersNestedInput
  }

  export type ordersUncheckedUpdateManyWithoutDiscountInput = {
    order_id?: IntFieldUpdateOperationsInput | number
    UserID?: IntFieldUpdateOperationsInput | number
    order_date?: DateTimeFieldUpdateOperationsInput | Date | string
    order_status?: NullableEnumorders_order_statusFieldUpdateOperationsInput | $Enums.orders_order_status | null
    total_amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    shipping_method?: NullableEnumshipping_shipping_statusFieldUpdateOperationsInput | $Enums.shipping_shipping_status | null
    shipping_price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    full_name?: StringFieldUpdateOperationsInput | string
    shipping_address?: StringFieldUpdateOperationsInput | string
    phone_number?: StringFieldUpdateOperationsInput | string
    original_amount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    discount_amount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    final_amount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type userdiscountUpdateWithoutDiscountInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: Enumuserdiscount_statusFieldUpdateOperationsInput | $Enums.userdiscount_status
    user?: usersUpdateOneRequiredWithoutUserdiscountNestedInput
  }

  export type userdiscountUncheckedUpdateWithoutDiscountInput = {
    user_discount_id?: IntFieldUpdateOperationsInput | number
    UserID?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: Enumuserdiscount_statusFieldUpdateOperationsInput | $Enums.userdiscount_status
  }

  export type userdiscountUncheckedUpdateManyWithoutDiscountInput = {
    user_discount_id?: IntFieldUpdateOperationsInput | number
    UserID?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: Enumuserdiscount_statusFieldUpdateOperationsInput | $Enums.userdiscount_status
  }

  export type ordersCreateManyUserInput = {
    order_id?: number
    order_date?: Date | string
    order_status?: $Enums.orders_order_status | null
    total_amount: Decimal | DecimalJsLike | number | string
    shipping_method?: $Enums.shipping_shipping_status | null
    shipping_price: Decimal | DecimalJsLike | number | string
    full_name: string
    shipping_address: string
    phone_number: string
    discount_id?: number | null
    original_amount?: Decimal | DecimalJsLike | number | string | null
    discount_amount?: Decimal | DecimalJsLike | number | string | null
    final_amount?: Decimal | DecimalJsLike | number | string | null
  }

  export type reviewsCreateManyUserInput = {
    ReviewID?: number
    product_id: number
    Comment?: string | null
    Rating?: number | null
    CreatedAt?: Date | string | null
  }

  export type userdiscountCreateManyUserInput = {
    user_discount_id?: number
    discount_id: number
    created_at?: Date | string
    status?: $Enums.userdiscount_status
  }

  export type ordersUpdateWithoutUserInput = {
    order_date?: DateTimeFieldUpdateOperationsInput | Date | string
    order_status?: NullableEnumorders_order_statusFieldUpdateOperationsInput | $Enums.orders_order_status | null
    total_amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    shipping_method?: NullableEnumshipping_shipping_statusFieldUpdateOperationsInput | $Enums.shipping_shipping_status | null
    shipping_price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    full_name?: StringFieldUpdateOperationsInput | string
    shipping_address?: StringFieldUpdateOperationsInput | string
    phone_number?: StringFieldUpdateOperationsInput | string
    original_amount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    discount_amount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    final_amount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    discount?: discountsUpdateOneWithoutOrdersNestedInput
    orderdetails?: orderdetailUpdateManyWithoutOrdersNestedInput
    payments?: paymentsUpdateManyWithoutOrdersNestedInput
  }

  export type ordersUncheckedUpdateWithoutUserInput = {
    order_id?: IntFieldUpdateOperationsInput | number
    order_date?: DateTimeFieldUpdateOperationsInput | Date | string
    order_status?: NullableEnumorders_order_statusFieldUpdateOperationsInput | $Enums.orders_order_status | null
    total_amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    shipping_method?: NullableEnumshipping_shipping_statusFieldUpdateOperationsInput | $Enums.shipping_shipping_status | null
    shipping_price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    full_name?: StringFieldUpdateOperationsInput | string
    shipping_address?: StringFieldUpdateOperationsInput | string
    phone_number?: StringFieldUpdateOperationsInput | string
    discount_id?: NullableIntFieldUpdateOperationsInput | number | null
    original_amount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    discount_amount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    final_amount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    orderdetails?: orderdetailUncheckedUpdateManyWithoutOrdersNestedInput
    payments?: paymentsUncheckedUpdateManyWithoutOrdersNestedInput
  }

  export type ordersUncheckedUpdateManyWithoutUserInput = {
    order_id?: IntFieldUpdateOperationsInput | number
    order_date?: DateTimeFieldUpdateOperationsInput | Date | string
    order_status?: NullableEnumorders_order_statusFieldUpdateOperationsInput | $Enums.orders_order_status | null
    total_amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    shipping_method?: NullableEnumshipping_shipping_statusFieldUpdateOperationsInput | $Enums.shipping_shipping_status | null
    shipping_price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    full_name?: StringFieldUpdateOperationsInput | string
    shipping_address?: StringFieldUpdateOperationsInput | string
    phone_number?: StringFieldUpdateOperationsInput | string
    discount_id?: NullableIntFieldUpdateOperationsInput | number | null
    original_amount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    discount_amount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    final_amount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type reviewsUpdateWithoutUserInput = {
    Comment?: NullableStringFieldUpdateOperationsInput | string | null
    Rating?: NullableIntFieldUpdateOperationsInput | number | null
    CreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    product?: ProductUpdateOneRequiredWithoutReviewsNestedInput
  }

  export type reviewsUncheckedUpdateWithoutUserInput = {
    ReviewID?: IntFieldUpdateOperationsInput | number
    product_id?: IntFieldUpdateOperationsInput | number
    Comment?: NullableStringFieldUpdateOperationsInput | string | null
    Rating?: NullableIntFieldUpdateOperationsInput | number | null
    CreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type reviewsUncheckedUpdateManyWithoutUserInput = {
    ReviewID?: IntFieldUpdateOperationsInput | number
    product_id?: IntFieldUpdateOperationsInput | number
    Comment?: NullableStringFieldUpdateOperationsInput | string | null
    Rating?: NullableIntFieldUpdateOperationsInput | number | null
    CreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type userdiscountUpdateWithoutUserInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: Enumuserdiscount_statusFieldUpdateOperationsInput | $Enums.userdiscount_status
    discount?: discountsUpdateOneRequiredWithoutUserdiscountNestedInput
  }

  export type userdiscountUncheckedUpdateWithoutUserInput = {
    user_discount_id?: IntFieldUpdateOperationsInput | number
    discount_id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: Enumuserdiscount_statusFieldUpdateOperationsInput | $Enums.userdiscount_status
  }

  export type userdiscountUncheckedUpdateManyWithoutUserInput = {
    user_discount_id?: IntFieldUpdateOperationsInput | number
    discount_id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: Enumuserdiscount_statusFieldUpdateOperationsInput | $Enums.userdiscount_status
  }

  export type ProductCreateManyCategoriesInput = {
    product_id?: number
    name: string
    description: string
    price: number
    size: number
    Nutritional_value: string
    taste: string
    image_url: string
  }

  export type ProductUpdateWithoutCategoriesInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    size?: FloatFieldUpdateOperationsInput | number
    Nutritional_value?: StringFieldUpdateOperationsInput | string
    taste?: StringFieldUpdateOperationsInput | string
    image_url?: StringFieldUpdateOperationsInput | string
    orderdetails?: orderdetailUpdateManyWithoutProductNestedInput
    reviews?: reviewsUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateWithoutCategoriesInput = {
    product_id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    size?: FloatFieldUpdateOperationsInput | number
    Nutritional_value?: StringFieldUpdateOperationsInput | string
    taste?: StringFieldUpdateOperationsInput | string
    image_url?: StringFieldUpdateOperationsInput | string
    orderdetails?: orderdetailUncheckedUpdateManyWithoutProductNestedInput
    reviews?: reviewsUncheckedUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateManyWithoutCategoriesInput = {
    product_id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    size?: FloatFieldUpdateOperationsInput | number
    Nutritional_value?: StringFieldUpdateOperationsInput | string
    taste?: StringFieldUpdateOperationsInput | string
    image_url?: StringFieldUpdateOperationsInput | string
  }

  export type orderdetailCreateManyProductInput = {
    order_id: number
    quantity: number
    unit_price: Decimal | DecimalJsLike | number | string
  }

  export type reviewsCreateManyProductInput = {
    ReviewID?: number
    UserID: number
    Comment?: string | null
    Rating?: number | null
    CreatedAt?: Date | string | null
  }

  export type orderdetailUpdateWithoutProductInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    unit_price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    orders?: ordersUpdateOneRequiredWithoutOrderdetailsNestedInput
  }

  export type orderdetailUncheckedUpdateWithoutProductInput = {
    order_id?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    unit_price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type orderdetailUncheckedUpdateManyWithoutProductInput = {
    order_id?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    unit_price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type reviewsUpdateWithoutProductInput = {
    Comment?: NullableStringFieldUpdateOperationsInput | string | null
    Rating?: NullableIntFieldUpdateOperationsInput | number | null
    CreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: usersUpdateOneRequiredWithoutReviewsNestedInput
  }

  export type reviewsUncheckedUpdateWithoutProductInput = {
    ReviewID?: IntFieldUpdateOperationsInput | number
    UserID?: IntFieldUpdateOperationsInput | number
    Comment?: NullableStringFieldUpdateOperationsInput | string | null
    Rating?: NullableIntFieldUpdateOperationsInput | number | null
    CreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type reviewsUncheckedUpdateManyWithoutProductInput = {
    ReviewID?: IntFieldUpdateOperationsInput | number
    UserID?: IntFieldUpdateOperationsInput | number
    Comment?: NullableStringFieldUpdateOperationsInput | string | null
    Rating?: NullableIntFieldUpdateOperationsInput | number | null
    CreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use OrdersCountOutputTypeDefaultArgs instead
     */
    export type OrdersCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = OrdersCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DiscountsCountOutputTypeDefaultArgs instead
     */
    export type DiscountsCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DiscountsCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UsersCountOutputTypeDefaultArgs instead
     */
    export type UsersCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UsersCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CategoriesCountOutputTypeDefaultArgs instead
     */
    export type CategoriesCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CategoriesCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProductCountOutputTypeDefaultArgs instead
     */
    export type ProductCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProductCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ordersDefaultArgs instead
     */
    export type ordersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ordersDefaultArgs<ExtArgs>
    /**
     * @deprecated Use discountsDefaultArgs instead
     */
    export type discountsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = discountsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use userdiscountDefaultArgs instead
     */
    export type userdiscountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = userdiscountDefaultArgs<ExtArgs>
    /**
     * @deprecated Use orderdetailDefaultArgs instead
     */
    export type orderdetailArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = orderdetailDefaultArgs<ExtArgs>
    /**
     * @deprecated Use paymentsDefaultArgs instead
     */
    export type paymentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = paymentsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use usersDefaultArgs instead
     */
    export type usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = usersDefaultArgs<ExtArgs>
    /**
     * @deprecated Use categoriesDefaultArgs instead
     */
    export type categoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = categoriesDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProductDefaultArgs instead
     */
    export type ProductArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProductDefaultArgs<ExtArgs>
    /**
     * @deprecated Use health_infoDefaultArgs instead
     */
    export type health_infoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = health_infoDefaultArgs<ExtArgs>
    /**
     * @deprecated Use reviewsDefaultArgs instead
     */
    export type reviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = reviewsDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}
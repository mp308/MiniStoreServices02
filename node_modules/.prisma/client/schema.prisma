generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model orders {
  order_id         Int                       @id @default(autoincrement())
  UserID           Int
  order_date       DateTime                  @default(now()) @db.DateTime(0)
  order_status     orders_order_status?
  total_amount     Decimal                   @db.Decimal(10, 2) // จำนวนเงินรวมทั้งหมด (รวมส่วนลด)
  shipping_method  shipping_shipping_status? // ใช้ enum กำหนดประเภทการส่ง
  shipping_price   Decimal                   @db.Decimal(10, 2)
  full_name        String                    @db.VarChar(255)
  shipping_address String                    @db.VarChar(255)
  phone_number     String                    @db.VarChar(20)

  // เชื่อมกับส่วนลด
  discount_id Int?
  discount    discounts? @relation(fields: [discount_id], references: [discount_id])

  // ฟิลด์ใหม่เพื่อเก็บค่าที่คำนวณ
  original_amount Decimal? @db.Decimal(10, 2) // ราคาก่อนหักส่วนลด
  discount_amount Decimal? @db.Decimal(10, 2) // จำนวนเงินที่หักจากส่วนลด
  final_amount    Decimal? @db.Decimal(10, 2) // ราคาสุดท้ายหลังหักส่วนลด

  user         users         @relation(fields: [UserID], references: [UserID])
  orderdetails orderdetail[]
  payments     payments[]

  @@index([UserID], map: "UserID")
}

model discounts {
  discount_id      Int             @id @default(autoincrement())
  discount_code    String          @unique
  discount_amount  Decimal?        @db.Decimal(10, 2) // เปลี่ยนให้สามารถเป็น null ได้
  status           discount_status @default(onPrepare)
  discount_percent Float? // ส่วนลดเป็นเปอร์เซ็นต์ (ถ้ามี)
  expiration_date  DateTime? // วันที่หมดอายุของส่วนลด

  orders       orders[] // เชื่อมกับตาราง orders
  userdiscount userdiscount[] // ความสัมพันธ์กับ userdiscount (ผู้ใช้กับส่วนลด)
}

model userdiscount {
  user_discount_id Int                 @id @default(autoincrement())
  UserID           Int // Foreign key to users
  discount_id      Int
  created_at       DateTime            @default(now()) // วันที่ได้รับส่วนลด
  status           userdiscount_status @default(active) // เพิ่มฟิลด์สถานะ พร้อมตั้งค่าเริ่มต้นเป็น active

  user     users     @relation(fields: [UserID], references: [UserID])
  discount discounts @relation(fields: [discount_id], references: [discount_id])

  @@index([UserID], map: "UserID")
  @@index([discount_id], map: "discount_id")
}

model orderdetail {
  order_id   Int
  product_id Int
  quantity   Int
  unit_price Decimal @db.Decimal(10, 2)

  orders  orders  @relation(fields: [order_id], references: [order_id])
  product Product @relation(fields: [product_id], references: [product_id])

  @@id([order_id, product_id])
  @@index([product_id], map: "product_id")
}

model payments {
  payment_id     Int                      @id @default(autoincrement())
  order_id       Int
  payment_method String?                  @db.VarChar(50)
  payment_date   DateTime?                @db.DateTime(0)
  amount         Decimal                  @db.Decimal(10, 2)
  remark         String?                  @db.VarChar(255)
  payment_status payments_payment_status?
  payment_Image  String?

  orders orders @relation(fields: [order_id], references: [order_id])

  @@index([order_id], map: "order_id")
}

model users {
  UserName         String    @unique(map: "Users_UNIQUE") @db.VarChar(100)
  UserID           Int       @id @default(autoincrement())
  Password         String    @db.VarChar(100)
  Status           String?   @db.VarChar(100)
  Role             String?   @db.VarChar(100)
  resetToken       String? // Token for password reset
  resetTokenExpiry DateTime? // Expiry time for the token

  orders       orders[]
  reviews      reviews[]
  userdiscount userdiscount[] // ความสัมพันธ์กับ userdiscount (ผู้ใช้กับส่วนลด)
  healthInfo   health_info?
}

model categories {
  CategoriesID   Int     @id @default(autoincrement())
  CategoriesName String? @db.VarChar(255)

  Product Product[] // One-to-many relationship with products
}

model Product {
  product_id        Int    @id @default(autoincrement())
  name              String
  description       String
  price             Float
  CategoryID        Int?
  size              Float
  Nutritional_value String
  taste             String
  image_url         String

  orderdetails orderdetail[] // ความสัมพันธ์กับ orderdetail
  reviews      reviews[]
  categories   categories?   @relation(fields: [CategoryID], references: [CategoriesID]) // Relation with categories
}

model health_info {
  health_id     Int     @id @default(autoincrement())
  UserID        Int     @unique
  first_name    String  @db.VarChar(50)
  last_name     String  @db.VarChar(50)
  gender        String  @db.VarChar(50)
  email         String? @unique @db.VarChar(100) // Optional, but unique
  address       String? @db.VarChar(255)
  phone_number  String? @db.VarChar(20)
  age           Int
  weight        Float
  height        Float
  profile_image String? @db.VarChar(255) // ฟิลด์ใหม่สำหรับเก็บชื่อไฟล์รูปภาพ

  user users @relation(fields: [UserID], references: [UserID])

  @@index([UserID], map: "UserID")
}

model reviews {
  ReviewID   Int       @id @default(autoincrement())
  product_id Int // Foreign key to products
  UserID     Int // Foreign key to users
  Comment    String?   @db.Text
  Rating     Int?
  CreatedAt  DateTime? @db.Timestamp(0)

  user    users   @relation(fields: [UserID], references: [UserID]) // Correct relation to users
  product Product @relation(fields: [product_id], references: [product_id]) // Correct relation to products
}

enum orders_order_status {
  processing
  completed
  cancelled
  shipping
  contactadmin
  failed
}

enum payments_payment_status {
  pending
  cancelled
  completed
}

enum discount_status {
  onProduct // บนเว็ป
  onPrepare //  กำลังสร้าง
  onProcess //  เบื้องหลัง
}

enum userdiscount_status {
  active
  used
  expired
}

enum shipping_shipping_status {
  ems
  standard
}
